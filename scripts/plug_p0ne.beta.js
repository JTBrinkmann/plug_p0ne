// Generated by LiveScript 1.3.1
/*=====================*\
|* plug_p0ne.beta      *|
\*=====================*/
/*@source p0ne.head.ls */
/**
 * plug_p0ne - a modern script collection to improve plug.dj
 * adds a variety of new functions, bugfixes, tweaks and developer tools/functions
 *
 * This script collection is written in LiveScript (a CoffeeScript descendend which compiles to JavaScript). If you are reading this in JavaScript, you might want to check out the LiveScript file instead for a better documented and formatted source; just replace the .js with .ls in the URL of this file
 *
 * @author jtbrinkmann aka. Brinkie Pie
 * @license MIT License
 * @copyright (c) 2014-2015 J.-T. Brinkmann
 *
 * further credits go to
 *     the plugCubed Team - for coining a standard for the "Custom Room Settings"
 *     all the beta testers! <3
 *     plug.dj - for it's horribly broken implementation of everything.
 *               "If it wasn't THAT broken, I wouldn't have had as much fun in coding plug_p0ne"
 *                   --Brinkie Pie (2015)
 *
 * The following 3rd party scripts are used:
 *     - pieroxy's      lz-string    https://github.com/pieroxy/lz-string (DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE)
 *     - Mozilla's      localforage  https://github.com/mozilla/localforage (Apache License v2.0)
 *     - Stefan Petre's Color Picker http://www.eyecon.ro/colorpicker/ (Dual licensed under the MIT and GPL licenses)
 *
 * The following are not used by plug_p0ne, but provided for usage in the console, for easier debugging
 *     - Oliver Steele's lambda.js https://github.com/fschaefer/Lambda.js (MIT License)
 *     - SteamDev's      zClip     http://steamdev.com/zclip/ (MIT license)
 *         - using Marcus Handa & Isaac Durazo's ZeroClipboard http://zeroclipboard.org/ (MIT License)
 *
 * Not happy with plug_p0ne? contact me (the developer) at brinkiepie@gmail.com
 * great alternative plug.dj scripts are
 *     - RCS       (best alternative I could recommend - https://radiant.dj/rcs )
 *     - TastyPlug (relatively lightweight but does a good job - https://fungustime.pw/tastyplug/ )
 *     - plugCubed (does a lot of things, but breaks often and doesn't seem to be actively developed anymore - https://plugcubed.net/ )
 *     - plugplug  (lightweight as heck - https://bitbucket.org/mateon1/plugplug/ )
 */
var p0ne_, errors, warnings, error_, warn_, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
console.info("~~~~~~~~~~~~ plug_p0ne loading ~~~~~~~~~~~~");
if (typeof console.time == 'function') {
  console.time("[p0ne] completly loaded");
}
p0ne_ = window.p0ne;
window.p0ne = {
  version: '1.8.9',
  lastCompatibleVersion: '1.8.8.2',
  host: 'https://cdn.p0ne.com',
  SOUNDCLOUD_KEY: 'aff458e0e87cfbc1a2cde2f8aeb98759',
  YOUTUBE_V3_KEY: 'AIzaSyDaWL9emnR9R_qBWlDAYl-Z_h4ZPYBDjzk',
  FIMSTATS_KEY: '4983a7f2-b253-4300-8b18-6e7c57db5e2e',
  proxy: function(url){
    return "https://cors-anywhere.herokuapp.com/" + url.replace(/^.*\/\//, '');
  },
  started: new Date(),
  autosave: {},
  autosave_num: {},
  modules: (typeof p0ne != 'undefined' && p0ne !== null ? p0ne.modules : void 8) || {},
  dependencies: {},
  reload: function(){
    return $.getScript(this.host + "/scripts/plug_p0ne.beta.js");
  },
  close: function(){
    var i$, ref$, m;
    console.groupCollapsed("[p0ne] closing");
    for (i$ in ref$ = this.modules) {
      m = ref$[i$];
      if (typeof m.settingsSave == 'function') {
        m.settingsSave();
      }
      m.disable(true);
    }
    if (typeof window.dataSave === 'function') {
      window.dataSave();
      $window.off('beforeunload', window.dataSave);
      clearInterval(window.dataSave.interval);
    }
    console.groupEnd("[p0ne] closing");
  }
};
console.info("plug_p0ne v" + p0ne.version);
try {
  if (typeof window.dataSave == 'function') {
    window.dataSave();
  }
} catch (e$) {}
/*####################################
#           COMPATIBILITY            #
####################################*/
/* check if last run p0ne version is incompatible with current and needs to be migrated */
window.compareVersions = function(a, b){
  var i$, len$, i;
  a = a.split('.');
  b = b.split('.');
  for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
    i = i$;
    if (a[i] !== b[i]) {
      return a[i] > b[i];
    }
  }
  return b.length >= a.length;
};
errors = warnings = 0;
error_ = console.error;
console.error = function(){
  errors++;
  error_.apply(this, arguments);
};
warn_ = console.warn;
console.warn = function(){
  warnings++;
  warn_.apply(this, arguments);
};
if (typeof API != 'undefined' && API !== null) {
  API.enabled = true;
}
(function(fn__){
  var fn_, fn, v, onMigrated;
  if (window.P0NE_UPDATE) {
    window.P0NE_UPDATE = false;
    if ((p0ne_ != null ? p0ne_.version : void 8) === window.p0ne.version) {
      return;
    } else {
      if (typeof chatWarn == 'function') {
        chatWarn("automatically updated to v" + p0ne.version, 'plug_p0ne');
      }
    }
  }
  if (!console.group) {
    console.group = console.log;
    console.groupEnd = $.noop;
  }
  fn_ = function(){
    var err;
    try {
      fn__();
    } catch (e$) {
      err = e$;
      console.error = error_;
      console.warn = warn_;
      console.groupEnd();
      console.groupEnd();
      console.groupEnd();
      console.error("[plug_p0ne fatal error]", err);
      if (errors) {
        console.error("[p0ne] There have been " + errors + " (other) errors");
      }
      if (warnings) {
        console.warn("[p0ne] There have been " + warnings + " warnings");
      }
      API.chatLog("failed to load plug_p0ne: fatal error");
    }
  };
  fn = function(){
    var that, x$, err;
    try {
      if (that = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB) {
        x$ = that.open('_localforage_spec_test', 1);
        x$.onsuccess = function(){
          fn_();
        };
        x$.onerror = x$.onblocked = x$.onupgradeneeded = function(err){
          delete window.indexedDB, delete window.webkitIndexedDB, delete window.mozIndexedDB, delete window.OIndexedDB, delete window.msIndexedDB;
          console.error("[p0ne] indexDB doesn't work, falling back to localStorage", err);
          fn_();
        };
      } else {
        fn_();
      }
    } catch (e$) {
      err = e$;
      console.error("[p0ne] indexDB doesn't work, falling back to localStorage", err);
      delete window.indexedDB, delete window.webkitIndexedDB, delete window.mozIndexedDB, delete window.OIndexedDB, delete window.msIndexedDB;
      fn_();
    }
  };
  if (!(v = localStorage.p0neVersion)) {
    return fn();
  }
  if (compareVersions(v, p0ne.lastCompatibleVersion)) {
    fn();
  } else {
    console.warn("[p0ne] obsolete p0ne version detected (" + v + " < " + p0ne.lastCompatibleVersion + "), loading migration script…");
    API.off('p0ne_migrated');
    API.on('p0ne_migrated', onMigrated = function(newVersion){
      if (newVersion === p0ne.lastCompatibleVersion) {
        API.off('p0ne_migrated', onMigrated);
        fn();
      }
    });
    $.getScript(p0ne.host + "/scripts/plug_p0ne.migrate." + v.substr(0, v.indexOf('.')) + ".js?from=" + v + "&to=" + p0ne.version);
  }
})(function(){
  /* start of fn_ */
  /* if needed, this function is called once plug_p0ne successfully migrated. Otherwise it gets called right away */
  var p0ne, $window, $body, $app, tmp, i$, ref$, len$, Constr, DataEmitter, $dummy;
  if (console.groupCollapsed) {
    console.groupCollapsed("[p0ne] initializing… (click on this message to expand/collapse the group)");
  } else {
    console.groupCollapsed = console.group;
    console.group("[p0ne] initializing…");
  }
  p0ne = window.p0ne;
  localStorage.p0neVersion = p0ne.version;
  /*setInterval do
      !->
          window.P0NE_UPDATE = true
          p0ne.reload!
              .then !->
                  setTimeout do
                      !-> window.P0NE_UPDATE = false
                      10_000ms
      30 * 60_000ms*/
  requirejs.define = window.define;
  window.require = window.define = window.module = false;
  /*@source lambda.js */
  
  /*
   * Lambda.js: String based lambdas for Node.js and the browser.
   * edited by JTBrinkmann to support some CoffeeScript like shorthands (e.g. :: for prototype)
   *
   * Copyright (c) 2007 Oliver Steele (steele@osteele.com)
   * Released under MIT license.
   *
   * Version: 1.0.2
   *
   */
  (function (root, factory) {
      if (typeof exports === 'object') {
          module.exports = factory();
      } else {
          root.lambda = factory();
      }
  })(this, function () {
  
      var
          split = 'ab'.split(/a*/).length > 1 ? String.prototype.split : function (separator) {
                  var result = this.split.apply(this, arguments),
                      re = RegExp(separator),
                      savedIndex = re.lastIndex,
                      match = re.exec(this);
                  if (match && match.index === 0) {
                      result.unshift('');
                  }
                  re.lastIndex = savedIndex;
                  return result;
              },
          indexOf = Array.prototype.indexOf || function (element) {
                  for (var i = 0, e; e = this[i]; i++) {
                      if (e === element) {
                          return i;
                      }
                  }
                  return -1;
              };
  
      function lambda(expression, vars) {
          if (!vars || !vars.length)
              vars = []
          expression = expression.replace(/^\s+/, '').replace(/\s+$/, '') // jtb edit
          var parameters = [],
              sections = split.call(expression, /\s*->\s*/m);
          if (sections.length > 1) {
              while (sections.length) {
                  expression = sections.pop();
                  parameters = sections.pop().replace(/^\s*(.*)\s*$/, '$1').split(/\s*,\s*|\s+/m);
                  sections.length && sections.push('(function('+parameters+'){return ('+expression+')})');
              }
          } else if (expression.match(/\b_\b/)) {
              parameters = '_';
          } else {
              var leftSection = expression.match(/^(?:[+*\/%&|\^\.=<>]|!=|::)/m),
                  rightSection = expression.match(/[+\-*\/%&|\^\.=<>!]$/m);
              if (leftSection || rightSection) {
                  if (leftSection) {
                      parameters.push('$1');
                      expression = '$1' + expression;
                  }
                  if (rightSection) {
                      parameters.push('$2');
                      if (rightSection[0] == '.')
                          expression = expression.substr(0, expression.length-1) + '[$2]' // jtb edit
                      else
                          expression = expression + '$2';
                  }
              } else {
                  var variables = expression
                      .replace(/(?:\b[A-Z]|\.[a-zA-Z_$])[a-zA-Z_$\d]*|[a-zA-Z_$][a-zA-Z_$\d]*\s*:|true|false|null|undefined|this|arguments|'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"/g, '')
                      .match(/([a-z_$][a-z_$\d]*)/gi) || [];
                  for (var i = 0, v; v = variables[i++];) {
                      if (parameters.indexOf(v) == -1 && vars.indexOf(v) == -1)
                          parameters.push(v);
                  }
              }
          }
          if (vars.length)
              vars = 'var '+vars.join(',')+'; '
          else
              vars = ''
  
          try {
              return new Function(parameters, vars+'return (' + expression + ')');
          } catch(e) {
              e.message += ' in function('+parameters+'){'+vars+'return (' + expression + ')}'
              throw e
          }
      }
  
      return lambda;
  });
  
  window.l = window.l_ = function(expression) {
      var vars = [], refs = 0
      var replacedNCO = true
      expression = expression
          // :: for prototype
          .replace(/([\w$]*)\.?::(\?)?\.?([\w$])?/g, function(_, pre, nullCoalescingOp, post, i) {
              return (pre ? pre+'.' : i == 0 ? '.' : '') + 'prototype' + (nullCoalescingOp||'') + (post ? '.'+post : '')
          })
          // @ for this
          .replace(/@(\?)?\.?([\w$])?/g, function(_, nullCoalescingOp, post, i) {
              return 'this' + (nullCoalescingOp||'') + (post ? '.'+post : '')
          })
      // ?. for Null Coalescing Operator
      while (replacedNCO) {
          replacedNCO = false
          expression = expression.replace(/([\w\.\$]+)\?([\w\.\$]|\[)/, function(_, pre, post) {
              replacedNCO = true
              vars[refs++] = 'ref'+refs+'$'
              return '(ref'+refs+'$ = '+(pre[0]=='.'?'it':'')+pre+') != null && ref'+refs+'$'+(post[0]=="."||post[0]=="[" ? "" : ".")+post
          })
      }
      return lambda(expression, vars)
  }
  
  
  /*@source lz-string.js */
  
  // Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
  // This work is free. You can redistribute it and/or modify it
  // under the terms of the WTFPL, Version 2
  // For more information see LICENSE.txt or http://www.wtfpl.net/
  //
  // For more information, the home page:
  // http://pieroxy.net/blog/pages/lz-string/testing.html
  //
  // LZ-based compression algorithm, version 1.3.6
  var LZString = {
    
    
    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    _f : String.fromCharCode,
    
    compressToBase64 : function (input) {
      if (input == null) return "";
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      
      input = LZString.compress(input);
      
      while (i < input.length*2) {
        
        if (i%2==0) {
          chr1 = input.charCodeAt(i/2) >> 8;
          chr2 = input.charCodeAt(i/2) & 255;
          if (i/2+1 < input.length) 
            chr3 = input.charCodeAt(i/2+1) >> 8;
          else 
            chr3 = NaN;
        } else {
          chr1 = input.charCodeAt((i-1)/2) & 255;
          if ((i+1)/2 < input.length) {
            chr2 = input.charCodeAt((i+1)/2) >> 8;
            chr3 = input.charCodeAt((i+1)/2) & 255;
          } else 
            chr2=chr3=NaN;
        }
        i+=3;
        
        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;
        
        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }
        
        output = output +
          LZString._keyStr.charAt(enc1) + LZString._keyStr.charAt(enc2) +
            LZString._keyStr.charAt(enc3) + LZString._keyStr.charAt(enc4);
        
      }
      
      return output;
    },
    
    decompressFromBase64 : function (input) {
      if (input == null) return "";
      var output = "",
          ol = 0, 
          output_,
          chr1, chr2, chr3,
          enc1, enc2, enc3, enc4,
          i = 0, f=LZString._f;
      
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      
      while (i < input.length) {
        
        enc1 = LZString._keyStr.indexOf(input.charAt(i++));
        enc2 = LZString._keyStr.indexOf(input.charAt(i++));
        enc3 = LZString._keyStr.indexOf(input.charAt(i++));
        enc4 = LZString._keyStr.indexOf(input.charAt(i++));
        
        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;
        
        if (ol%2==0) {
          output_ = chr1 << 8;
          
          if (enc3 != 64) {
            output += f(output_ | chr2);
          }
          if (enc4 != 64) {
            output_ = chr3 << 8;
          }
        } else {
          output = output + f(output_ | chr1);
          
          if (enc3 != 64) {
            output_ = chr2 << 8;
          }
          if (enc4 != 64) {
            output += f(output_ | chr3);
          }
        }
        ol+=3;
      }
      
      return LZString.decompress(output);
      
    },
  
    compressToUTF16 : function (input) {
      if (input == null) return "";
      var output = "",
          i,c,
          current,
          status = 0,
          f = LZString._f;
      
      input = LZString.compress(input);
      
      for (i=0 ; i<input.length ; i++) {
        c = input.charCodeAt(i);
        switch (status++) {
          case 0:
            output += f((c >> 1)+32);
            current = (c & 1) << 14;
            break;
          case 1:
            output += f((current + (c >> 2))+32);
            current = (c & 3) << 13;
            break;
          case 2:
            output += f((current + (c >> 3))+32);
            current = (c & 7) << 12;
            break;
          case 3:
            output += f((current + (c >> 4))+32);
            current = (c & 15) << 11;
            break;
          case 4:
            output += f((current + (c >> 5))+32);
            current = (c & 31) << 10;
            break;
          case 5:
            output += f((current + (c >> 6))+32);
            current = (c & 63) << 9;
            break;
          case 6:
            output += f((current + (c >> 7))+32);
            current = (c & 127) << 8;
            break;
          case 7:
            output += f((current + (c >> 8))+32);
            current = (c & 255) << 7;
            break;
          case 8:
            output += f((current + (c >> 9))+32);
            current = (c & 511) << 6;
            break;
          case 9:
            output += f((current + (c >> 10))+32);
            current = (c & 1023) << 5;
            break;
          case 10:
            output += f((current + (c >> 11))+32);
            current = (c & 2047) << 4;
            break;
          case 11:
            output += f((current + (c >> 12))+32);
            current = (c & 4095) << 3;
            break;
          case 12:
            output += f((current + (c >> 13))+32);
            current = (c & 8191) << 2;
            break;
          case 13:
            output += f((current + (c >> 14))+32);
            current = (c & 16383) << 1;
            break;
          case 14:
            output += f((current + (c >> 15))+32, (c & 32767)+32);
            status = 0;
            break;
        }
      }
      
      return output + f(current + 32);
    },
    
  
    decompressFromUTF16 : function (input) {
      if (input == null) return "";
      var output = "",
          current,c,
          status=0,
          i = 0,
          f = LZString._f;
      
      while (i < input.length) {
        c = input.charCodeAt(i) - 32;
        
        switch (status++) {
          case 0:
            current = c << 1;
            break;
          case 1:
            output += f(current | (c >> 14));
            current = (c&16383) << 2;
            break;
          case 2:
            output += f(current | (c >> 13));
            current = (c&8191) << 3;
            break;
          case 3:
            output += f(current | (c >> 12));
            current = (c&4095) << 4;
            break;
          case 4:
            output += f(current | (c >> 11));
            current = (c&2047) << 5;
            break;
          case 5:
            output += f(current | (c >> 10));
            current = (c&1023) << 6;
            break;
          case 6:
            output += f(current | (c >> 9));
            current = (c&511) << 7;
            break;
          case 7:
            output += f(current | (c >> 8));
            current = (c&255) << 8;
            break;
          case 8:
            output += f(current | (c >> 7));
            current = (c&127) << 9;
            break;
          case 9:
            output += f(current | (c >> 6));
            current = (c&63) << 10;
            break;
          case 10:
            output += f(current | (c >> 5));
            current = (c&31) << 11;
            break;
          case 11:
            output += f(current | (c >> 4));
            current = (c&15) << 12;
            break;
          case 12:
            output += f(current | (c >> 3));
            current = (c&7) << 13;
            break;
          case 13:
            output += f(current | (c >> 2));
            current = (c&3) << 14;
            break;
          case 14:
            output += f(current | (c >> 1));
            current = (c&1) << 15;
            break;
          case 15:
            output += f(current | c);
            status=0;
            break;
        }
        
        
        i++;
      }
      
      return LZString.decompress(output);
      //return output;
      
    },
  
  
    //compress into uint8array (UCS-2 big endian format)
    compressToUint8Array: function (uncompressed) {
  
      var compressed = LZString.compress(uncompressed);
      var buf=new Uint8Array(compressed.length*2); // 2 bytes per character
  
      for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
        var current_value = compressed.charCodeAt(i);
        buf[i*2] = current_value >>> 8;
        buf[i*2+1] = current_value % 256;
      }
      return buf;
  
    },
  
    //decompress from uint8array (UCS-2 big endian format)
    decompressFromUint8Array:function (compressed) {
  
      if (compressed===null || compressed===undefined){
          return LZString.decompress(compressed);
      } else {
  
          var buf=new Array(compressed.length/2); // 2 bytes per character
  
          for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
            buf[i]=compressed[i*2]*256+compressed[i*2+1];
          }
  
          return LZString.decompress(String.fromCharCode.apply(null, buf));
  
      }
  
    },
  
    //compress into a string that is already URI encoded
    compressToEncodedURIComponent: function (uncompressed) {
      return LZString.compressToBase64(uncompressed).replace(/=/g,"$").replace(/\//g,"-");
    },
  
    //decompress from an output of compressToEncodedURIComponent
    decompressFromEncodedURIComponent:function (compressed) {
      if (compressed) compressed = compressed.replace(/$/g,"=").replace(/-/g,"/");
      return LZString.decompressFromBase64(compressed);
    },
  
  
    compress: function (uncompressed) {
      if (uncompressed == null) return "";
      var i, value,
          context_dictionary= {},
          context_dictionaryToCreate= {},
          context_c="",
          context_wc="",
          context_w="",
          context_enlargeIn= 2, // Compensate for the first entry which should not count
          context_dictSize= 3,
          context_numBits= 2,
          context_data_string="", 
          context_data_val=0, 
          context_data_position=0,
          ii,
          f=LZString._f;
      
      for (ii = 0; ii < uncompressed.length; ii += 1) {
        context_c = uncompressed.charAt(ii);
        if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
          context_dictionary[context_c] = context_dictSize++;
          context_dictionaryToCreate[context_c] = true;
        }
        
        context_wc = context_w + context_c;
        if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
          context_w = context_wc;
        } else {
          if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
            if (context_w.charCodeAt(0)<256) {
              for (i=0 ; i<context_numBits ; i++) {
                context_data_val = (context_data_val << 1);
                if (context_data_position == 15) {
                  context_data_position = 0;
                  context_data_string += f(context_data_val);
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
              }
              value = context_w.charCodeAt(0);
              for (i=0 ; i<8 ; i++) {
                context_data_val = (context_data_val << 1) | (value&1);
                if (context_data_position == 15) {
                  context_data_position = 0;
                  context_data_string += f(context_data_val);
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            } else {
              value = 1;
              for (i=0 ; i<context_numBits ; i++) {
                context_data_val = (context_data_val << 1) | value;
                if (context_data_position == 15) {
                  context_data_position = 0;
                  context_data_string += f(context_data_val);
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = 0;
              }
              value = context_w.charCodeAt(0);
              for (i=0 ; i<16 ; i++) {
                context_data_val = (context_data_val << 1) | (value&1);
                if (context_data_position == 15) {
                  context_data_position = 0;
                  context_data_string += f(context_data_val);
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
            }
            context_enlargeIn--;
            if (context_enlargeIn == 0) {
              context_enlargeIn = Math.pow(2, context_numBits);
              context_numBits++;
            }
            delete context_dictionaryToCreate[context_w];
          } else {
            value = context_dictionary[context_w];
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
            
            
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          // Add wc to the dictionary.
          context_dictionary[context_wc] = context_dictSize++;
          context_w = String(context_c);
        }
      }
      
      // Output the code for w.
      if (context_w !== "") {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += f(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += f(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          
          
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
      }
      
      // Mark the end of the stream
      value = 2;
      for (i=0 ; i<context_numBits ; i++) {
        context_data_val = (context_data_val << 1) | (value&1);
        if (context_data_position == 15) {
          context_data_position = 0;
          context_data_string += f(context_data_val);
          context_data_val = 0;
        } else {
          context_data_position++;
        }
        value = value >> 1;
      }
      
      // Flush the last char
      while (true) {
        context_data_val = (context_data_val << 1);
        if (context_data_position == 15) {
          context_data_string += f(context_data_val);
          break;
        }
        else context_data_position++;
      }
      return context_data_string;
    },
    
    decompress: function (compressed) {
      if (compressed == null) return "";
      if (compressed == "") return null;
      var dictionary = [],
          next,
          enlargeIn = 4,
          dictSize = 4,
          numBits = 3,
          entry = "",
          result = "",
          i,
          w,
          bits, resb, maxpower, power,
          c,
          f = LZString._f,
          data = {string:compressed, val:compressed.charCodeAt(0), position:32768, index:1};
      
      for (i = 0; i < 3; i += 1) {
        dictionary[i] = i;
      }
      
      bits = 0;
      maxpower = Math.pow(2,2);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = 32768;
          data.val = data.string.charCodeAt(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }
      
      switch (next = bits) {
        case 0: 
            bits = 0;
            maxpower = Math.pow(2,8);
            power=1;
            while (power!=maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = 32768;
                data.val = data.string.charCodeAt(data.index++);
              }
              bits |= (resb>0 ? 1 : 0) * power;
              power <<= 1;
            }
          c = f(bits);
          break;
        case 1: 
            bits = 0;
            maxpower = Math.pow(2,16);
            power=1;
            while (power!=maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = 32768;
                data.val = data.string.charCodeAt(data.index++);
              }
              bits |= (resb>0 ? 1 : 0) * power;
              power <<= 1;
            }
          c = f(bits);
          break;
        case 2: 
          return "";
      }
      dictionary[3] = c;
      w = result = c;
      while (true) {
        if (data.index > data.string.length) {
          return "";
        }
        
        bits = 0;
        maxpower = Math.pow(2,numBits);
        power=1;
        while (power!=maxpower) {
          resb = data.val & data.position;
          data.position >>= 1;
          if (data.position == 0) {
            data.position = 32768;
            data.val = data.string.charCodeAt(data.index++);
          }
          bits |= (resb>0 ? 1 : 0) * power;
          power <<= 1;
        }
  
        switch (c = bits) {
          case 0: 
            bits = 0;
            maxpower = Math.pow(2,8);
            power=1;
            while (power!=maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = 32768;
                data.val = data.string.charCodeAt(data.index++);
              }
              bits |= (resb>0 ? 1 : 0) * power;
              power <<= 1;
            }
  
            dictionary[dictSize++] = f(bits);
            c = dictSize-1;
            enlargeIn--;
            break;
          case 1: 
            bits = 0;
            maxpower = Math.pow(2,16);
            power=1;
            while (power!=maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = 32768;
                data.val = data.string.charCodeAt(data.index++);
              }
              bits |= (resb>0 ? 1 : 0) * power;
              power <<= 1;
            }
            dictionary[dictSize++] = f(bits);
            c = dictSize-1;
            enlargeIn--;
            break;
          case 2: 
            return result;
        }
        
        if (enlargeIn == 0) {
          enlargeIn = Math.pow(2, numBits);
          numBits++;
        }
        
        if (dictionary[c]) {
          entry = dictionary[c];
        } else {
          if (c === dictSize) {
            entry = w + w.charAt(0);
          } else {
            return null;
          }
        }
        result += entry;
        
        // Add w+entry[0] to the dictionary.
        dictionary[dictSize++] = w + entry.charAt(0);
        enlargeIn--;
        
        w = entry;
        
        if (enlargeIn == 0) {
          enlargeIn = Math.pow(2, numBits);
          numBits++;
        }
        
      }
    }
  };
  
  if( typeof module !== 'undefined' && module != null ) {
    module.exports = LZString
  }
  
  /*@source localforage.min.js */
  
  !function(){var a,b,c,d;!function(){var e={},f={};a=function(a,b,c){e[a]={deps:b,callback:c}},d=c=b=function(a){function c(b){if("."!==b.charAt(0))return b;for(var c=b.split("/"),d=a.split("/").slice(0,-1),e=0,f=c.length;f>e;e++){var g=c[e];if(".."===g)d.pop();else{if("."===g)continue;d.push(g)}}return d.join("/")}if(d._eak_seen=e,f[a])return f[a];if(f[a]={},!e[a])throw new Error("Could not find module "+a);for(var g,h=e[a],i=h.deps,j=h.callback,k=[],l=0,m=i.length;m>l;l++)k.push("exports"===i[l]?g={}:b(c(i[l])));var n=j.apply(this,k);return f[a]=g||n}}(),a("promise/all",["./utils","exports"],function(a,b){"use strict";function c(a){var b=this;if(!d(a))throw new TypeError("You must pass an array to all.");return new b(function(b,c){function d(a){return function(b){f(a,b)}}function f(a,c){h[a]=c,0===--i&&b(h)}var g,h=[],i=a.length;0===i&&b([]);for(var j=0;j<a.length;j++)g=a[j],g&&e(g.then)?g.then(d(j),c):f(j,g)})}var d=a.isArray,e=a.isFunction;b.all=c}),a("promise/asap",["exports"],function(a){"use strict";function b(){return function(){process.nextTick(e)}}function c(){var a=0,b=new i(e),c=document.createTextNode("");return b.observe(c,{characterData:!0}),function(){c.data=a=++a%2}}function d(){return function(){j.setTimeout(e,1)}}function e(){for(var a=0;a<k.length;a++){var b=k[a],c=b[0],d=b[1];c(d)}k=[]}function f(a,b){var c=k.push([a,b]);1===c&&g()}var g,h="undefined"!=typeof window?window:{},i=h.MutationObserver||h.WebKitMutationObserver,j="undefined"!=typeof global?global:void 0===this?window:this,k=[];g="undefined"!=typeof process&&"[object process]"==={}.toString.call(process)?b():i?c():d(),a.asap=f}),a("promise/config",["exports"],function(a){"use strict";function b(a,b){return 2!==arguments.length?c[a]:void(c[a]=b)}var c={instrument:!1};a.config=c,a.configure=b}),a("promise/polyfill",["./promise","./utils","exports"],function(a,b,c){"use strict";function d(){var a;a="undefined"!=typeof global?global:"undefined"!=typeof window&&window.document?window:self;var b="Promise"in a&&"resolve"in a.Promise&&"reject"in a.Promise&&"all"in a.Promise&&"race"in a.Promise&&function(){var b;return new a.Promise(function(a){b=a}),f(b)}();b||(a.Promise=e)}var e=a.Promise,f=b.isFunction;c.polyfill=d}),a("promise/promise",["./config","./utils","./all","./race","./resolve","./reject","./asap","exports"],function(a,b,c,d,e,f,g,h){"use strict";function i(a){if(!v(a))throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");if(!(this instanceof i))throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");this._subscribers=[],j(a,this)}function j(a,b){function c(a){o(b,a)}function d(a){q(b,a)}try{a(c,d)}catch(e){d(e)}}function k(a,b,c,d){var e,f,g,h,i=v(c);if(i)try{e=c(d),g=!0}catch(j){h=!0,f=j}else e=d,g=!0;n(b,e)||(i&&g?o(b,e):h?q(b,f):a===D?o(b,e):a===E&&q(b,e))}function l(a,b,c,d){var e=a._subscribers,f=e.length;e[f]=b,e[f+D]=c,e[f+E]=d}function m(a,b){for(var c,d,e=a._subscribers,f=a._detail,g=0;g<e.length;g+=3)c=e[g],d=e[g+b],k(b,c,d,f);a._subscribers=null}function n(a,b){var c,d=null;try{if(a===b)throw new TypeError("A promises callback cannot return that same promise.");if(u(b)&&(d=b.then,v(d)))return d.call(b,function(d){return c?!0:(c=!0,void(b!==d?o(a,d):p(a,d)))},function(b){return c?!0:(c=!0,void q(a,b))}),!0}catch(e){return c?!0:(q(a,e),!0)}return!1}function o(a,b){a===b?p(a,b):n(a,b)||p(a,b)}function p(a,b){a._state===B&&(a._state=C,a._detail=b,t.async(r,a))}function q(a,b){a._state===B&&(a._state=C,a._detail=b,t.async(s,a))}function r(a){m(a,a._state=D)}function s(a){m(a,a._state=E)}var t=a.config,u=(a.configure,b.objectOrFunction),v=b.isFunction,w=(b.now,c.all),x=d.race,y=e.resolve,z=f.reject,A=g.asap;t.async=A;var B=void 0,C=0,D=1,E=2;i.prototype={constructor:i,_state:void 0,_detail:void 0,_subscribers:void 0,then:function(a,b){var c=this,d=new this.constructor(function(){});if(this._state){var e=arguments;t.async(function(){k(c._state,d,e[c._state-1],c._detail)})}else l(this,d,a,b);return d},"catch":function(a){return this.then(null,a)}},i.all=w,i.race=x,i.resolve=y,i.reject=z,h.Promise=i}),a("promise/race",["./utils","exports"],function(a,b){"use strict";function c(a){var b=this;if(!d(a))throw new TypeError("You must pass an array to race.");return new b(function(b,c){for(var d,e=0;e<a.length;e++)d=a[e],d&&"function"==typeof d.then?d.then(b,c):b(d)})}var d=a.isArray;b.race=c}),a("promise/reject",["exports"],function(a){"use strict";function b(a){var b=this;return new b(function(b,c){c(a)})}a.reject=b}),a("promise/resolve",["exports"],function(a){"use strict";function b(a){if(a&&"object"==typeof a&&a.constructor===this)return a;var b=this;return new b(function(b){b(a)})}a.resolve=b}),a("promise/utils",["exports"],function(a){"use strict";function b(a){return c(a)||"object"==typeof a&&null!==a}function c(a){return"function"==typeof a}function d(a){return"[object Array]"===Object.prototype.toString.call(a)}var e=Date.now||function(){return(new Date).getTime()};a.objectOrFunction=b,a.isFunction=c,a.isArray=d,a.now=e}),b("promise/polyfill").polyfill()}(),function(){"use strict";function a(a){var b=this,c={db:null};if(a)for(var d in a)c[d]=a[d];return new m(function(a,d){var e=n.open(c.name,c.version);e.onerror=function(){d(e.error)},e.onupgradeneeded=function(){e.result.createObjectStore(c.storeName)},e.onsuccess=function(){c.db=e.result,b._dbInfo=c,a()}})}function b(a,b){var c=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var d=new m(function(b,d){c.ready().then(function(){var e=c._dbInfo,f=e.db.transaction(e.storeName,"readonly").objectStore(e.storeName),g=f.get(a);g.onsuccess=function(){var a=g.result;void 0===a&&(a=null),b(a)},g.onerror=function(){d(g.error)}})["catch"](d)});return k(d,b),d}function c(a,b){var c=this,d=new m(function(b,d){c.ready().then(function(){var e=c._dbInfo,f=e.db.transaction(e.storeName,"readonly").objectStore(e.storeName),g=f.openCursor();g.onsuccess=function(){var c=g.result;if(c){var d=a(c.value,c.key);void 0!==d?b(d):c["continue"]()}else b()},g.onerror=function(){d(g.error)}})["catch"](d)});return k(d,b),d}function d(a,b,c){var d=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var e=new m(function(c,e){d.ready().then(function(){var f=d._dbInfo,g=f.db.transaction(f.storeName,"readwrite").objectStore(f.storeName);null===b&&(b=void 0);var h=g.put(b,a);h.onsuccess=function(){void 0===b&&(b=null),c(b)},h.onerror=function(){e(h.error)}})["catch"](e)});return k(e,c),e}function e(a,b){var c=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var d=new m(function(b,d){c.ready().then(function(){var e=c._dbInfo,f=e.db.transaction(e.storeName,"readwrite").objectStore(e.storeName),g=f["delete"](a);g.onsuccess=function(){b()},g.onerror=function(){d(g.error)},g.onabort=function(a){var b=a.target.error;"QuotaExceededError"===b&&d(b)}})["catch"](d)});return k(d,b),d}function f(a){var b=this,c=new m(function(a,c){b.ready().then(function(){var d=b._dbInfo,e=d.db.transaction(d.storeName,"readwrite").objectStore(d.storeName),f=e.clear();f.onsuccess=function(){a()},f.onerror=function(){c(f.error)}})["catch"](c)});return k(c,a),c}function g(a){var b=this,c=new m(function(a,c){b.ready().then(function(){var d=b._dbInfo,e=d.db.transaction(d.storeName,"readonly").objectStore(d.storeName),f=e.count();f.onsuccess=function(){a(f.result)},f.onerror=function(){c(f.error)}})["catch"](c)});return j(c,a),c}function h(a,b){var c=this,d=new m(function(b,d){return 0>a?void b(null):void c.ready().then(function(){var e=c._dbInfo,f=e.db.transaction(e.storeName,"readonly").objectStore(e.storeName),g=!1,h=f.openCursor();h.onsuccess=function(){var c=h.result;return c?void(0===a?b(c.key):g?b(c.key):(g=!0,c.advance(a))):void b(null)},h.onerror=function(){d(h.error)}})["catch"](d)});return j(d,b),d}function i(a){var b=this,c=new m(function(a,c){b.ready().then(function(){var d=b._dbInfo,e=d.db.transaction(d.storeName,"readonly").objectStore(d.storeName),f=e.openCursor(),g=[];f.onsuccess=function(){var b=f.result;return b?(g.push(b.key),void b["continue"]()):void a(g)},f.onerror=function(){c(f.error)}})["catch"](c)});return j(c,a),c}function j(a,b){b&&a.then(function(a){b(null,a)},function(a){b(a)})}function k(a,b){b&&a.then(function(a){l(b,a)},function(a){b(a)})}function l(a,b){return a?setTimeout(function(){return a(null,b)},0):void 0}var m="undefined"!=typeof module&&module.exports?require("promise"):this.Promise,n=n||this.indexedDB||this.webkitIndexedDB||this.mozIndexedDB||this.OIndexedDB||this.msIndexedDB;if(n){var o={_driver:"asyncStorage",_initStorage:a,iterate:c,getItem:b,setItem:d,removeItem:e,clear:f,length:g,key:h,keys:i};"function"==typeof define&&define.amd?define("asyncStorage",function(){return o}):"undefined"!=typeof module&&module.exports?module.exports=o:this.asyncStorage=o}}.call(window),function(){"use strict";function a(a){var b=this,c={};if(a)for(var d in a)c[d]=a[d];return c.keyPrefix=c.name+"/",b._dbInfo=c,n.resolve()}function b(a){var b=this,c=new n(function(a,c){b.ready().then(function(){for(var c=b._dbInfo.keyPrefix,d=o.length-1;d>=0;d--){var e=o.key(d);0===e.indexOf(c)&&o.removeItem(e)}a()})["catch"](c)});return m(c,a),c}function c(a,b){var c=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var d=new n(function(b,d){c.ready().then(function(){try{var e=c._dbInfo,f=o.getItem(e.keyPrefix+a);f&&(f=i(f)),b(f)}catch(g){d(g)}})["catch"](d)});return m(d,b),d}function d(a,b){var c=this,d=new n(function(b,d){c.ready().then(function(){try{for(var e=c._dbInfo.keyPrefix,f=e.length,g=o.length,h=0;g>h;h++){var j=o.key(h),k=o.getItem(j);if(k&&(k=i(k)),k=a(k,j.substring(f)),void 0!==k)return void b(k)}b()}catch(l){d(l)}})["catch"](d)});return m(d,b),d}function e(a,b){var c=this,d=new n(function(b,d){c.ready().then(function(){var d,e=c._dbInfo;try{d=o.key(a)}catch(f){d=null}d&&(d=d.substring(e.keyPrefix.length)),b(d)})["catch"](d)});return m(d,b),d}function f(a){var b=this,c=new n(function(a,c){b.ready().then(function(){for(var c=b._dbInfo,d=o.length,e=[],f=0;d>f;f++)0===o.key(f).indexOf(c.keyPrefix)&&e.push(o.key(f).substring(c.keyPrefix.length));a(e)})["catch"](c)});return m(c,a),c}function g(a){var b=this,c=new n(function(a,c){b.keys().then(function(b){a(b.length)})["catch"](c)});return m(c,a),c}function h(a,b){var c=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var d=new n(function(b,d){c.ready().then(function(){var d=c._dbInfo;o.removeItem(d.keyPrefix+a),b()})["catch"](d)});return m(d,b),d}function i(a){if(a.substring(0,r)!==q)return JSON.parse(a);for(var b=a.substring(D),c=a.substring(r,D),d=new ArrayBuffer(2*b.length),e=new Uint16Array(d),f=b.length-1;f>=0;f--)e[f]=b.charCodeAt(f);switch(c){case s:return d;case t:return new Blob([d]);case u:return new Int8Array(d);case v:return new Uint8Array(d);case w:return new Uint8ClampedArray(d);case x:return new Int16Array(d);case z:return new Uint16Array(d);case y:return new Int32Array(d);case A:return new Uint32Array(d);case B:return new Float32Array(d);case C:return new Float64Array(d);default:throw new Error("Unkown type: "+c)}}function j(a){var b="",c=new Uint16Array(a);try{b=String.fromCharCode.apply(null,c)}catch(d){for(var e=0;e<c.length;e++)b+=String.fromCharCode(c[e])}return b}function k(a,b){var c="";if(a&&(c=a.toString()),a&&("[object ArrayBuffer]"===a.toString()||a.buffer&&"[object ArrayBuffer]"===a.buffer.toString())){var d,e=q;a instanceof ArrayBuffer?(d=a,e+=s):(d=a.buffer,"[object Int8Array]"===c?e+=u:"[object Uint8Array]"===c?e+=v:"[object Uint8ClampedArray]"===c?e+=w:"[object Int16Array]"===c?e+=x:"[object Uint16Array]"===c?e+=z:"[object Int32Array]"===c?e+=y:"[object Uint32Array]"===c?e+=A:"[object Float32Array]"===c?e+=B:"[object Float64Array]"===c?e+=C:b(new Error("Failed to get type for BinaryArray"))),b(e+j(d))}else if("[object Blob]"===c){var f=new FileReader;f.onload=function(){var a=j(this.result);b(q+t+a)},f.readAsArrayBuffer(a)}else try{b(JSON.stringify(a))}catch(g){window.console.error("Couldn't convert value into a JSON string: ",a),b(g)}}function l(a,b,c){var d=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var e=new n(function(c,e){d.ready().then(function(){void 0===b&&(b=null);var f=b;k(b,function(b,g){if(g)e(g);else{try{var h=d._dbInfo;o.setItem(h.keyPrefix+a,b)}catch(i){("QuotaExceededError"===i.name||"NS_ERROR_DOM_QUOTA_REACHED"===i.name)&&e(i)}c(f)}})})["catch"](e)});return m(e,c),e}function m(a,b){b&&a.then(function(a){b(null,a)},function(a){b(a)})}var n="undefined"!=typeof module&&module.exports?require("promise"):this.Promise,o=null;try{if(!(this.localStorage&&"setItem"in this.localStorage))return;o=this.localStorage}catch(p){return}var q="__lfsc__:",r=q.length,s="arbf",t="blob",u="si08",v="ui08",w="uic8",x="si16",y="si32",z="ur16",A="ui32",B="fl32",C="fl64",D=r+s.length,E={_driver:"localStorageWrapper",_initStorage:a,iterate:d,getItem:c,setItem:l,removeItem:h,clear:b,length:g,key:e,keys:f};"function"==typeof define&&define.amd?define("localStorageWrapper",function(){return E}):"undefined"!=typeof module&&module.exports?module.exports=E:this.localStorageWrapper=E}.call(window),function(){"use strict";function a(a){var b=this,c={db:null};if(a)for(var d in a)c[d]="string"!=typeof a[d]?a[d].toString():a[d];return new o(function(d,e){try{c.db=p(c.name,String(c.version),c.description,c.size)}catch(f){return b.setDriver("localStorageWrapper").then(function(){return b._initStorage(a)}).then(d)["catch"](e)}c.db.transaction(function(a){a.executeSql("CREATE TABLE IF NOT EXISTS "+c.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],function(){b._dbInfo=c,d()},function(a,b){e(b)})})})}function b(a,b){var c=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var d=new o(function(b,d){c.ready().then(function(){var e=c._dbInfo;e.db.transaction(function(c){c.executeSql("SELECT * FROM "+e.storeName+" WHERE key = ? LIMIT 1",[a],function(a,c){var d=c.rows.length?c.rows.item(0).value:null;d&&(d=k(d)),b(d)},function(a,b){d(b)})})})["catch"](d)});return m(d,b),d}function c(a,b){var c=this,d=new o(function(b,d){c.ready().then(function(){var e=c._dbInfo;e.db.transaction(function(c){c.executeSql("SELECT * FROM "+e.storeName,[],function(c,d){for(var e=d.rows,f=e.length,g=0;f>g;g++){var h=e.item(g),i=h.value;if(i&&(i=k(i)),i=a(i,h.key),void 0!==i)return void b(i)}b()},function(a,b){d(b)})})})["catch"](d)});return m(d,b),d}function d(a,b,c){var d=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var e=new o(function(c,e){d.ready().then(function(){void 0===b&&(b=null);var f=b;l(b,function(b,g){if(g)e(g);else{var h=d._dbInfo;h.db.transaction(function(d){d.executeSql("INSERT OR REPLACE INTO "+h.storeName+" (key, value) VALUES (?, ?)",[a,b],function(){c(f)},function(a,b){e(b)})},function(a){a.code===a.QUOTA_ERR&&e(a)})}})})["catch"](e)});return m(e,c),e}function e(a,b){var c=this;"string"!=typeof a&&(window.console.warn(a+" used as a key, but it is not a string."),a=String(a));var d=new o(function(b,d){c.ready().then(function(){var e=c._dbInfo;e.db.transaction(function(c){c.executeSql("DELETE FROM "+e.storeName+" WHERE key = ?",[a],function(){b()},function(a,b){d(b)})})})["catch"](d)});return m(d,b),d}function f(a){var b=this,c=new o(function(a,c){b.ready().then(function(){var d=b._dbInfo;d.db.transaction(function(b){b.executeSql("DELETE FROM "+d.storeName,[],function(){a()},function(a,b){c(b)})})})["catch"](c)});return m(c,a),c}function g(a){var b=this,c=new o(function(a,c){b.ready().then(function(){var d=b._dbInfo;d.db.transaction(function(b){b.executeSql("SELECT COUNT(key) as c FROM "+d.storeName,[],function(b,c){var d=c.rows.item(0).c;a(d)},function(a,b){c(b)})})})["catch"](c)});return m(c,a),c}function h(a,b){var c=this,d=new o(function(b,d){c.ready().then(function(){var e=c._dbInfo;e.db.transaction(function(c){c.executeSql("SELECT key FROM "+e.storeName+" WHERE id = ? LIMIT 1",[a+1],function(a,c){var d=c.rows.length?c.rows.item(0).key:null;b(d)},function(a,b){d(b)})})})["catch"](d)});return m(d,b),d}function i(a){var b=this,c=new o(function(a,c){b.ready().then(function(){var d=b._dbInfo;d.db.transaction(function(b){b.executeSql("SELECT key FROM "+d.storeName,[],function(b,c){for(var d=[],e=0;e<c.rows.length;e++)d.push(c.rows.item(e).key);a(d)},function(a,b){c(b)})})})["catch"](c)});return m(c,a),c}function j(a){var b,c=new Uint8Array(a),d="";for(b=0;b<c.length;b+=3)d+=n[c[b]>>2],d+=n[(3&c[b])<<4|c[b+1]>>4],d+=n[(15&c[b+1])<<2|c[b+2]>>6],d+=n[63&c[b+2]];return c.length%3===2?d=d.substring(0,d.length-1)+"=":c.length%3===1&&(d=d.substring(0,d.length-2)+"=="),d}function k(a){if(a.substring(0,r)!==q)return JSON.parse(a);var b,c,d,e,f,g=a.substring(D),h=a.substring(r,D),i=.75*g.length,j=g.length,k=0;"="===g[g.length-1]&&(i--,"="===g[g.length-2]&&i--);var l=new ArrayBuffer(i),m=new Uint8Array(l);for(b=0;j>b;b+=4)c=n.indexOf(g[b]),d=n.indexOf(g[b+1]),e=n.indexOf(g[b+2]),f=n.indexOf(g[b+3]),m[k++]=c<<2|d>>4,m[k++]=(15&d)<<4|e>>2,m[k++]=(3&e)<<6|63&f;switch(h){case s:return l;case t:return new Blob([l]);case u:return new Int8Array(l);case v:return new Uint8Array(l);case w:return new Uint8ClampedArray(l);case x:return new Int16Array(l);case z:return new Uint16Array(l);case y:return new Int32Array(l);case A:return new Uint32Array(l);case B:return new Float32Array(l);case C:return new Float64Array(l);default:throw new Error("Unkown type: "+h)}}function l(a,b){var c="";if(a&&(c=a.toString()),a&&("[object ArrayBuffer]"===a.toString()||a.buffer&&"[object ArrayBuffer]"===a.buffer.toString())){var d,e=q;a instanceof ArrayBuffer?(d=a,e+=s):(d=a.buffer,"[object Int8Array]"===c?e+=u:"[object Uint8Array]"===c?e+=v:"[object Uint8ClampedArray]"===c?e+=w:"[object Int16Array]"===c?e+=x:"[object Uint16Array]"===c?e+=z:"[object Int32Array]"===c?e+=y:"[object Uint32Array]"===c?e+=A:"[object Float32Array]"===c?e+=B:"[object Float64Array]"===c?e+=C:b(new Error("Failed to get type for BinaryArray"))),b(e+j(d))}else if("[object Blob]"===c){var f=new FileReader;f.onload=function(){var a=j(this.result);b(q+t+a)},f.readAsArrayBuffer(a)}else try{b(JSON.stringify(a))}catch(g){window.console.error("Couldn't convert value into a JSON string: ",a),b(null,g)}}function m(a,b){b&&a.then(function(a){b(null,a)},function(a){b(a)})}var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o="undefined"!=typeof module&&module.exports?require("promise"):this.Promise,p=this.openDatabase,q="__lfsc__:",r=q.length,s="arbf",t="blob",u="si08",v="ui08",w="uic8",x="si16",y="si32",z="ur16",A="ui32",B="fl32",C="fl64",D=r+s.length;if(p){var E={_driver:"webSQLStorage",_initStorage:a,iterate:c,getItem:b,setItem:d,removeItem:e,clear:f,length:g,key:h,keys:i};"function"==typeof define&&define.amd?define("webSQLStorage",function(){return E}):"undefined"!=typeof module&&module.exports?module.exports=E:this.webSQLStorage=E}}.call(window),function(){"use strict";function a(a,b){a[b]=function(){var c=arguments;return a.ready().then(function(){return a[b].apply(a,c)})}}function b(){for(var a=1;a<arguments.length;a++){var b=arguments[a];if(b)for(var c in b)b.hasOwnProperty(c)&&(arguments[0][c]=n(b[c])?b[c].slice():b[c])}return arguments[0]}function c(a){for(var b in g)if(g.hasOwnProperty(b)&&g[b]===a)return!0;return!1}function d(c){this._config=b({},k,c),this._driverSet=null,this._ready=!1,this._dbInfo=null;for(var d=0;d<i.length;d++)a(this,i[d]);this.setDriver(this._config.driver)}var e="undefined"!=typeof module&&module.exports?require("promise"):this.Promise,f={},g={INDEXEDDB:"asyncStorage",LOCALSTORAGE:"localStorageWrapper",WEBSQL:"webSQLStorage"},h=[g.INDEXEDDB,g.WEBSQL,g.LOCALSTORAGE],i=["clear","getItem","iterate","key","keys","length","removeItem","setItem"],j={DEFINE:1,EXPORT:2,WINDOW:3},k={description:"",driver:h.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1},l=j.WINDOW;"function"==typeof define&&define.amd?l=j.DEFINE:"undefined"!=typeof module&&module.exports&&(l=j.EXPORT);var m=function(a){var b=b||a.indexedDB||a.webkitIndexedDB||a.mozIndexedDB||a.OIndexedDB||a.msIndexedDB,c={};return c[g.WEBSQL]=!!a.openDatabase,c[g.INDEXEDDB]=!!function(){if("undefined"!=typeof a.openDatabase&&a.navigator&&a.navigator.userAgent&&/Safari/.test(a.navigator.userAgent)&&!/Chrome/.test(a.navigator.userAgent))return!1;try{return b&&"function"==typeof b.open&&"undefined"!=typeof a.IDBKeyRange}catch(c){return!1}}(),c[g.LOCALSTORAGE]=!!function(){try{return a.localStorage&&"setItem"in a.localStorage&&a.localStorage.setItem}catch(b){return!1}}(),c}(this),n=Array.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)},o=this;d.prototype.INDEXEDDB=g.INDEXEDDB,d.prototype.LOCALSTORAGE=g.LOCALSTORAGE,d.prototype.WEBSQL=g.WEBSQL,d.prototype.config=function(a){if("object"==typeof a){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var b in a)"storeName"===b&&(a[b]=a[b].replace(/\W/g,"_")),this._config[b]=a[b];return"driver"in a&&a.driver&&this.setDriver(this._config.driver),!0}return"string"==typeof a?this._config[a]:this._config},d.prototype.defineDriver=function(a,b,d){var g=new e(function(b,d){try{var g=a._driver,h=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver"),j=new Error("Custom driver name already in use: "+a._driver);if(!a._driver)return void d(h);if(c(a._driver))return void d(j);for(var k=i.concat("_initStorage"),l=0;l<k.length;l++){var n=k[l];if(!n||!a[n]||"function"!=typeof a[n])return void d(h)}var o=e.resolve(!0);"_support"in a&&(o=a._support&&"function"==typeof a._support?a._support():e.resolve(!!a._support)),o.then(function(c){m[g]=c,f[g]=a,b()},d)}catch(p){d(p)}});return g.then(b,d),g},d.prototype.driver=function(){return this._driver||null},d.prototype.ready=function(a){var b=this,c=new e(function(a,c){b._driverSet.then(function(){null===b._ready&&(b._ready=b._initStorage(b._config)),b._ready.then(a,c)})["catch"](c)});return c.then(a,a),c},d.prototype.setDriver=function(a,b,d){function g(){h._config.driver=h.driver()}var h=this;return"string"==typeof a&&(a=[a]),this._driverSet=new e(function(b,d){var g=h._getFirstSupportedDriver(a),i=new Error("No available storage method found.");if(!g)return h._driverSet=e.reject(i),void d(i);if(h._dbInfo=null,h._ready=null,c(g)){if(l===j.DEFINE)return void require([g],function(a){h._extend(a),b()});if(l===j.EXPORT){var k;switch(g){case h.INDEXEDDB:k=require("./drivers/indexeddb");break;case h.LOCALSTORAGE:k=require("./drivers/localstorage");break;case h.WEBSQL:k=require("./drivers/websql")}h._extend(k)}else h._extend(o[g])}else{if(!f[g])return h._driverSet=e.reject(i),void d(i);h._extend(f[g])}b()}),this._driverSet.then(g,g),this._driverSet.then(b,d),this._driverSet},d.prototype.supports=function(a){return!!m[a]},d.prototype._extend=function(a){b(this,a)},d.prototype._getFirstSupportedDriver=function(a){if(a&&n(a))for(var b=0;b<a.length;b++){var c=a[b];if(this.supports(c))return c}return null},d.prototype.createInstance=function(a){return new d(a)};var p=new d;l===j.DEFINE?define("localforage",function(){return p}):l===j.EXPORT?module.exports=p:this.localforage=p}.call(window);
  
  /*@source colorpicker.min.js */
  
  /**!
   *
   * Color picker
   * Author: Stefan Petre www.eyecon.ro
   * 
   * Dual licensed under the MIT and GPL licenses
   * 
   */
  (function(c){var h=function(){var h=65,H={eventName:"click",onShow:function(){},onBeforeShow:function(){},onHide:function(){},onChange:function(){},onSubmit:function(){},color:"ff0000",livePreview:!0,flat:!1},k=function(a,b){var d=q(a);c(b).data("colorpicker").fields.eq(1).val(d.r).end().eq(2).val(d.g).end().eq(3).val(d.b).end()},r=function(a,b){c(b).data("colorpicker").fields.eq(4).val(a.h).end().eq(5).val(a.s).end().eq(6).val(a.b).end()},m=function(a,b){c(b).data("colorpicker").fields.eq(0).val(l(a)).end()},
  t=function(a,b){c(b).data("colorpicker").selector.css("backgroundColor","#"+l({h:a.h,s:100,b:100}));c(b).data("colorpicker").selectorIndic.css({left:parseInt(150*a.s/100,10),top:parseInt(150*(100-a.b)/100,10)})},u=function(a,b){c(b).data("colorpicker").hue.css("top",parseInt(150-150*a.h/360,10))},w=function(a,b){c(b).data("colorpicker").currentColor.css("backgroundColor","#"+l(a))},v=function(a,b){c(b).data("colorpicker").newColor.css("backgroundColor","#"+l(a))},I=function(a){a=a.charCode||a.keyCode||
  -1;if(a>h&&90>=a||32==a)return!1;!0===c(this).parent().parent().data("colorpicker").livePreview&&n.apply(this)},n=function(a){var b=c(this).parent().parent(),d;if(0<this.parentNode.className.indexOf("_hex")){d=b.data("colorpicker");var f=this.value,e=6-f.length;if(0<e){for(var g=[],h=0;h<e;h++)g.push("0");g.push(f);f=g.join("")}f=p(x(f));d.color=d=f}else 0<this.parentNode.className.indexOf("_hsb")?b.data("colorpicker").color=d=y({h:parseInt(b.data("colorpicker").fields.eq(4).val(),10),s:parseInt(b.data("colorpicker").fields.eq(5).val(),
  10),b:parseInt(b.data("colorpicker").fields.eq(6).val(),10)}):(d=b.data("colorpicker"),f=parseInt(b.data("colorpicker").fields.eq(1).val(),10),e=parseInt(b.data("colorpicker").fields.eq(2).val(),10),g=parseInt(b.data("colorpicker").fields.eq(3).val(),10),f={r:Math.min(255,Math.max(0,f)),g:Math.min(255,Math.max(0,e)),b:Math.min(255,Math.max(0,g))},d.color=d=p(f));a&&(k(d,b.get(0)),m(d,b.get(0)),r(d,b.get(0)));t(d,b.get(0));u(d,b.get(0));v(d,b.get(0));b.data("colorpicker").onChange.apply(b,[d,l(d),
  q(d)])},J=function(a){c(this).parent().parent().data("colorpicker").fields.parent().removeClass("colorpicker_focus")},K=function(){h=0<this.parentNode.className.indexOf("_hex")?70:65;c(this).parent().parent().data("colorpicker").fields.parent().removeClass("colorpicker_focus");c(this).parent().addClass("colorpicker_focus")},L=function(a){var b=c(this).parent().find("input").focus();a={el:c(this).parent().addClass("colorpicker_slider"),max:0<this.parentNode.className.indexOf("_hsb_h")?360:0<this.parentNode.className.indexOf("_hsb")?
  100:255,y:a.pageY,field:b,val:parseInt(b.val(),10),preview:c(this).parent().parent().data("colorpicker").livePreview};c(document).bind("mouseup",a,z);c(document).bind("mousemove",a,A)},A=function(a){a.data.field.val(Math.max(0,Math.min(a.data.max,parseInt(a.data.val+a.pageY-a.data.y,10))));a.data.preview&&n.apply(a.data.field.get(0),[!0]);return!1},z=function(a){n.apply(a.data.field.get(0),[!0]);a.data.el.removeClass("colorpicker_slider").find("input").focus();c(document).unbind("mouseup",z);c(document).unbind("mousemove",
  A);return!1},M=function(a){a={cal:c(this).parent(),y:c(this).offset().top};a.preview=a.cal.data("colorpicker").livePreview;c(document).bind("mouseup",a,B);c(document).bind("mousemove",a,C)},C=function(a){n.apply(a.data.cal.data("colorpicker").fields.eq(4).val(parseInt(360*(150-Math.max(0,Math.min(150,a.pageY-a.data.y)))/150,10)).get(0),[a.data.preview]);return!1},B=function(a){k(a.data.cal.data("colorpicker").color,a.data.cal.get(0));m(a.data.cal.data("colorpicker").color,a.data.cal.get(0));c(document).unbind("mouseup",
  B);c(document).unbind("mousemove",C);return!1},N=function(a){a={cal:c(this).parent(),pos:c(this).offset()};a.preview=a.cal.data("colorpicker").livePreview;c(document).bind("mouseup",a,D);c(document).bind("mousemove",a,E)},E=function(a){n.apply(a.data.cal.data("colorpicker").fields.eq(6).val(parseInt(100*(150-Math.max(0,Math.min(150,a.pageY-a.data.pos.top)))/150,10)).end().eq(5).val(parseInt(100*Math.max(0,Math.min(150,a.pageX-a.data.pos.left))/150,10)).get(0),[a.data.preview]);return!1},D=function(a){k(a.data.cal.data("colorpicker").color,
  a.data.cal.get(0));m(a.data.cal.data("colorpicker").color,a.data.cal.get(0));c(document).unbind("mouseup",D);c(document).unbind("mousemove",E);return!1},O=function(a){c(this).addClass("colorpicker_focus")},P=function(a){c(this).removeClass("colorpicker_focus")},Q=function(a){a=c(this).parent();var b=a.data("colorpicker").color;a.data("colorpicker").origColor=b;w(b,a.get(0));a.data("colorpicker").onSubmit(b,l(b),q(b),a.data("colorpicker").el)},G=function(a){var b,d,f=c("#"+c(this).data("colorpickerId"));
  f.data("colorpicker").onBeforeShow.apply(this,[f.get(0)]);var e=c(this).offset(),g="CSS1Compat"==document.compatMode;a=window.pageXOffset||(g?document.documentElement.scrollLeft:document.body.scrollLeft);b=window.pageYOffset||(g?document.documentElement.scrollTop:document.body.scrollTop);d=window.innerWidth||(g?document.documentElement.clientWidth:document.body.clientWidth);var h=e.top+this.offsetHeight,e=e.left;h+176>b+(window.innerHeight||(g?document.documentElement.clientHeight:document.body.clientHeight))&&
  (h-=this.offsetHeight+176);e+356>a+d&&(e-=356);f.css({left:e+"px",top:h+"px"});0!=f.data("colorpicker").onShow.apply(this,[f.get(0)])&&f.show();c(document).bind("mousedown",{cal:f},F);return!1},F=function(a){R(a.data.cal.get(0),a.target,a.data.cal.get(0))||(0!=a.data.cal.data("colorpicker").onHide.apply(this,[a.data.cal.get(0)])&&a.data.cal.hide(),c(document).unbind("mousedown",F))},R=function(a,b,d){if(a==b)return!0;if(a.contains)return a.contains(b);if(a.compareDocumentPosition)return!!(a.compareDocumentPosition(b)&
  16);for(b=b.parentNode;b&&b!=d;){if(b==a)return!0;b=b.parentNode}return!1},y=function(a){return{h:Math.min(360,Math.max(0,a.h)),s:Math.min(100,Math.max(0,a.s)),b:Math.min(100,Math.max(0,a.b))}},x=function(a){a=parseInt(-1<a.indexOf("#")?a.substring(1):a,16);return{r:a>>16,g:(a&65280)>>8,b:a&255}},p=function(a){var b={h:0,s:0,b:0},d=Math.min(a.r,a.g,a.b),c=Math.max(a.r,a.g,a.b),d=c-d;b.b=c;b.s=0!=c?255*d/c:0;b.h=0!=b.s?a.r==c?(a.g-a.b)/d:a.g==c?2+(a.b-a.r)/d:4+(a.r-a.g)/d:-1;b.h*=60;0>b.h&&(b.h+=360);
  b.s*=100/255;b.b*=100/255;return b},q=function(a){var b,d,c;b=Math.round(a.h);var e=Math.round(255*a.s/100);a=Math.round(255*a.b/100);if(0==e)b=d=c=a;else{var e=(255-e)*a/255,g=b%60*(a-e)/60;360==b&&(b=0);60>b?(b=a,c=e,d=e+g):120>b?(d=a,c=e,b=a-g):180>b?(d=a,b=e,c=e+g):240>b?(c=a,b=e,d=a-g):300>b?(c=a,d=e,b=e+g):360>b?(b=a,d=e,c=a-g):c=d=b=0}return{r:Math.round(b),g:Math.round(d),b:Math.round(c)}},S=function(a){var b=[a.r.toString(16),a.g.toString(16),a.b.toString(16)];c.each(b,function(a,c){1==c.length&&
  (b[a]="0"+c)});return b.join("")},l=function(a){return S(q(a))},T=function(){var a=c(this).parent(),b=a.data("colorpicker").origColor;a.data("colorpicker").color=b;k(b,a.get(0));m(b,a.get(0));r(b,a.get(0));t(b,a.get(0));u(b,a.get(0));v(b,a.get(0))};return{init:function(a){a=c.extend({},H,a||{});if("string"==typeof a.color)a.color=p(x(a.color));else if(void 0!=a.color.r&&void 0!=a.color.g&&void 0!=a.color.b)a.color=p(a.color);else if(void 0!=a.color.h&&void 0!=a.color.s&&void 0!=a.color.b)a.color=
  y(a.color);else return this;return this.each(function(){if(!c(this).data("colorpickerId")){var b=c.extend({},a);b.origColor=a.color;var d="collorpicker_"+parseInt(1E3*Math.random());c(this).data("colorpickerId",d);d=c('<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>').attr("id",
  d);b.flat?d.appendTo(this).show():d.appendTo(document.body);b.fields=d.find("input").bind("keyup",I).bind("change",n).bind("blur",J).bind("focus",K);d.find("span").bind("mousedown",L).end().find(">div.colorpicker_current_color").bind("click",T);b.selector=d.find("div.colorpicker_color").bind("mousedown",N);b.selectorIndic=b.selector.find("div div");b.el=this;b.hue=d.find("div.colorpicker_hue div");d.find("div.colorpicker_hue").bind("mousedown",M);b.newColor=d.find("div.colorpicker_new_color");b.currentColor=
  d.find("div.colorpicker_current_color");d.data("colorpicker",b);d.find("div.colorpicker_submit").bind("mouseenter",O).bind("mouseleave",P).bind("click",Q);k(b.color,d.get(0));r(b.color,d.get(0));m(b.color,d.get(0));u(b.color,d.get(0));t(b.color,d.get(0));w(b.color,d.get(0));v(b.color,d.get(0));b.flat?d.css({position:"relative",display:"block"}):c(this).bind(b.eventName,G)}})},showPicker:function(){return this.each(function(){c(this).data("colorpickerId")&&G.apply(this)})},hidePicker:function(){return this.each(function(){c(this).data("colorpickerId")&&
  c("#"+c(this).data("colorpickerId")).hide()})},setColor:function(a){if("string"==typeof a)a=p(x(a));else if(void 0!=a.r&&void 0!=a.g&&void 0!=a.b)a=p(a);else if(void 0!=a.h&&void 0!=a.s&&void 0!=a.b)a=y(a);else return this;return this.each(function(){if(c(this).data("colorpickerId")){var b=c("#"+c(this).data("colorpickerId"));b.data("colorpicker").color=a;b.data("colorpicker").origColor=a;k(a,b.get(0));r(a,b.get(0));m(a,b.get(0));u(a,b.get(0));t(a,b.get(0));w(a,b.get(0));v(a,b.get(0))}})}}}();c.fn.extend({ColorPicker:h.init,
  ColorPickerHide:h.hidePicker,ColorPickerShow:h.showPicker,ColorPickerSetColor:h.setColor})})(jQuery);
  
  
  /*@source p0ne.auxiliaries.ls */
  /**
   * Auxiliary-functions for plug_p0ne
   *
   * @author jtbrinkmann aka. Brinkie Pie
   * @license MIT License
   * @copyright (c) 2015 J.-T. Brinkmann
  */
  console.log("~~~~~~~ p0ne.auxiliaries ~~~~~~~");
  out$.$window = $window = $(window);
  out$.$body = $body = $(document.body);
  out$.$app = $app = $('#app');
  /**/
  window.require = window.requirejs;
  window.define = window.requirejs.define;
  /*/ # no RequireJS fix
  (localforage) <- require <[ localforage ]>
  /**/
  out$.localforage = localforage;
  /*####################################
  #         PROTOTYPE FUNCTIONS        #
  ####################################*/
  tmp = function(property, value){
    if (this[property] !== value) {
      Object.defineProperty(this, property, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value
      });
    }
  };
  tmp.call(Object.prototype, 'define', tmp);
  Object.prototype.define('defineGetter', function(property, get){
    if (this[property] !== get) {
      Object.defineProperty(this, property, {
        enumerable: false,
        configurable: true,
        get: get
      });
    }
  });
  Object.prototype.define('hasAttribute', function(property){
    return property in this;
  });
  Array.prototype.define('remove', function(i){
    return this.splice(i, 1);
  });
  Array.prototype.define('removeItem', function(el){
    var i;
    if (-1 !== (i = this.indexOf(el))) {
      this.splice(i, 1);
    }
    return this;
  });
  Array.prototype.define('random', function(){
    return this[~~(Math.random() * this.length)];
  });
  Array.prototype.define('unique', function(){
    var res, l, i$, len$, i, el, isUnique, j$, o;
    res = [];
    l = 0;
    for (i$ = 0, len$ = this.length; i$ < len$; ++i$) {
      i = i$;
      el = this[i$];
      isUnique = true;
      for (j$ = 0; j$ < i; ++j$) {
        o = j$;
        if (this[o] === el) {
          isUnique = false;
          break;
        }
      }
      if (isUnique) {
        res[l++] = el;
      }
    }
    return res;
  });
  Array.prototype.define('joinWrapped', function(pre, post, between){
    var res, i$, to$, i;
    pre == null && (pre = '');
    post == null && (post = '');
    between == null && (between = '');
    if (this.length === 0) {
      return "";
    }
    res = pre + "" + this[0] + post;
    for (i$ = 1, to$ = this.length; i$ < to$; ++i$) {
      i = i$;
      res += between + "" + pre + this[i] + post;
    }
    return res;
  });
  String.prototype.define('reverse', function(){
    var res, i;
    res = "";
    i = this.length;
    while (i--) {
      res += this[i];
    }
    return res;
  });
  String.prototype.define('startsWith', function(str){
    var i;
    i = str.length;
    while (i > 0) {
      if (str[--i] !== this[i]) {
        return false;
      }
    }
    return true;
  });
  String.prototype.define('endsWith', function(str){
    var i, o;
    i = str.length;
    o = this.length - i;
    while (i > 0) {
      if (str[--i] !== this[o + i]) {
        return false;
      }
    }
    return true;
  });
  String.prototype.define('replaceSansHTML', function(rgx, rpl){
    return this.replace(/(.*?)(<(?:br>|.*?>.*?<\/\w+>|.*?\/>)|$)/gi, function(arg$, pre, post){
      return pre.replace(rgx, rpl) + "" + post;
    });
  });
  for (i$ = 0, len$ = (ref$ = [String, Array]).length; i$ < len$; ++i$) {
    Constr = ref$[i$];
    Constr.prototype.define('has', fn$);
    Constr.prototype.define('hasAny', fn1$);
  }
  Number.prototype.defineGetter('s', function(){
    return this * 1000;
  });
  Number.prototype.defineGetter('min', function(){
    return this * 60000;
  });
  Number.prototype.defineGetter('h', function(){
    return this * 3600000;
  });
  if (window.chrome) {
    Error.prototype.__defineGetter__('messageAndStack', function(){
      return this.stack;
    });
  } else {
    Error.prototype.__defineGetter__('messageAndStack', function(){
      return this.name + ": " + this.message + "\n" + this.stack;
    });
  }
  importAll$(jQuery.fn, {
    indexOf: function(selector){
      /* selector may be a String jQuery Selector or an HTMLElement */
      var i, i$, len$, el;
      if (this.length && !(selector instanceof HTMLElement)) {
        i = [].indexOf.call(this, selector);
        if (i !== -1) {
          return i;
        }
      }
      for (i$ = 0, len$ = this.length; i$ < len$; ++i$) {
        i = i$;
        el = this[i$];
        if (jQuery(el).is(selector)) {
          return i;
        }
      }
      return -1;
    },
    concat: function(arr2){
      var l, i$, len$, i, el;
      l = this.length;
      if (!arr2 || !arr2.length) {
        return this;
      }
      if (!l) {
        return arr2;
      }
      for (i$ = 0, len$ = arr2.length; i$ < len$; ++i$) {
        i = i$;
        el = arr2[i$];
        this[i + l] = el;
      }
      this.length += arr2.length;
      return this;
    },
    fixSize: function(){
      var i$, len$, el;
      for (i$ = 0, len$ = this.length; i$ < len$; ++i$) {
        el = this[i$];
        el.style.width = el.width + "px";
        el.style.height = el.height + "px";
      }
      return this;
    },
    loadAll: function(cb){
      var remaining;
      remaining = this.length;
      if (!cb || !remaining) {
        _.defer(cb());
      } else {
        this.load(function(){
          if (--remaining === 0) {
            cb();
          }
        });
      }
      return this;
    },
    p0neFx: function(effect){
      var this$ = this;
      if (this.length) {
        this.removeClass("p0ne-fx-off-" + effect);
        this.addClass("p0ne-fx-" + effect);
        requestAnimationFrame(function(){
          this$.removeClass("p0ne-fx-" + effect);
          this$.addClass("p0ne-fx-off-" + effect);
        });
      }
      return this;
    }
    /*binaryGuess: (checkFn) !->
        # returns element with index `n` for which:
        # if checkFn(element) for all elements in this from 0 to `n` all returns false,
        # and for all elements in this from `n` to the last one returns true
        # returns an empty jQuery object if there is no matching `n`
        # (i.e. checkFn(element) returns false for all elements, or this object is empty)
        # example use case: find the first item that is visible in a scrollable list
    
        step = @length
        if step == 0 or not checkFn @[step-1], step, @[step-1] # test this.length and last element
            return $!
        else if checkFn.call @0, 0, @0 # test first element
            return @first!
    
        i = @length - 1
        goingUp = true
        do
            step = ~~(step / 2)
            if checkFn.call @[i], i, @[i]
                goingUp = false
                i = Math.floor(i - step)
            else
                goingUp = true
                i = Math.ceil(i + step)
                console.log "going up to #i (#step)"
        while step > 0
        i++ if goingUp
        return @eq i*/
  });
  importAll$($.easing, {
    easeInQuad: function(p){
      return p * p;
    },
    easeOutQuad: function(p){
      return 1 - (1 - p) * (1 - p);
    }
  });
  /*####################################
  #            DATA MANAGER            #
  ####################################*/
  if (window.chrome) {
    window.compress = LZString.compress, window.decompress = LZString.decompress;
  } else {
    window.compress = LZString.compressToUTF16, window.decompress = LZString.decompressFromUTF16;
  }
  window.dataLoad = function(name, defaultVal, callback){
    defaultVal == null && (defaultVal = {});
    if (p0ne.autosave[name]) {
      p0ne.autosave_num[name]++;
      return callback(null, p0ne.autosave[name]);
    }
    p0ne.autosave_num[name] = 0;
    localforage.getItem(name, function(err, data){
      var warning, errorCode, name_;
      if (err) {
        warning = "failed to load '" + name + "' from localforage";
        errorCode = 'localforage';
      } else if (data) {
        p0ne.autosave[name] = data;
        return callback(err, data);
        /*
        if decompress(data)
            try
                p0ne.autosave[name]=JSON.parse(that)
                return callback err, p0ne.autosave[name]
            catch err
                warning = "failed to parse '#name' as JSON"
                errorCode = \JSON
        else
            warning = "failed to decompress '#name' data"
            errorCode = \decompress
        */
      } else {
        p0ne.autosave[name] = defaultVal;
        return callback(err, defaultVal);
      }
      name_ = name + "_" + getISOTime();
      console.warn(getTime() + " [dataLoad] " + warning + ", it seems to be corrupted! making a backup to '" + name_ + "' and continuing with default value", err);
      localforage.setItem(name_, data);
      p0ne.autosave[name] = defaultVal;
      callback(new TypeError("data corrupted (" + errorCode + ")"), defaultVal);
    });
  };
  window.dataLoadAll = function(defaults, callback){
    /*defaults is to be in the format `{name: defaultVal, name2: defaultVal2, …}` where `name` is the name of the data to load */
    var remaining, name, errors, hasError, res, i$;
    remaining = 0;
    for (name in defaults) {
      remaining++;
    }
    if (remaining === 0) {
      callback(null, {});
    } else {
      errors = {};
      hasError = false;
      res = {};
      for (i$ in defaults) {
        (fn$.call(this, i$, defaults[i$]));
      }
    }
    function fn$(name, defaultVal){
      dataLoad(name, defaultVal, function(err, data){
        if (err) {
          hasError = true;
          errors[name] = err;
        }
        res[name] = data;
        if (--remaining === 0) {
          if (!hasError) {
            errors = null;
          }
          callback(errors, res);
        }
      });
    }
  };
  window.dataUnload = function(name){
    if (p0ne.autosave_num[name]) {
      p0ne.autosave_num[name]--;
    }
    if (p0ne.autosave_num[name] === 0) {
      delete p0ne.autosave[name];
    }
  };
  if (window.dataSave) {
    $window.off('beforeunload', window.dataSave);
  }
  window.dataSave = function(){
    var err, k, ref$, v, _, e;
    err = "";
    for (k in ref$ = p0ne.autosave) {
      v = ref$[k];
      if (v) {
        for (_ in v) {
          try {
            localforage.setItem(k, v);
          } catch (e$) {
            e = e$;
            err += "failed to store '" + k + "' to localStorage\n";
          }
          break;
        }
      }
    }
    if (err) {
      alert(err);
    } else {
      console.log("[Data Manager] saved data");
    }
  };
  $window.on('beforeunload', dataSave);
  dataSave.interval = setInterval(dataSave, 15 .min);
  /*####################################
  #            DATA EMITTER            #
  ####################################*/
  out$.DataEmitter = DataEmitter = (function(superclass){
    var prototype = extend$((import$(DataEmitter, superclass).displayName = 'DataEmitter', DataEmitter), superclass).prototype, constructor = DataEmitter;
    function DataEmitter(_name){
      this._name = _name;
    }
    prototype._name = 'unnamed DataEmitter';
    prototype.set = function(newData){
      if (this._data !== newData) {
        this._data = newData;
        this.trigger('data', this._data);
      }
      return this;
    };
    prototype.clear = function(){
      delete this._data;
      this.trigger('cleared');
      return this;
    };
    prototype.on = function(type, fn, context){
      var e;
      superclass.prototype.on.apply(this, arguments);
      if (this._data && (type === 'data' || type === 'all')) {
        try {
          fn.call(context || this, this._data);
        } catch (e$) {
          e = e$;
          console.error("[" + this._name + "] Error while triggering " + type + " [" + (this._listeners[type].length - 1) + "]", this, args, e.messageAndStack);
        }
      }
      return this;
    };
    prototype.data = function(fn, context){
      return this.on('data', fn, context);
    };
    prototype.cleared = function(fn, context){
      return this.on('cleared', fn, context);
    };
    return DataEmitter;
  }({
    prototype: Backbone.Events
  }));
  /*####################################
  #         GENERAL AUXILIARIES        #
  ####################################*/
  $dummy = $('<a>');
  importAll$(window, {
    YT_REGEX: /https?:\/\/(?:www\.)?(?:youtube(?:-nocookie)?\.com\/(?:[^\/]+\/.+\/|(?:v|embed|e)\/|.*(?:\?|&amp;)v=)|youtu\.be\/)([^"&?\/<>\s]{11})(?:&.*?|#.*?|)$/i,
    repeat: function(timeout, fn){
      return setInterval(function(){
        if (!disabled) {
          fn.apply(this, arguments);
        }
      }, timeout);
    },
    sleep: function(timeout, fn){
      return setTimeout(fn, timeout);
    },
    throttle: function(timeout, fn){
      return _.throttle(fn, timeout);
    },
    pad: function(num, digits){
      var a, b;
      if (digits) {
        if (!isFinite(num)) {
          return num + "";
        }
        a = ~~num;
        b = (num - a) + "";
        num = a + "";
        while (num.length < digits) {
          num = "0" + num;
        }
        return num + "" + b.substr(1);
      } else {
        return 0 <= num && num < 10
          ? "0" + num
          : num + "";
      }
    },
    padHex: function(str, digits){
      digits == null && (digits = 2);
      while (str.length < digits) {
        str = "0" + str;
      }
      return str;
    },
    generateID: function(){
      return (~~(Math.random() * 0xFFFFFF)).toString(16).toUpperCase();
    },
    naturalSorter: function(){
      var regexp;
      regexp = /(\.\d+)|(\d+(\.\d+)?)|([^\d.]+)|(\.\D+)|(\.$)/g;
      return function(as, bs){
        var i, a, b, i$, to$, a1, b1, n;
        i = 0;
        if (as === bs) {
          return 0;
        }
        a = as.toLowerCase().match(regexp);
        b = bs.toLowerCase().match(regexp);
        for (i$ = 0, to$ = a.length; i$ < to$; ++i$) {
          i = i$;
          if (!b[i]) {
            return +1;
          }
          a1 = a[i];
          b1 = b[i++];
          if (a1 !== b1) {
            n = a1 - b1;
            return isNaN(n) ? a1 > b1
              ? +1
              : -1 : n;
          }
        }
        return b[i] ? -1 : 0;
      };
    }(),
    getUser: function(user){
      var that, userList, i$, len$, u;
      if (!user) {
        return;
      }
      if (typeof user === 'object') {
        if (that = user.id && getUser(user.id)) {
          return that;
        }
        if (user.username) {
          return user;
        } else if (user.attributes && user.toJSON) {
          return user.toJSON();
        } else if (that = user.username || user.dj || user.user || user.uid) {
          return getUser(that);
        }
        return null;
      }
      userList = API.getUsers();
      if (+user) {
        if (that = typeof users != 'undefined' && users !== null ? typeof users.get == 'function' ? users.get(user) : void 8 : void 8) {
          return that.toJSON();
        } else {
          for (i$ = 0, len$ = userList.length; i$ < len$; ++i$) {
            u = userList[i$];
            if (u.id === user) {
              return u;
            }
          }
        }
      } else if (typeof user === 'string') {
        for (i$ = 0, len$ = userList.length; i$ < len$; ++i$) {
          u = userList[i$];
          if (u.username === user) {
            return u;
          }
        }
        user = user.toLowerCase();
        for (i$ = 0, len$ = userList.length; i$ < len$; ++i$) {
          u = userList[i$];
          if (u.username.toLowerCase() === user || u.rawun.toLowerCase() === user) {
            return u;
          }
        }
      } else {
        console.warn("unknown user format", user);
      }
    },
    getUserInternal: function(user){
      var that, i$, ref$, len$, u;
      if (!user || !users) {
        return;
      }
      if (typeof user === 'object') {
        if (that = user.id && getUserInternal(user.id)) {
          return that;
        }
        if (user.attributes) {
          return user;
        } else if (that = user.username || user.dj || user.user || user.id) {
          return getUserInternal(that);
        }
        return null;
      }
      if (+user) {
        return users.get(user);
      } else if (typeof user === 'string') {
        for (i$ = 0, len$ = (ref$ = users.models).length; i$ < len$; ++i$) {
          u = ref$[i$];
          if (u.get('username') === user) {
            return u;
          }
        }
        user = user.toLowerCase();
        for (i$ = 0, len$ = (ref$ = users.models).length; i$ < len$; ++i$) {
          u = ref$[i$];
          if (u.get('username').toLowerCase() === user || u.get('rawun').toLowerCase() === user) {
            return u;
          }
        }
      } else {
        console.warn("unknown user format", user);
      }
    },
    logger: function(loggerName, fn){
      if (typeof fn === 'function') {
        return function(){
          console.log("[" + loggerName + "]", arguments);
          return fn.apply(this, arguments);
        };
      } else {
        return function(){
          console.log("[" + loggerName + "]", arguments);
        };
      }
    },
    replace: function(context, attribute, cb){
      var key$;
      context[key$ = attribute + "_"] || (context[key$] = context[attribute]);
      context[attribute] = cb(context[attribute + "_"]);
    },
    loadScript: function(loadedEvent, data, file, callback){
      var d;
      d = $.Deferred();
      if (callback) {
        d.then(callback);
      }
      if (data) {
        d.resolve();
      } else {
        $.getScript(p0ne.host + "/" + file);
        $(window).one(loadedEvent, d.resolve);
      }
      return d.promise();
    },
    requireHelper: function(name, test, arg$){
      var ref$, id, onfail, fallback, module, res;
      ref$ = arg$ != null ? arg$ : 0, id = ref$.id, onfail = ref$.onfail, fallback = ref$.fallback;
      if ((module = window[name] || require.s.contexts._.defined[id]) && test(module)) {
        id = module.requireID;
        res = module;
      } else if ((id = requireIDs[name]) && (module = require.s.contexts._.defined[id]) && test(module)) {
        res = module;
      } else {
        for (id in ref$ = require.s.contexts._.defined) {
          module = ref$[id];
          if (module && test(module, id)) {
            console.warn("[requireHelper] module '" + name + "' updated to ID '" + id + "'");
            requireIDs[name] = id;
            res = module;
            break;
          }
        }
      }
      if (res) {
        res.requireID = id;
        if (name) {
          window[name] = res;
        }
        return res;
      } else {
        console.error("[requireHelper] could not require '" + name + "'");
        if (typeof onfail == 'function') {
          onfail();
        }
        if (name) {
          window[name] = fallback;
        }
        return fallback;
      }
    },
    requireAll: function(test){
      var id, m;
      return (function(){
        var ref$, results$ = [];
        for (id in ref$ = require.s.contexts._.defined) {
          m = ref$[id];
          if (m && test(m, id)) {
            results$.push(m);
          }
        }
        return results$;
      }());
    }
    /* callback gets called with the arguments cb(errorCode, response, event) */,
    floodAPI_counter: 0,
    ajax: function(type, url, data, cb){
      var ref$, success, error, fail, silent, options, def, delay;
      if (typeof url !== 'string') {
        ref$ = [type, url, data], url = ref$[0], data = ref$[1], cb = ref$[2];
        type = (data != null ? data.type : void 8) || 'POST';
      }
      if (typeof data === 'function') {
        success = data;
        data = null;
      } else if (typeof cb === 'function') {
        success = cb;
      } else if (data && (data.success || data.error)) {
        success = data.success, error = data.error;
        delete data.success;
        delete data.error;
      } else if (typeof cb === 'object') {
        if (cb) {
          success = cb.success, fail = cb.fail;
        }
      }
      if (data) {
        silent = data.silent;
        delete data.type;
        delete data.silent;
      }
      options = {
        type: type,
        url: "https://plug.dj/_/" + url,
        success: function(arg$){
          var data;
          data = arg$.data;
          if (!silent) {
            console.info("[" + url + "]", data);
          }
          if (typeof success == 'function') {
            success(data);
          }
        },
        error: function(err){
          if (!silent) {
            console.error("[" + url + "]", data);
          }
          if (typeof error == 'function') {
            error(data);
          }
        }
      };
      data = JSON.stringify(data);
      if (data !== "{}" && (type !== 'GET' && type !== 'get')) {
        options.contentType = 'application/json';
        options.data = data;
      }
      def = $.Deferred();
      (delay = function(){
        var req;
        if (window.floodAPI_counter >= 15) {
          sleep(1000, delay);
        } else {
          window.floodAPI_counter++;
          sleep(15000, function(){
            window.floodAPI_counter--;
          });
          req = $.ajax(options).then(def.resolve, def.reject, def.progress);
          def.abort = req.abort;
        }
      })();
      return def;
    },
    befriend: function(userID, cb){
      ajax('POST', "friends", {
        id: userID
      }, cb);
    },
    ban: function(userID, cb){
      ajax('POST', "bans/add", {
        userID: userID,
        duration: API.BAN.HOUR,
        reason: 1
      }, cb);
    },
    banPerma: function(userID, cb){
      ajax('POST', "bans/add", {
        userID: userID,
        duration: API.BAN.PERMA,
        reason: 1
      }, cb);
    },
    unban: function(userID, cb){
      ajax('DELETE', "bans/" + userID, cb);
    },
    modMute: function(userID, cb){
      ajax('POST', "mutes/add", {
        userID: userID,
        duration: API.MUTE.SHORT,
        reason: 1
      }, cb);
    },
    modUnmute: function(userID, cb){
      ajax('DELETE', "mutes/" + userID, cb);
    },
    chatDelete: function(chatID, cb){
      ajax('DELETE', "chat/" + chatID, cb);
    },
    kick: function(userID, cb){
      var def;
      def = $.Deferred();
      ban(userID).then(function(){
        unban(userID, cb).then(def.resolve, def.reject);
      }).fail(def.reject);
    },
    addDJ: function(userID, cb){
      var i$, ref$, len$, yet$, u;
      for (yet$ = true, i$ = 0, len$ = (ref$ = API.getWaitList()).length; i$ < len$; ++i$) {
        u = ref$[i$];
        yet$ = false;
        if (u.id === userID) {
          cb('alreadyInWaitlist');
          return $.Deferred().resolve('alreadyInWaitlist');
        }
      } if (yet$) {
        return ajax('POST', "booth/add", {
          id: userID
        }, cb);
      }
    },
    moveDJ: function(userID, position, cb){
      var def;
      def = $.Deferred;
      addDJ(userID).then(function(){
        ajax('POST', "booth/move", {
          userID: userID,
          position: position
        }, cb).then(def.resolve, def.reject);
      }).fail(def.reject);
      return def.promise();
    },
    joinRoom: function(slug){
      return ajax('POST', 'rooms/join', {
        slug: slug
      });
    },
    getUserData: function(user, cb){
      if (typeof user !== 'number') {
        user = getUser(user);
      }
      return $.get("/_/users/" + user).then(function(arg){
        var data;
        data = arg.data, data = data[0];
        if (cb) {
          return data;
        } else {
          console.log("[userdata]", data, data.level >= 5 ? "https://plug.dj/@/" + encodeURI(data.slug) : void 8);
        }
      }).fail(function(){
        console.warn("couldn't get userdata for user with id '" + id + "'");
      });
    },
    $djButton: $('#dj-button'),
    mute: function(){
      return $('#volume .icon-volume-half, #volume .icon-volume-on').click().length;
    },
    muteonce: function(){
      mute();
      muteonce.last = API.getMedia().id;
      API.once('advance', function(){
        if (API.getMedia().id !== muteonce.last) {
          unmute();
        }
      });
    },
    unmute: function(){
      return $('#playback .snoozed .refresh, #volume .icon-volume-off, #volume .icon-volume-mute-once').click().length;
    },
    snooze: function(){
      return $('#playback .snooze').click().length;
    },
    isSnoozed: function(){
      return $('#playback-container').children().length === 0;
    },
    refresh: function(){
      return $('#playback .refresh').click().length;
    },
    stream: function(val){
      var res;
      if (!currentMedia) {
        console.error("[p0ne /stream] cannot change stream - failed to require() the module 'currentMedia'");
      } else {
        res = typeof database != 'undefined' && database !== null ? database.settings.streamDisabled = val !== true && (val === false || currentMedia.get('streamDisabled')) : void 8;
        refresh();
        return res;
      }
    },
    join: function(){
      if ($djButton.hasClass('is-wait')) {
        $djButton.click();
        return true;
      } else {
        return false;
      }
    },
    forceJoin: function(){
      ajax('POST', 'booth');
    },
    leave: function(){
      return $('#dj-button.is-leave').click().length !== 0;
    },
    $wootBtn: $('#woot'),
    woot: function(){
      $wootBtn.click();
    },
    $mehBtn: $('#meh'),
    meh: function(){
      $mehBtn.click();
    },
    ytItags: function(){
      var resolutions, list, ytItags, i$, len$, format, j$, ref$, len1$, i, itags, startI, k$, ref1$, len2$, itag;
      resolutions = [72, 144, 240, 360, 480, 720, 1080, 1440, 2160, 2304, 3072, 4320];
      list = [
        {
          ext: 'flv',
          minRes: 240,
          itags: ['5']
        }, {
          ext: '3gp',
          minRes: 144,
          itags: ['17', '36']
        }, {
          ext: 'mp4',
          minRes: 240,
          itags: ['83', '18,82', '_', '22,84', '85']
        }, {
          ext: 'webm',
          minRes: 360,
          itags: ['43,100']
        }, {
          ext: 'ts',
          minRes: 240,
          itags: ['151', '132,92', '93', '94', '95', '96']
        }
      ];
      ytItags = {};
      for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
        format = list[i$];
        for (j$ = 0, len1$ = (ref$ = format.itags).length; j$ < len1$; ++j$) {
          i = j$;
          itags = ref$[j$];
          if (itags !== '_') {
            startI = resolutions.indexOf(format.minRes);
            for (k$ = 0, len2$ = (ref1$ = itags.split(",")).length; k$ < len2$; ++k$) {
              itag = ref1$[k$];
              if (resolutions[startI + i] === 2304) {
                console.log(itag);
              }
              ytItags[itag] = {
                itag: itag,
                ext: format.ext,
                type: format.type || 'video',
                resolution: resolutions[startI + i]
              };
            }
          }
        }
      }
      return ytItags;
    }(),
    mediaSearch: function(query){
      $('#playlist-button .icon-playlist').click();
      $('#search-input-field').val(query).trigger({
        type: 'keyup',
        which: 13
      });
    },
    mediaParse: function(media, cb){
      /* work in progress */
      var cid, ref$, ref1$;
      cb || (cb = logger(typeof media === 'string'
        ? +media
          ? cb({
            format: 2,
            cid: media
          })
          : media.length === 11
            ? cb({
              format: 1,
              cid: media
            })
            : (cid = (ref$ = YT_REGEX.exec(media)) != null ? ref$[1] : void 8)
              ? cb({
                format: 1,
                cid: cid
              })
              : (ref1$ = parseURL(media).hostname) === 'soundcloud.com' || ref1$ === 'i1.sndcdn.com' ? $.getJSON("https://api.soundcloud.com/resolve/", {
                url: url,
                client_id: p0ne.SOUNDCLOUD_KEY.then(function(d){
                  cb({
                    format: 2,
                    cid: d.id,
                    data: d
                  });
                })
              }) : void 8
        : typeof media === 'object' && media
          ? media.toJSON
            ? cb(media.toJSON())
            : media.format ? cb(media) : void 8
          : !media ? cb(API.getMedia()) : void 8));
      cb();
    },
    mediaLookupCache: {},
    mediaLookup: function(songs, cb){
      var success, fail, def, isArray, res, l, duplicates, queries, i$, len$, i, media, format, cid, ref$, ref1$, remaining, ytCids_, packs, to$, id, ytCids;
      if (typeof cb === 'function') {
        success = cb;
      } else {
        if (typeof cb === 'object') {
          if (cb) {
            success = cb.success, fail = cb.fail;
          }
        }
        success || (success = function(data){
          console.info("[mediaLookup] " + ['yt', 'sc'][format - 1] + ":" + cid, data);
        });
      }
      fail || (fail = function(err){
        console.error("[mediaLookup] couldn't look up", cid, url, cb, err);
      });
      def = $.Deferred();
      def.then(success, fail);
      if (!(isArray = $.isArray(songs))) {
        songs = [songs];
      }
      res = [];
      l = 0;
      duplicates = {};
      queries = {
        1: {},
        2: {}
      };
      for (i$ = 0, len$ = songs.length; i$ < len$; ++i$) {
        i = i$;
        media = songs[i$];
        format = false;
        if (+media) {
          console.warn("[mediaLookup] warning, media only described by an ID, assuming SoundCloud ID. It is recommended to use {format: 2, cid: id} instead");
          format = 2;
          cid = +media;
        } else if (typeof media === 'string') {
          if (media.length === 11) {
            format = 1;
            cid = media;
          } else if (cid = (ref$ = YT_REGEX.exec(media)) != null ? ref$[1] : void 8) {
            format = 1;
          } else if (media.has('.com') && ((ref1$ = parseURL(media).hostname) === 'soundcloud.com' || ref1$ === 'i1.sndcdn.com')) {
            format = 2;
            cid = media;
          }
        } else if (typeof media === 'object' && media && media.cid) {
          if (media.format === 1 || media.format === 2) {
            format = media.format, cid = media.cid;
          }
        }
        if (!format) {
          console.warn("[mediaLookup] unknown format", media, "as #" + i + " in", songs);
          l++;
          continue;
        }
        if (cid in queries[format]) {
          console.log("[mediaLookup] " + format + " : " + cid + " appears multiple times in the same query");
          duplicates[l++] = queries[format][cid];
        } else if (window.mediaLookupCache[cid]) {
          res[l] = window.mediaLookupCache[cid];
          clearTimeout(res[l]._timeoutID);
          res[l]._timeoutID = sleep(5 .min, fn$);
          l++;
        } else {
          queries[format][cid] = l++;
        }
      }
      remaining = 0;
      ytCids_ = Object.keys(queries[1]);
      if (ytCids_.length) {
        remaining += ytCids_.length;
        if (ytCids_.length > 50) {
          packs = [];
          for (i$ = 0, to$ = ~~(ytCids_.length / 50); i$ <= to$; ++i$) {
            i = i$;
            packs[i] = [];
          }
          for (i$ = 0, len$ = ytCids_.length; i$ < len$; ++i$) {
            i = i$;
            id = ytCids_[i$];
            packs[~~(i / 50)][i % 50] = id;
          }
        } else {
          packs = [ytCids_];
        }
        for (i$ = 0, len$ = packs.length; i$ < len$; ++i$) {
          ytCids = packs[i$];
          $.getJSON("https://www.googleapis.com/youtube/v3/videos?part=contentDetails,snippet&fields=items(id,contentDetails/duration,contentDetails/regionRestriction,snippet/channelId,snippet/channelTitle,snippet/description,snippet/publishedAt,snippet/title)&id=" + ytCids.join(',') + "&key=" + p0ne.YOUTUBE_V3_KEY).fail(fail).success(fn1$);
        }
      }
      for (i$ in ref1$ = queries[2]) {
        (fn2$.call(this, i$, ref1$[i$]));
      }
      doneLoading();
      function addResult(pos, cid, data){
        window.mediaLookupCache[cid] = data;
        res[pos] = data;
        return remaining--;
      }
      function doneLoading(){
        var k, ref$, v;
        if (remaining <= 0) {
          if (!isArray) {
            res = res[0];
          } else {
            for (k in ref$ = duplicates) {
              v = ref$[k];
              res[k] = res[v];
            }
          }
          return def.resolve(res);
        }
      }
      return def.promise();
      function fn$(){
        var ref$, ref1$;
        return ref1$ = (ref$ = window.mediaLookupCache)[cid], delete ref$[cid], ref1$;
      }
      function fn1$(arg$){
        var items, multiplicators, i$, len$, d, duration, that, j$, len1$, i, t, cid, ref$, l;
        items = arg$.items;
        multiplicators = [0, 31104000, 2592000, 604800, 86400, 3600, 60, 1];
        for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
          d = items[i$];
          duration = 0;
          if (that = /P(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)W)?(?:(\d+)D)?T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/.exec(d.contentDetails.duration)) {
            for (j$ = 0, len1$ = that.length; j$ < len1$; ++j$) {
              i = j$;
              t = that[j$];
              if (+t) {
                duration += t * multiplicators[i];
              }
            }
          }
          addResult(queries[1][d.id], d.id, {
            format: 1,
            data: d,
            cid: d.id,
            uploader: {
              name: d.snippet.channelTitle,
              id: d.snippet.channelId,
              url: "https://www.youtube.com/channel/" + d.snippet.channelId
            },
            image: "https://i.ytimg.com/vi/" + d.id + "/0.jpg",
            title: d.snippet.title,
            uploadDate: d.snippet.publishedAt,
            url: "https://youtube.com/watch?v=" + d.id,
            description: d.snippet.description,
            duration: duration,
            restriction: d.contentDetails.regionRestriction,
            _timeoutID: sleep(5 .min, fn$)
          });
        }
        for (cid in ref$ = queries[1]) {
          l = ref$[cid];
          if (!res[l]) {
            console.warn("[mediaLookup] failed to look up Youtube video #" + l, cid);
            addResult(l, cid, {
              _timeoutID: sleep(5 .min, fn1$)
            });
          }
        }
        doneLoading();
        function fn$(){
          var ref$, key$, ref1$;
          return ref1$ = (ref$ = window.mediaLookupCache)[key$ = d.id], delete ref$[key$], ref1$;
        }
        function fn1$(){
          var ref$, ref1$;
          return ref1$ = (ref$ = window.mediaLookupCache)[cid], delete ref$[cid], ref1$;
        }
      }
      function fn2$(cid, pos){
        var req;
        remaining++;
        if (+cid) {
          req = $.getJSON("https://api.soundcloud.com/tracks/" + cid + ".json", {
            client_id: p0ne.SOUNDCLOUD_KEY
          });
        } else {
          req = $.getJSON("https://api.soundcloud.com/resolve/", {
            url: cid,
            client_id: p0ne.SOUNDCLOUD_KEY
          });
        }
        req.fail(function(){
          console.warn("[mediaLookup] failed to look up soundcloud song", cid);
          addResult(pos, cid, {
            _timeoutID: sleep(5 .min, function(){
              var ref$, ref1$;
              return ref1$ = (ref$ = window.mediaLookupCache)[cid], delete ref$[cid], ref1$;
            })
          });
          return doneLoading();
        }).success(function(d){
          var data;
          addResult(pos, d.id, data = {
            format: 2,
            data: d,
            cid: d.id,
            uploader: {
              id: d.user.id,
              name: d.user.username,
              image: d.user.avatar_url,
              url: d.user.permalink_url
            },
            image: d.artwork_url,
            title: d.title,
            uploadDate: d.created_at,
            url: d.permalink_url,
            description: d.description,
            duration: d.duration / 1000,
            download: d.download_url ? d.download_url + "?client_id=" + p0ne.SOUNDCLOUD_KEY : false,
            downloadSize: d.original_content_size,
            downloadFormat: d.original_format
          });
          if (typeof cid === 'number') {
            data._timeoutID = sleep(5 .min, function(){
              var ref$, ref1$;
              return ref1$ = (ref$ = window.mediaLookupCache)[cid], delete ref$[cid], ref1$;
            });
          } else {
            window.mediaLookupCache[data.cid] = data;
            data._timeoutID = sleep(5 .min, function(){
              var ref$, ref1$;
              delete window.mediaLookupCache[data.cid];
              return ref1$ = (ref$ = window.mediaLookupCache)[cid], delete ref$[cid], ref1$;
            });
          }
          doneLoading();
        });
      }
    },
    mediaPreview: function(mediaObj){
      _$context.trigger(PreviewEvent.PREVIEW, new PreviewEvent(PreviewEvent.PREVIEW, new Backbone.Model(mediaObj)));
    },
    mediaDownload: function(){
      var regexNormal, regexUnblocked, i$, ref$, len$, key;
      regexNormal = {};
      regexUnblocked = {};
      for (i$ = 0, len$ = (ref$ = ['title', 'url_encoded_fmt_stream_map', 'fmt_list', 'dashmpd', 'errorcode', 'reason']).length; i$ < len$; ++i$) {
        key = ref$[i$];
        regexNormal[key] = RegExp(key + '=(.*?)(?:&|$)');
        regexUnblocked[key] = RegExp('"' + key + '":"(.*?)"');
      }
      for (i$ = 0, len$ = (ref$ = ['url', 'itag', 'type', 'fallback_host']).length; i$ < len$; ++i$) {
        key = ref$[i$];
        regexNormal[key] = RegExp(key + '=(.*?)(?:&|$)');
        regexUnblocked[key] = RegExp(key + '=(.*?)(?:\\\\u0026|$)');
      }
      return function(media, audioOnly, cb){
        /* status codes:
            = success = (resolved)
            0 - downloads found
        
            = error = (rejected)
            1 - failed to receive video info
            2 - video info loaded, but no downloads found (video likely blocked)
            3 - (for audioOnly) dash.mpd found, but no downloads (basically like 2)
        
            note: itags are Youtube's code describing the data format
                https://en.wikipedia.org/wiki/YouTube#Quality_and_formats
                (click [show] in "Comparison of YouTube media encoding options" to see the whole table)
         */
        var ref$, success, error, blocked, format, cid, id, res, ref1$, url;
        if (!media || typeof media === 'boolean' || typeof media === 'function' || media.success || media.error) {
          ref$ = [false, media, cb], media = ref$[0], audioOnly = ref$[1], cb = ref$[2];
        } else if (typeof audioOnly !== 'boolean') {
          cb = audioOnly;
          audioOnly = false;
        }
        if (typeof cb === 'function') {
          success = cb;
        } else if (cb) {
          success = cb.success, error = cb.error;
        }
        if (media != null && media.attributes) {
          blocked = media.blocked;
          media = media.attributes;
        } else if (!media) {
          media = API.getMedia();
          blocked = 0;
        } else {
          blocked = media.blocked;
        }
        format = media.format, cid = media.cid, id = media.id;
        media.blocked = blocked = +blocked || 0;
        if (format === 2) {
          audioOnly = true;
        }
        res = $.Deferred();
        res.then(function(data){
          data.blocked = blocked;
          if (audioOnly) {
            return media.downloadAudio = data;
          } else {
            return media.download = data;
          }
        }).fail(function(err, status){
          if (status) {
            err = {
              status: 1,
              message: "network error or request rejected"
            };
          }
          err.blocked = blocked;
          if (audioOnly) {
            return media.downloadAudioError = err;
          } else {
            return media.downloadError = err;
          }
        }).then(success || logger('mediaDownload')).fail(error || logger('mediaDownloadError'));
        if (audioOnly) {
          if (((ref$ = media.downloadAudio) != null ? ref$.blocked : void 8) === blocked) {
            return res.resolve(media.downloadAudio);
          }
          if (media.downloadAudioError) {
            return res.reject(media.downloadAudioError);
          }
        } else {
          if (media.download) {
            return res.resolve(media.download);
          }
          if (((ref1$ = media.downloadError) != null ? ref1$.blocked : void 8) === blocked) {
            return res.reject(media.downloadError);
          }
        }
        cid || (cid = id);
        if (format === 1) {
          if (blocked === 2) {
            url = p0ne.proxy("http://vimow.com/watch?v=" + cid);
          } else if (blocked) {
            url = p0ne.proxy("https://www.youtube.com/watch?v=" + cid);
          } else {
            url = p0ne.proxy("https://www.youtube.com/get_video_info?video_id=" + cid);
          }
          console.info("[mediaDownload] YT lookup", url);
          $.ajax({
            url: url,
            error: res.reject,
            success: function(d){
              var file, files, bestVideo, bestVideoSize, that, title, i$, ref$, len$, src, resolution, mimeType, ref1$, key$, video, get, basename, error, reason, fmt_list_, url, fallback_host, itag, format, fmt_list, j$, len1$, e, original_url;
              out$.d = d;
              file = d;
              files = {};
              bestVideo = null;
              bestVideoSize = 0;
              if (blocked === 2) {
                if (that = d.match(/<title>(.*?) - vimow<\/title>/)) {
                  title = htmlUnescape(that[1]);
                } else {
                  title = cid;
                }
                files = {};
                for (i$ = 0, len$ = (ref$ = d.match(/<source .*?>/g) || []).length; i$ < len$; ++i$) {
                  file = ref$[i$];
                  src = /src='(.*?)'/.exec(file);
                  resolution = /src='(.*?)'/.exec(file);
                  mimeType = /src='(\w+\/(\w+))'/.exec(file);
                  if (that = src && resolution && mimeType) {
                    (ref1$ = files[key$ = that[5]] || (files[key$] = []))[ref1$.length] = video = {
                      url: src[1],
                      resolution: resolution[1],
                      mimeType: mimeType[1],
                      file: "basename." + mimeType[2]
                    };
                    if (that[2] > bestVideoSize) {
                      bestVideo = video;
                      bestVideoSize = video.resolution;
                    }
                  }
                }
                if (bestVideo) {
                  files.preferredDownload = bestVideo;
                  files.status = 0;
                  console.log("[mediaDownload] resolving", files);
                  res.resolve(files);
                } else {
                  console.warn("[mediaDownload] vimow.com loaded, but no downloads found");
                  res.reject({
                    status: 2,
                    message: 'no downloads found'
                  });
                }
                return;
              } else if (blocked) {
                get = function(key){
                  var val;
                  val = (file || d).match(regexUnblocked[key]);
                  if (key === 'url' || key === 'itag' || key === 'type' || key === 'fallback_host') {
                    return decodeURIComponent(val[1]);
                  }
                  if (val) {
                    return val[1];
                  }
                };
                basename = get('title') || cid;
              } else {
                get = function(key, unescape){
                  var val;
                  val = file.match(regexNormal[key]);
                  if (val) {
                    if (unescape) {
                      val = val[1].replace(/\++/g, ' ');
                    }
                    return decodeURIComponent(val[1]);
                  }
                };
                basename = get('title', true) || cid;
                if (error = get('errorcode')) {
                  reason = get('reason', true);
                  switch (+error) {
                  case 150:
                    console.error("[mediaDownload] video_info error 150! Embedding not allowed on some websites");
                    break;
                  default:
                    console.error("[mediaDownload] video_info error " + error + "! unkown error code", reason);
                  }
                }
              }
              if (!audioOnly) {
                fmt_list_ = get('fmt_list');
                if (that = get('url_encoded_fmt_stream_map')) {
                  for (i$ = 0, len$ = (ref$ = that.split(",")).length; i$ < len$; ++i$) {
                    file = ref$[i$];
                    url = get('url');
                    if (that = file.match(/fallback_host=(.*?)(?:\\u0026|$)/)) {
                      fallback_host = unescape(that[1]);
                    }
                    itag = get('itag');
                    if (that = ytItags[itag]) {
                      format = that;
                    } else {
                      if (!fmt_list) {
                        fmt_list = {};
                        if (fmt_list_) {
                          for (j$ = 0, len1$ = (ref1$ = fmt_list_.split(',')).length; j$ < len1$; ++j$) {
                            e = ref1$[j$];
                            e = e.split('/');
                            fmt_list[e[0]] = e[1].split('x')[1];
                          }
                        } else {
                          console.warn("[mediaDownload] no fmt_list found");
                        }
                      }
                      if (that = fmt_list[itag] && get('type')) {
                        format = {
                          itag: itag,
                          type: that[1],
                          ext: that[2],
                          resolution: fmt_list[itag]
                        };
                        console.warn("[mediaDownload] unknown itag found, found in fmt_list", itag);
                      }
                    }
                    if (format) {
                      original_url = url;
                      url = url.replace(/^.*?googlevideo\.com/, "https://" + fallback_host);
                      (ref1$ = files[key$ = format.ext] || (files[key$] = []))[ref1$.length] = video = {
                        file: basename + "." + format.ext,
                        url: url,
                        original_url: original_url,
                        fallback_host: fallback_host,
                        mimeType: format.type + "/" + format.ext,
                        resolution: format.resolution,
                        itag: format.itag
                      };
                      if (format.resolution > bestVideoSize) {
                        bestVideo = video;
                        bestVideoSize = video.resolution;
                      }
                    } else {
                      console.warn("[mediaDownload] unknown itag found, not in fmt_list", itag);
                    }
                  }
                }
                if (bestVideo) {
                  files.preferredDownload = bestVideo;
                  files.status = 0;
                  console.log("[mediaDownload] resolving", files);
                  res.resolve(files);
                } else {
                  console.warn("[mediaDownload] no downloads found");
                  res.reject({
                    status: 2,
                    message: 'no downloads found'
                  });
                }
              } else {
                if (that = blocked && d.match(/"dashmpd":"(.*?)"/)) {
                  url = p0ne.proxy(that[1].replace(/\\\//g, '/'));
                } else if (that = d.match(/dashmpd=(http.+?)(?:&|$)/)) {
                  url = p0ne.proxy(unescape(that[1]));
                }
                if (url) {
                  console.info("[mediaDownload] DASHMPD lookup", url);
                  $.get(url).then(function(dashmpd){
                    var $dash, bestVideo;
                    out$.dashmpd = dashmpd;
                    $dash = jQuery(
                    $.parseXML(
                    dashmpd));
                    bestVideo = {
                      size: 0
                    };
                    $dash.find('AdaptationSet').each(function(){
                      var $set, mimeType, type, ext, l;
                      $set = $(this);
                      mimeType = $set.attr('mimeType');
                      type = mimeType.substr(0, 5);
                      if (type !== 'audio') {
                        return;
                      }
                      if (mimeType === 'audio/mp4') {
                        ext = 'm4a';
                      } else {
                        ext = mimeType.substr(6);
                      }
                      files[mimeType] = [];
                      l = 0;
                      $set.find('BaseURL').each(function(){
                        var $baseurl, $representation, m;
                        $baseurl = $(this);
                        $representation = $baseurl.parent();
                        files[mimeType][l++] = m = {
                          file: basename + "." + ext,
                          url: httpsify($baseurl.text()),
                          mimeType: mimeType,
                          size: $baseurl.attr('yt:contentLength') / 1000000,
                          samplingRate: $representation.attr('audioSamplingRate') + "Hz"
                        };
                        if (audioOnly && ~~m.size > ~~bestVideo.size && (window.chrome || mimeType !== 'audio/webm')) {
                          bestVideo = m;
                        }
                      });
                    });
                    if (bestVideo) {
                      files.preferredDownload = bestVideo;
                      files.status = 0;
                      console.log("[mediaDownload] resolving", files);
                      res.resolve(files);
                    } else {
                      console.warn("[mediaDownload] dash.mpd found, but no downloads");
                      res.reject({
                        status: 3,
                        message: 'dash.mpd found, but no downloads'
                      });
                    }
                    /*
                    html = ""
                    for mimeType, files of res
                        html += "<h3 class=AdaptationSet>#mimeType</h3>"
                        for f in files
                            html += "<a href='#{$baseurl.text!}' download='#file' class='download"
                            html += " preferred-download" if f.preferredDownload
                            html += "'>#file</a> (#size; #{f.samplingRate || f.resolution})<br>"
                    */
                  }).fail(res.reject);
                } else {
                  console.error("[mediaDownload] no download found");
                  res.reject("no download found");
                }
              }
            }
          });
        } else if (format === 2) {
          audioOnly = true;
          mediaLookup(media).then(function(d){
            var ref$;
            if (d.download) {
              res.resolve(media.downloadAudio = (ref$ = {}, ref$[d.downloadFormat] = {
                url: d.download,
                size: d.downloadSize
              }, ref$));
            } else {
              res.reject("download disabled");
            }
          }).fail(res.reject);
        } else {
          console.error("[mediaDownload] unknown format", media);
          res.reject("unknown format");
        }
        return res.promise();
      };
    }(),
    createPlaylist: function(name, media){
      if (!window.playlists) {
        throw new Error("createPlaylist(name, media) requires `window.playlists`");
      }
      ajax('POST', 'playlists', {
        name: name,
        media: media
      }).then(function(pl){
        playlists.push(new Backbone.Model(pl.data[0]));
        playlists.sort();
        console.log("added playlist " + name + " [" + pl.id + "]");
      }).fail(function(err){
        console.error("failed to add playlist " + name, err);
      });
    },
    proxify: function(url){
      if (typeof url.startsWith == 'function' && url.startsWith("http:")) {
        return p0ne.proxy(url);
      } else {
        return url;
      }
    },
    httpsify: function(url){
      if (typeof url.startsWith == 'function' && url.startsWith("http:")) {
        return "https://" + url.substr(7);
      } else {
        return url;
      }
    },
    getChatText: function(cid){
      if (!cid) {
        return $();
      } else {
        return get$cms().find(".text.cid-" + cid);
      }
    },
    getChat: function(cid){
      if (typeof cid === 'object') {
        return cid.$el || (cid.$el = getChat(cid.cid));
      } else {
        return getChatText(cid).parent().parent();
      }
    },
    isMention: function(msg, nameMentionOnly){
      var user, ref$, fromUser;
      user = API.getUser();
      if (nameMentionOnly) {
        return (ref$ = msg.isMentionName) != null
          ? ref$
          : msg.isMentionName = msg.message.has("@" + user.rawun);
      }
      fromUser = msg.from || (msg.from = getUser(msg) || {});
      return (ref$ = msg.isMention) != null
        ? ref$
        : msg.isMention = user.rawun && msg.message.has("@" + user.rawun) || fromUser.id !== userID && ((fromUser.gRole || fromUser.role >= 4) && msg.message.has("@everyone") || (fromUser.gRole || fromUser.role >= 2) && (user.role > 1 && (msg.message.has("@staff") || user.role === 1 && msg.message.has("@rdjs") || user.role === 2 && msg.message.has("@bouncers") || user.role === 3 && msg.message.has("@managers") || user.role === 4 && msg.message.has("@hosts")) || msg.message.has("@djs") && API.getWaitListPosition() !== -1));
      /*
      // for those of you looking at the compiled Javascript, have some readable code:
      return (ref$ = msg.isMention) != null ? ref$ : msg.isMention =
          msg.message.has("@" + user.rawun)
          || fromUser.id !== userID && (
              (fromUser.gRole || fromUser.role >= 4) && msg.message.has("@everyone") // @everyone is co-host+
              || (fromUser.gRole || fromUser.role >= 2) && ( // all other special mentions are bouncer+
                  user.role > 1 && ( // if the user is staff
                      msg.message.has("@staff")
                      || user.role === 1 && msg.message.has("@rdjs")
                      || user.role === 2 && msg.message.has("@bouncers")
                      || user.role === 3 && msg.message.has("@managers")
                      || user.role === 4 && msg.message.has("@hosts")
                  ) || msg.message.has("@djs") && API.getWaitListPosition() !== -1 // if the user is in the waitlist
              )
          );
       */
    },
    getMentions: function(data, safeOffsets){
      var attr, that, roles, users, msgLength, checkGeneric, user, mentions, l;
      if (safeOffsets) {
        attr = 'mentionsWithOffsets';
      } else {
        attr = 'mentions';
      }
      if (that = data[attr]) {
        return that;
      }
      roles = {
        everyone: 0,
        djs: 0,
        rdjs: 1,
        staff: 2,
        bouncers: 2,
        managers: 3,
        hosts: 4
      };
      users = API.getUsers();
      msgLength = data.message.length;
      checkGeneric || (checkGeneric = getUser(data));
      checkGeneric && (checkGeneric = checkGeneric.gRole
        ? 5
        : checkGeneric.role);
      mentions = [];
      l = 0;
      data.message.replace(/@/g, function(_, offset){
        var possibleMatches, i, str, k, ref$, v, genericMatch, possibleMatches2, l2, i$, len$, m, res;
        offset++;
        possibleMatches = users;
        i = 0;
        if (checkGeneric >= 3) {
          str = data.message.substr(offset, 8);
          for (k in ref$ = roles) {
            v = ref$[k];
            if (str.startsWith(k) && (k !== 'everyone' || checkGeneric >= 4)) {
              genericMatch = {
                rawun: k,
                username: k,
                role: v,
                id: 0
              };
              break;
            }
          }
        }
        while (possibleMatches.length && i < msgLength) {
          possibleMatches2 = [];
          l2 = 0;
          for (i$ = 0, len$ = possibleMatches.length; i$ < len$; ++i$) {
            m = possibleMatches[i$];
            if (m.rawun && m.rawun[i] === data.message[offset + i]) {
              if (m.rawun.length === i + 1) {
                res = m;
              } else {
                possibleMatches2[l2++] = m;
              }
            }
          }
          possibleMatches = possibleMatches2;
          i++;
        }
        if (res || (res = genericMatch)) {
          if (safeOffsets) {
            mentions[l++] = (ref$ = clone$(res), ref$.offset = offset - 1, ref$);
          } else if (!mentions.has(res)) {
            mentions[l++] = res;
          }
        }
      });
      if (!mentions.length && !safeOffsets) {
        mentions = [getUser(data)];
      }
      mentions.toString = function(){
        var res, res$, i$, len$, user;
        res$ = [];
        for (i$ = 0, len$ = this.length; i$ < len$; ++i$) {
          user = this[i$];
          res$.push("@" + user.rawun);
        }
        res = res$;
        return humanList(res);
      };
      data[attr] = mentions;
      return mentions;
    },
    isMessageVisible: function($msg){
      var ref$;
      if (typeof msg === 'string') {
        $msg = getChat($msg);
      }
      if ($msg != null && $msg.length) {
        return get$cm().height() > (ref$ = $msg.offset().top) && ref$ > 101;
      } else {
        return false;
      }
    },
    escapeRegExp: function(str){
      return (str + "").replace(/[\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:]/g, "\\$&");
    },
    htmlEscapeMap: {
      sp: 32,
      blank: 32,
      excl: 33,
      quot: 34,
      num: 35,
      dollar: 36,
      percnt: 37,
      amp: 38,
      apos: 39,
      lpar: 40,
      rpar: 41,
      ast: 42,
      plus: 43,
      comma: 44,
      hyphen: 45,
      dash: 45,
      period: 46,
      sol: 47,
      colon: 58,
      semi: 59,
      lt: 60,
      equals: 61,
      gt: 62,
      quest: 63,
      commat: 64,
      lsqb: 91,
      bsol: 92,
      rsqb: 93,
      caret: 94,
      lowbar: 95,
      lcub: 123,
      verbar: 124,
      rcub: 125,
      tilde: 126,
      sim: 126,
      nbsp: 160,
      iexcl: 161,
      cent: 162,
      pound: 163,
      curren: 164,
      yen: 165,
      brkbar: 166,
      sect: 167,
      uml: 168,
      die: 168,
      copy: 169,
      ordf: 170,
      laquo: 171,
      not: 172,
      shy: 173,
      reg: 174,
      hibar: 175,
      deg: 176,
      plusmn: 177,
      sup2: 178,
      sup3: 179,
      acute: 180,
      micro: 181,
      para: 182,
      middot: 183,
      cedil: 184,
      sup1: 185,
      ordm: 186,
      raquo: 187,
      frac14: 188,
      half: 189,
      frac34: 190,
      iquest: 191
    },
    htmlEscape: function(str){
      return $dummy.text(str).html();
      /*
      if not window.htmlEscapeRegexp
          window.htmlEscapeRegexp = []; l=0; window.htmlEscapeMap_reversed = {}
          for k,v of htmlEscapeMap when v != 32 #spaces
              window.htmlEscapeMap_reversed[v] = k
              v .= toString 16
              if v.length <= 2
                  v = "0#v"
              window.htmlEscapeRegexp[l++] = "\\u0#v"
      return str.replace //#{window.htmlEscapeRegexp .join "|"}//g, (c) !-> return "&#{window.htmlEscapeMap_reversed[c.charCodeAt 0]};"
      */
    },
    htmlUnescape: function(html){
      return html.replace(/&(\w+);|&#(\d+);|&#x([a-fA-F0-9]+);/g, function(_, a, b, c){
        return String.fromCharCode(+b || htmlEscapeMap[a] || parseInt(c, 16)) || _;
      });
    },
    stripHTML: function(msg){
      return msg.replace(/<.*?>/g, '');
    },
    unemojify: function(str){
      var map, ref$;
      map = (ref$ = window.emoticons) != null ? ref$.map : void 8;
      if (!map) {
        return str;
      }
      return str.replace(/(?:<span class="emoji-glow">)?<span class="emoji emoji-(\w+)"><\/span>(?:<\/span>)?/g, function(_, emoteID){
        var that;
        if (that = emoticons.reversedMap[emoteID]) {
          return ":" + that + ":";
        } else {
          return _;
        }
      });
    },
    resolveRTL: function(str, dontJoin){
      var a, b, isRTLoverridden;
      a = b = "";
      isRTLoverridden = false;
      (str + "\u202d").replace(/(.*?)(\u202e|\u202d)/g, function(_, pre, c){
        if (isRTLoverridden) {
          b += pre.reverse();
        } else {
          a += pre;
        }
        isRTLoverridden = c === '\u202e';
        return _;
      });
      if (dontJoin) {
        return [a, b];
      } else {
        return a + b;
      }
    },
    collapseWhitespace: function(str){
      return str.replace(/\s+/g, ' ');
    },
    cleanMessage: function(str){
      return collapseWhitespace(
      resolveRTL(
      htmlUnescape(
      stripHTML(
      unemojify(
      str)))));
    },
    formatPlainText: function(text){
      var lvl;
      lvl = 0;
      text = text.replace(/([\s\S]*?)($|(?:https?:|www\.)(?:\([^\s\]\)]*\)|\[[^\s\)\]]*\]|[^\s\)\]]+))+([\.\?\!\,])?/g, function(arg$, pre, url, post){
        pre = pre.replace(/(\s)(".*?")([\.,!\?\s])/g, "$1<i class='song-description-string'>$2</i>$3").replace(/(\s)(\*\w+\*)(\s)/g, "$1<b>$2</b>$3").replace(/(lyrics|download|original|re-?upload)/gi, "<b>$1</b>").replace(/(\s)(0x)([0-9a-fA-F]+)|(#)([\d\-]+)(\s)/g, "$1<i class='song-description-comment'>$2$4</i><b class='song-description-number'>$3$5</b>$6").replace(/(\s)(\d+)(\w*|%|\+)(\s)/g, "$1<b class='song-description-number'>$2</b><i class='song-description-comment'>$3</i>$4").replace(/(\s)(\d+)(\s)/g, "$1<b class='song-description-number'>$2</b>$3").replace(/^={5,}$/mg, "<hr class='song-description-hr-double' />").replace(/^[\-~_]{5,}$/mg, "<hr class='song-description-hr' />").replace(/^[\[\-=~_]+.*?[\-=~_\]]+$/mg, "<b class='song-description-heading'>$&</b>");
        /*  .replace /(.?)(\(|\))(.?)/g, (x,a,b,c) !->
                if x.hasAny ['=', '^']  or  a == ":" or c == ":"
                    return x
                else if b == \(
                    lvl++
                    return "#a<i class='song-description-comment'>(#c" if lvl == 1
                else if lvl > 0
                    lvl--
                    return "#a)</i>#c" if lvl == 0
                return x*/
        if (!url) {
          return pre;
        } else {
          return pre + "<a href='" + url + "' target=_blank>" + url + "</a>" + (post || '');
        }
      });
      if (lvl) {
        text += "</i>";
      }
      return text.replace(/\n/g, '<br>');
    }
    /*colorKeywords: do !->
        <[ %undefined% black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua orange aliceblue antiquewhite aquamarine azure beige bisque blanchedalmond blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen gainsboro ghostwhite gold goldenrod greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow limegreen linen mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite oldlace olivedrab orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna skyblue slateblue slategray slategrey snow springgreen steelblue tan thistle tomato turquoise violet wheat whitesmoke yellowgreen rebeccapurple ]>
            ..0 = void
            return ..
    isColor: (str) !->
        str = (~~str).toString(16) if typeof str == \number
        return false if typeof str != \string
        str .= trim!
        tmp = /^(?:#(?:[a-fA-F0-9]{6}|[a-fA-F0-9]{3})|(?:rgb|hsl)a?\([\d,]+\)|currentColor|(\w+))$/.exec(str)
        if tmp and tmp.1 in window.colorKeywords
            return str
        else
            return false*/,
    isColor: function(str){
      $dummy[0].style.color = "";
      $dummy[0].style.color = str;
      return $dummy[0].style.color !== "";
    },
    isURL: function(str){
      if (typeof str !== 'string') {
        return false;
      }
      str = str.trim().replace(/\\\//g, '/');
      if (parseURL(str).host !== location.host) {
        return str;
      } else {
        return false;
      }
    },
    humanList: function(arr){
      if (!arr.length) {
        return "";
      }
      arr = importAll$([], arr);
      if (arr.length > 1) {
        arr[arr.length - 2] += " and\xa0" + arr.pop();
      }
      return arr.join(", ");
    },
    mention: function(list){
      var res, res$, i$, len$, i, ref$;
      if (!(list != null && list.length)) {
        return "";
      } else if (list[0].username) {
        res$ = [];
        for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
          i = i$;
          res$.push("@" + list[i].username);
        }
        res = res$;
      } else if ((ref$ = list[0].attributes) != null && ref$.username) {
        res$ = [];
        for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
          i = i$;
          res$.push("@" + list[i].get('username'));
        }
        res = res$;
      } else {
        res$ = [];
        for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
          i = i$;
          res$.push("@" + list[i]);
        }
        res = res$;
      }
      return humanList;
    },
    plural: function(num, singular, plural){
      plural == null && (plural = singular + "s");
      if (num === 1) {
        return num + "\xa0" + singular;
      } else {
        return num + "\xa0" + plural;
      }
    },
    xth: function(i){
      var ld;
      ld = i % 10;
      switch (true) {
      case i % 100 - ld === 10:
        i + "th";
        break;
      case ld === 1:
        return i + "st";
      case ld === 2:
        return i + "nd";
      case ld === 3:
        return i + "rd";
      }
      return i + "th";
    }
    /*fromCodePoints: (str) !->
        res = ""
        for codePoint in str.split \-
            res += String.fromCodePoints(parseInt(codePoint, 16))
        return res
    */,
    emojifyUnicode: function(str){
      if (typeof str !== 'string') {
        return str;
      } else {
        return str.replace(/\ud83c[\udf00-\udfff]|\ud83d[\udc00-\ude4f]|\ud83d[\ude80-\udeff]/g, function(emoji, all){
          emoji = emoji.codePointAt(0).toString(16);
          if (emoticons.reversedMap[emoji]) {
            return emojifyUnicodeOne(emoji, true);
          } else {
            return all;
          }
        });
      }
    },
    emojifyUnicodeOne: function(key){
      return "<span class=\"emoji emoji-" + key + "\"></span>";
    },
    flag: function(language, unicode){
      /*@security HTML injection possible, if Lang.languages[language] is maliciously crafted*/
      if (!language || (window.Lang && !Lang.languages[language])) {
        return "";
      } else {
        return "<span class='flag flag-" + language + "' title='" + (typeof Lang != 'undefined' && Lang !== null ? Lang.languages[language] : void 8) + "'></span>";
      }
      /*
      if window.emoticons
          language .= language if typeof language == \object
          language = \gb if language == \en
          if key = emoticons.map[language]
              if unicode
                  return key
              else
                  return emojifyOne(key)
      return language*/
    },
    formatUser: function(user, showModInfo){
      var info, d;
      if (user.toJSON) {
        user = user.toJSON();
      }
      info = getRank(user, true);
      if (info === 'regular') {
        info = "";
      } else {
        info = " " + info;
      }
      if (showModInfo) {
        info += " lvl " + (user.gRole === 5
          ? '∞'
          : user.level);
        if (Date.now() - 48 .h < (d = parseISOTime(user.joined))) {
          info += " - created " + ago(d);
        }
      }
      return user.username + " (" + user.language + info + ")";
    },
    formatUserHTML: function(user, fromClass, options){
      /*@security no HTML injection should be possible, unless user.rawun or .id is improperly modified*/
      var warning, d, info, rank, userFlag;
      user = getUser(user);
      if (typeof fromClass === 'object') {
        options = fromClass;
        fromClass = options.classes == null || options.classes;
      } else if (!options) {
        options = {};
        fromClass = true;
      }
      warning = options.warn && Date.now() - 48 .h < (d = parseISOTime(user.joined)) ? "created " + ago(d) : "";
      info = options.lvl && user.isStaff
        ? " (lvl " + (user.gRole === 5
          ? '∞'
          : user.level) + (warning ? ' - ' + warning : '') + ")"
        : warning ? " (" + warning + ")" : void 8;
      if (fromClass) {
        rank = getRankIcon(user);
        fromClass = " " + getUserClasses(user, false);
      } else {
        fromClass = rank = "";
      }
      userFlag = options.flag ? flag(user.language) : "";
      return "<span class='un p0ne-name" + fromClass + "' data-uid='" + user.id + "'>" + rank + " <span class=name>" + user.rawun + "</span>" + userFlag + (info || '') + "</span>";
    },
    formatUserSimple: function(user){
      return "<span class=un data-uid='" + user.id + "'>" + user.rawun + "</span>";
    },
    timezoneOffset: new Date().getTimezoneOffset(),
    getTime: function(t){
      t == null && (t = Date.now());
      return new Date(t - timezoneOffset * 60000).toISOString().replace(/.+?T|\..+/g, '');
    },
    getDateTime: function(t){
      t == null && (t = Date.now());
      return new Date(t - timezoneOffset * 60000).toISOString().replace(/T|\..+/g, ' ');
    },
    getDate: function(t){
      t == null && (t = Date.now());
      return new Date(t - timezoneOffset * 60000).toISOString().replace(/T.+/g, '');
    },
    getISOTime: function(t){
      t == null && (t = new Date);
      return t.toISOString().replace(/T|\..+/g, " ");
    },
    parseISOTime: function(t){
      return new Date(t) - timezoneOffset * 60000;
    },
    humanTime: function(diff, shortFormat){
      var b, c;
      if (diff < 0) {
        return "-" + humanTime(-diff);
      } else if (!shortFormat && diff < 2000) {
        return "just now";
      }
      b = [60, 60, 24, 360.25];
      c = 0;
      diff /= 1000;
      while (diff > 2 * b[c]) {
        diff /= b[c++];
      }
      if (shortFormat) {
        return ~~diff + "" + ['s', 'm', 'h', 'd', 'y'][c];
      } else {
        return ~~diff + " " + ['seconds', 'minutes', 'hours', 'days', 'years'][c];
      }
    },
    mediaTime: function(dur){
      var m, h;
      if (dur < 0) {
        return "-" + mediaTime(-dur);
      }
      m = 0;
      if (dur >= 60) {
        m = ~~(dur / 60);
        dur %= 60;
        if (m >= 60) {
          h = ~~(m / 60);
          m %= 60;
        }
      }
      return (h ? pad(h) + ":" : '') + "" + pad(m) + ":" + pad(~~dur);
    },
    ago: function(d){
      d = Date.now() - d;
      if (d < 2000) {
        return "just now";
      } else {
        return humanTime(d) + " ago";
      }
    },
    formatMB: function(it){
      return it.toFixed(2) + "MB";
    },
    getRank: function(user, defaultToGhost){
      var that;
      if (user <= 5) {
        user = {
          role: user
        };
      } else if (typeof user !== 'object') {
        user = getUser(user);
      } else if ('attributes' in user) {
        user = user.toJSON();
      }
      if (!user || user.role === -1) {
        return defaultToGhost ? 'ghost' : 'regular';
      } else if (that = user.gRole) {
        return that === 5 ? 'admin' : 'ambassador';
      } else {
        return ['regular', 'dj', 'bouncer', 'manager', 'cohost', 'host'][user.role || 0];
      }
    },
    getRankIcon: function(user){
      var rank;
      rank = getRank(user, true);
      return rank !== 'regular' && "<i class='icon icon-chat-" + rank + " p0ne-icon-small'></i>" || '';
    },
    getUserClasses: function(u, inclExtra, inclFrom){
      var rank, res;
      if (inclFrom) {
        inclFrom = "from-";
      } else {
        inclFrom = "";
      }
      if (!u || !(u = getUser(u) || (typeof staff != 'undefined' && staff !== null ? staff[u.uid || u.id || u] : void 8))) {
        return "";
      }
      rank = getRank(u, true);
      res = inclFrom + "" + rank;
      if (u.id === userID) {
        res += " " + inclFrom + "you";
      }
      if (inclExtra) {
        if (u.role > 1 || u.gRole) {
          res += " " + inclFrom + "staff";
        }
        if (u.sub) {
          res += " " + inclFrom + "subscriber";
        }
        if (u.friend) {
          res += " " + inclFrom + "friend";
        }
      }
      return res;
    },
    parseURL: function(href){
      var a;
      href || (href = "//");
      a = document.createElement('a');
      a.href = href;
      return a;
    },
    getIcon: function(){
      /* note: this function doesn't cache results, as it's expected to not be used often (only in module setups)
       * if you plan to use it over and over again, use getIcon.enableCaching() */
      var $icon, fn;
      $icon = $("<i class=icon><!-- this is used by plug_p0ne's getIcon() --></i>").css({
        visibility: 'hidden'
      }).appendTo('body');
      fn = function(className, parsed){
        var res, res2, that;
        $icon.addClass(className);
        res = {
          image: $icon.css('background-image'),
          position: $icon.css('background-position')
        };
        if (className) {
          $icon.removeClass(className);
        }
        if (parsed) {
          res2 = {
            x: 0,
            y: 0,
            url: res.image.substring(4, res.image.length - 1)
          };
          if (that = /-?(\d+)px\s+-?(\d+)px/.exec(res.position)) {
            res2.x = +that[1];
            res2.y = +that[2];
          }
          return res2;
        } else {
          res.background = res.image + " " + res.position;
          return res;
        }
      };
      fn.enableCaching = function(){
        var res;
        res = _.memoize(fn);
        res.enableCaching = $.noop;
        window.getIcon = res;
      };
      return fn;
    }(),
    htmlToggle: function(checked, data){
      var k, v;
      if (data) {
        data = "";
        for (k in data) {
          v = data[k];
          data += "data-" + k + "='" + v + "' ";
        }
      } else {
        data = '';
      }
      return "<input type=checkbox class=checkbox " + data + (checked ? '' : 'checked') + " />";
    },
    disabled: false,
    user: typeof API != 'undefined' && API !== null ? API.getUser() : void 8,
    getRoomSlug: function(){
      return (typeof room != 'undefined' && room !== null ? typeof room.get == 'function' ? room.get('slug') : void 8 : void 8) || decodeURIComponent(location.pathname.substr(1));
    }
  });
  window.woot.click = window.woot;
  window.meh.click = window.meh;
  window.unsnooze = window.refresh;
  return dataLoadAll({
    p0ne_requireIDs: {},
    p0ne_disabledModules: {
      _rooms: {}
    }
  }, function(err, data){
    var id, ref$, m, moduleName, res$, k, ref1$, v, Dialog, InventoryDropdown, PlaylistItemRow, PlaylistMediaList, i$, len$, context, ref2$, ref3$, ref4$, cb, app, friendsList, pl, user, ref5$, ev, myAvatars, userID, ref6$, e, $cm, rR_, onLoaded, dummyP3, ppStop, MAX_IMAGE_HEIGHT, CHAT_WIDTH, tmp, staff;
    window.requireIDs = data.p0ne_requireIDs;
    p0ne.disabledModules = data.p0ne_disabledModules;
    if (err) {
      if (err.p0ne_requireIDs) {
        console.warn(getTime() + " [p0ne] the cached requireIDs seem to be corrupted");
      }
      if (err.p0ne_disabledModules) {
        console.warn(getTime() + " [p0ne] the user's p0ne settings seem to be corrupted");
      }
    }
    /*####################################
    #          REQUIRE MODULES           #
    ####################################*/
    /* requireHelper(moduleName, testFn) */
    delete window.room;
    for (id in ref$ = require.s.contexts._.defined) {
      m = ref$[id];
      if (m) {
        moduleName = false;
        m.requireID = id;
        switch (false) {
        case !m.ACTIVATE:
          moduleName = 'ActivateEvent';
          break;
        case m._name !== 'AlertEvent':
          moduleName = 'AlertEvent';
          break;
        case !m.deserializeMedia:
          moduleName = 'auxiliaries';
          break;
        case !m.AUDIENCE:
          moduleName = 'Avatar';
          break;
        case !m.getAvatarUrl:
          moduleName = 'avatarAuxiliaries';
          break;
        case !m.Events:
          moduleName = 'backbone';
          break;
        case !m.mutes:
          moduleName = 'chatAuxiliaries';
          break;
        case !m.updateElapsedBind:
          moduleName = 'currentMedia';
          break;
        case !m.settings:
          moduleName = 'database';
          break;
        case !m.emojify:
          moduleName = 'emoticons';
          res$ = {};
          for (k in ref1$ = m.map) {
            v = ref1$[k];
            res$[v] = k;
          }
          m.reversedMap = res$;
          break;
        case !m.mapEvent:
          moduleName = 'eventMap';
          break;
        case !m.getSize:
          moduleName = 'Layout';
          break;
        case !m.canModChat:
          moduleName = 'permissions';
          break;
        case !m._read:
          moduleName = 'playlistCache';
          break;
        case !m.activeMedia:
          moduleName = 'playlists';
          break;
        case !m.scThumbnail:
          moduleName = 'plugUrls';
          break;
        case m.className !== 'pop-menu':
          moduleName = 'popMenu';
          break;
        case !m.onVideoResize:
          moduleName = 'roomLoader';
          break;
        case !m.ytSearch:
          moduleName = 'searchAux';
          break;
        case !m._search:
          moduleName = 'searchManager';
          break;
        case !m.settings:
          moduleName = 'settings';
          break;
        case !m.ack:
          moduleName = 'socketEvents';
          break;
        case !m.sc:
          moduleName = 'soundcloud';
          break;
        case !m.identify:
          moduleName = 'tracker';
          break;
        case !m.onRole:
          moduleName = 'users';
          break;
        case !m.PREVIEW:
          moduleName = 'PreviewEvent';
          break;
        case !('_window' in m):
          moduleName = 'PopoutView';
          break;
        default:
          switch (m.id) {
          case 'playlist-menu':
            moduleName = 'playlistMenu';
            break;
          case 'user-lists':
            moduleName = 'userList';
            break;
          case 'user-rollover':
            moduleName = 'userRollover';
            break;
          default:
            if (m._events) {
              switch (false) {
              case !m._events['chat:receive']:
                moduleName = "_$context";
              }
            }
            if (m.attributes) {
              switch (false) {
              case !('shouldCycle' in m.attributes):
                moduleName = 'booth';
                break;
              case !('hostID' in m.attributes):
                moduleName = 'room';
                break;
              case !('grabbers' in m.attributes):
                moduleName = 'votes';
              }
            }
            if (m.prototype) {
              switch (false) {
              case m.prototype.id !== 'dialog-alert':
                moduleName = 'DialogAlert';
                out$.Dialog = Dialog = m.__super__.constructor;
                break;
              case m.prototype.className !== 'friends':
                moduleName = 'FriendsList';
                break;
              case !(m.prototype.className === 'avatars' && m.prototype.eventName):
                moduleName = 'InventoryAvatarPage';
                out$.InventoryDropdown = InventoryDropdown = new m().dropDown.constructor;
                break;
              case !m.prototype.onPlaylistVisible:
                moduleName = 'MediaPanel';
                break;
              case m.prototype.id !== 'playback':
                moduleName = 'Playback';
                break;
              case m.prototype.listClass !== 'playlist-media':
                moduleName = 'PlaylistItemList';
                out$.PlaylistItemRow = PlaylistItemRow = m.prototype.RowClass;
                out$.PlaylistMediaList = PlaylistMediaList = m.__super__.constructor;
                break;
              case !m.prototype.onItemsChange:
                moduleName = 'PlaylistListRow';
                break;
              case !m.prototype.hasOwnProperty('permissionAlert'):
                moduleName = 'PlugAjax';
                break;
              case !(m.prototype.listClass === 'history' && m.prototype.hasOwnProperty('listClass')):
                moduleName = 'RoomHistory';
                break;
              case !m.prototype.vote:
                moduleName = 'RoomUserRow';
                break;
              case m.prototype.listClass !== 'search':
                moduleName = 'SearchList';
                out$.PlaylistMediaList = PlaylistMediaList = m.__super__.constructor;
                break;
              case !(m.prototype.id === 'chat-suggestion' && 'chat-suggestion' !== m.__super__.id):
                moduleName = 'SuggestionView';
                break;
              case !m.prototype.onAvatar:
                moduleName = 'WaitlistRow';
                break;
              case !m.prototype.onVideos:
                moduleName = 'YtSearchService';
                break;
              case !((ref1$ = m.prototype.execute) != null && ref1$.toString().has("/media/insert")):
                moduleName = 'Curate';
              }
            }
          }
        }
        if (moduleName) {
          if (!p0ne_ && window[moduleName] != null) {
            console.warn("[require] found multiple matches for '" + moduleName + "'");
          }
          window[moduleName] = m;
        }
        /*| m._events?[\update:next] =>
            window.visiblePlaylist = m
        | m\currentFilter of =>
            window.visiblePlaylistFiltered = m
        | m._byId?.admin01 =>
            window.AvatarList = m
        */
      }
    }
    for (i$ = 0, len$ = (ref$ = ['_$context', 'ActivateEvent', 'AlertEvent', 'auxiliaries', 'Avatar', 'avatarAuxiliaries', 'backbone', 'booth', 'chatAuxiliaries', 'Curate', 'currentMedia', 'database', 'DialogAlert', 'emoticons', 'FriendsList', 'InventoryAvatarPage', 'Layout', 'MediaPanel', 'permissions', 'Playback', 'PreviewEvent', 'playlistCache', 'PlaylistItemList', 'PlaylistListRow', 'playlistMenu', 'playlists', 'PlugAjax', 'plugUrls', 'popMenu', 'PopoutView', 'room', 'RoomHistory', 'roomLoader', 'RoomUserRow', 'searchAux', 'SearchList', 'searchManager', 'settings', 'socketEvents', 'soundcloud', 'SuggestionView', 'tracker', 'userList', 'userRollover', 'users', 'votes', 'WaitlistRow', 'YtSearchService']).length; i$ < len$; ++i$) {
      m = ref$[i$];
      if (!m in window) {
        console.warn("[require] couldn't require", m);
      }
    }
    if (typeof DialogAlert == 'undefined' || DialogAlert === null) {
      $app.addClass('p0ne-dialog-not-required');
    }
    if (typeof _$context == 'undefined' || _$context === null) {
      console.error("[p0ne require] couldn't load '_$context'. A lot of modules will NOT load because of this");
    }
    for (i$ = 0, len$ = (ref$ = [Backbone.Events, window._$context, API]).length; i$ < len$; ++i$) {
      context = ref$[i$];
      if (context) {
        context.onEarly = fn$;
      }
    }
    /* `app` is like the ultimate root object on plug.dj, just about everything is somewhere in there! great for debugging :) */
    for (i$ = 0, len$ = (ref$ = (typeof room != 'undefined' && room !== null ? (ref2$ = room._events) != null ? ref2$['change:name'] : void 8 : void 8) || (typeof _$context != 'undefined' && _$context !== null ? (ref3$ = _$context._events) != null ? ref3$['show:room'] : void 8 : void 8) || (typeof Layout != 'undefined' && Layout !== null ? (ref4$ = Layout._events) != null ? ref4$['resize'] : void 8 : void 8) || []).length; i$ < len$; ++i$) {
      cb = ref$[i$];
      if (cb.ctx.room) {
        out$.app = app = cb.ctx;
        out$.friendsList = friendsList = app.room.friends;
        out$.pl = pl = app.footer.playlist.playlist.media;
        break;
      }
    }
    if (requireHelper('user_', function(it){
      return it.canModChat;
    })) {
      out$.user = user = user_.toJSON();
      for (i$ = 0, len$ = (ref$ = (typeof user_ != 'undefined' && user_ !== null ? (ref5$ = user_._events) != null ? ref5$['change:avatarID'] : void 8 : void 8) || []).length; i$ < len$; ++i$) {
        ev = ref$[i$];
        if (ev.ctx.comparator === 'id') {
          out$.myAvatars = myAvatars = ev.ctx;
          break;
        }
      }
    }
    if (user || (user = window.user)) {
      out$.userID = userID = user.id;
      user.isStaff = user.role > 1 || user.gRole;
    }
    window.Lang = require('lang/Lang');
    for (k in ref$ = typeof Lang != 'undefined' && Lang !== null ? Lang.languages : void 8) {
      v = ref$[k];
      if (v.has('\'')) {
        (ref6$ = Lang.languages)[k] = ref6$[k].replace(/\\?'/g, "\\'");
      }
    }
    if (app && !(window.chat = app.room.chat) && window._$context) {
      for (i$ = 0, len$ = (ref$ = _$context._events['chat:receive'] || []).length; i$ < len$; ++i$) {
        e = ref$[i$];
        if ((ref6$ = e.context) != null && ref6$.cid) {
          window.chat = e.context;
          break;
        }
      }
    }
    /*####################################
    #          CHAT AUXILIARIES          #
    ####################################*/
    $cm = $('#chat-messages');
    importAll$(window, {
      get$cm: function(){
        var ref$;
        return (typeof PopoutView != 'undefined' && PopoutView !== null ? (ref$ = PopoutView.chat) != null ? ref$.$chatMessages : void 8 : void 8) || (typeof chat != 'undefined' && chat !== null ? chat.$chatMessages : void 8) || cm;
      },
      get$cms: function(){
        var cm, that, ref$;
        cm = (typeof chat != 'undefined' && chat !== null ? chat.$chatMessages : void 8) || cm;
        if (that = typeof PopoutView != 'undefined' && PopoutView !== null ? (ref$ = PopoutView.chat) != null ? ref$.$chatMessages : void 8 : void 8) {
          return cm.add(that);
        } else {
          return cm;
        }
      },
      playChatSound: throttle(200, function(isMention){
        if (typeof chat != 'undefined' && chat !== null) {
          chat.playSound();
        }
        /*if isMention
            chat.playSound \mention
        else if $ \.icon-chat-sound-on .length > 0
            chat.playSound \chat
        */
      }),
      appendChat: function(div, wasAtBottom){
        var $div, ref$;
        wasAtBottom == null && (wasAtBottom = chatIsAtBottom());
        $div = $(div);
        get$cms().append($div);
        if (wasAtBottom) {
          chatScrollDown();
        }
        chat.lastType = null;
        if (typeof PopoutView != 'undefined' && PopoutView !== null) {
          if ((ref$ = PopoutView.chat) != null) {
            ref$.lastType = null;
          }
        }
        return $div;
      },
      chatWarn: function(message, title, isHTML){
        if (!message) {
          return;
        }
        if (typeof title === 'string') {
          title = $('<span class=un>').text(title);
        } else {
          isHTML = title;
          title = null;
        }
        return appendChat($('<div class="cm p0ne-notif"><div class=badge-box><i class="icon icon-chat-system"></i></div></div>').append($('<div class=msg>').append($('<div class=from>').append(title).append(getTimestamp())).append($('<div class=text>')[isHTML ? 'html' : 'text'](message))));
      },
      chatWarnSmall: function(className, message, icon, isHTML){
        var ref$;
        if (typeof message !== 'string') {
          ref$ = [className, message, icon], message = ref$[0], icon = ref$[1], isHTML = ref$[2];
          className = '';
        }
        if (typeof icon === 'boolean') {
          isHTML = icon;
          icon = false;
        }
        icon || (icon = 'icon-chat-system');
        if (typeof chat != 'undefined' && chat !== null) {
          chat.lastType = className;
        }
        return !message || appendChat($("<div class='cm p0ne-notif p0ne-notif-small " + className + "'><i class='icon " + icon + "'></i></div>").append($('<div class="msg text">')[isHTML ? 'html' : 'text'](message).append(getTimestamp())));
      },
      chatIsAtBottom: function(){
        var $cm;
        $cm = get$cm();
        return $cm.scrollTop() > $cm[0].scrollHeight - $cm.height() - 20;
      },
      chatScrollDown: function(){
        var $cm;
        $cm = get$cm();
        $cm.scrollTop($cm[0].scrollHeight);
      },
      chatInput: function(msg, append){
        var $input, that;
        $input = (typeof chat != 'undefined' && chat !== null ? chat.$chatInputField : void 8) || $('#chat-input-field');
        if (that = append && $input.text()) {
          msg = that + " " + msg;
        }
        $input.val(msg).trigger('input').focus();
      },
      getTimestamp: function(d){
        d == null && (d = new Date);
        if (typeof auxiliaries != 'undefined' && auxiliaries !== null) {
          return "<time class='timestamp' datetime='" + d.toISOString() + "'>" + auxiliaries.getChatTimestamp((typeof database != 'undefined' && database !== null ? database.settings.chatTimestamps : void 8) === 24) + "</time>";
        } else {
          return "<time class='timestamp' datetime='" + d.toISOString() + "'>" + pad(d.getHours()) + ":" + pad(d.getMinutes()) + "</time>";
        }
      }
    });
    /*####################################
    #          EXTEND DEFERREDS          #
    ####################################*/
    replace(jQuery, 'Deferred', function(Deferred_){
      return function(){
        var timeStarted, res, promise_;
        res = Deferred_.apply(this, arguments);
        res.timeout = timeout;
        promise_ = res.promise;
        res.promise = function(){
          var res;
          res = promise_.apply(this, arguments);
          res.timeout = timeout;
          if (timeStarted) {
            res.timeStarted = timeStarted;
          }
          return res;
        };
        return res;
        function timeout(time, callback){
          var now, timeStarted, this$ = this;
          now = Date.now();
          timeStarted || (timeStarted = Date.now());
          if (this.state() !== 'pending') {
            return;
          }
          if (timeStarted + time <= now) {
            return callback.call(this, this);
          } else {
            return sleep(timeStarted + time - now, function(){
              if (this$.state() === 'pending') {
                callback.call(this$, this$);
              }
            });
          }
        }
      };
    });
    /*####################################
    #     LISTENER FOR OTHER SCRIPTS     #
    ####################################*/
    onLoaded = function(){
      var rR_, waiting;
      console.info("[p0ne] plugCubed detected");
      rR_ = Math.randomRange;
      requestAnimationFrame(waiting = function(){
        if (window.plugCubed && !window.plugCubed.plug_p0ne) {
          API.trigger('plugCubedLoaded', window.plugCubed);
          $body.addClass('plugCubed');
          replace(plugCubed, 'close', function(close_){
            return function(){
              $body.removeClass('plugCubed');
              close_.apply(this, arguments);
              if (Math.randomRange !== rR_) {
                onLoaded();
              } else {
                window.plugCubed = dummyP3;
              }
            };
          });
        } else {
          requestAnimationFrame(waiting);
        }
      });
    };
    dummyP3 = {
      close: onLoaded,
      plug_p0ne: true
    };
    if (window.plugCubed && !window.plugCubed.plug_p0ne) {
      onLoaded();
    } else {
      window.plugCubed = dummyP3;
    }
    onLoaded = function(){
      console.info("[p0ne] plugplug detected");
      API.trigger('plugplugLoaded', window.plugplug);
      sleep(5000, function(){
        var ppStop;
        ppStop = onLoaded;
      });
    };
    if (window.ppSaved) {
      onLoaded();
    } else {
      out$.ppStop = ppStop = onLoaded;
    }
    /*####################################
    #          GET PLUG³ VERSION         #
    ####################################*/
    window.getPlugCubedVersion = function(){
      var v, that, i$, ref$, len$, i, k;
      if (!((typeof plugCubed != 'undefined' && plugCubed !== null) && plugCubed.init)) {
        return null;
      } else if (plugCubed.version) {
        return plugCubed.version;
      } else if (v = requireHelper('plugCubedVersion', {
        test: function(it){
          return it.major;
        }
      })) {
        return v;
      } else {
        if (!(v = $('#p3-settings .version').text())) {
          $('plugcubed').click();
          v = $('#p3-settings').stop().css({
            left: -500
          }).find('.version').text();
        }
        if (that = v.match(/^(\d+)\.(\d+)\.(\d+)(?:-(\w+))?(_min)? \(Build (\d+)\)$/)) {
          v = {
            toString: function(){
              return this.major + "." + this.minor + "." + this.patch + (this.prerelease && '-' + this.prerelease) + (this.minified && '_min' || '') + " (Build " + this.build + ")";
            }
          };
          for (i$ = 0, len$ = (ref$ = ['major', 'minor', 'patch', 'prerelease', 'minified', 'build']).length; i$ < len$; ++i$) {
            i = i$;
            k = ref$[i$];
            v[k] = that[i + 1];
          }
        }
      }
      return plugCubed.version = v;
    };
    /*####################################
    #          CONSOLE LOG IMAGE         #
    ####################################*/
    console.logImg = function(src, customWidth, customHeight){
      var def, drawImage, x$;
      def = $.Deferred();
      drawImage = function(w, h){
        if (window.chrome) {
          console.log("%c\u200B", "color: transparent;font-size: " + h * 0.854 + "px !important;background: url(" + src + ");display:block;border-right: " + w + "px solid transparent");
        } else {
          console.log("%c", "background: url(" + src + ") no-repeat; display: block;width: " + w + "px; height: " + h + "px;");
        }
        def.resolve();
      };
      if (isFinite(customWidth) && isFinite(customHeight)) {
        drawImage(+customWidth, +customHeight);
      } else {
        x$ = new Image;
        x$.onload = function(){
          drawImage(this.width, this.height);
        };
        x$.onerror = function(){
          console.log("[couldn't load image %s]", src);
          def.reject();
        };
        x$.src = src;
      }
      return def.promise();
    };
    /*@source p0ne.module.ls */
    /**
     * Module script for loading disable-able chunks of code
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.module ~~~~~~~");
    /*####################################
    #               MODULE               #
    ####################################*/
    window.module = function(moduleName, data){
      var setup, require, optional, update, persistent, disable, disableLate, module, settings, displayName, disabled, _settings, settingsPerCommunity, moderator, fn, cbs, arrEqual, objEqual, helperFNs, module_, i$, ref$, len$, k, err, dependenciesLoading, failedRequirements, l, r, ref1$, ref2$, that, optionalRequirements, res$, roomSlug, disabledModules, settingsKey, def, e;
      try {
        if (typeof moduleName === 'string') {
          data.moduleName = moduleName;
        } else {
          data = moduleName;
          if (data) {
            moduleName = data.moduleName;
          }
        }
        if (typeof data === 'function') {
          setup = data;
        } else {
          require = data.require, optional = data.optional, setup = data.setup, update = data.update, persistent = data.persistent, disable = data.disable, disableLate = data.disableLate, module = data.module, settings = data.settings, displayName = data.displayName, disabled = data.disabled, _settings = data._settings, settingsPerCommunity = data.settingsPerCommunity, moderator = data.moderator;
        }
        if (module) {
          if (typeof module === 'function') {
            fn = module;
            module = function(){
              return fn.apply(module, arguments);
            };
            importAll$(module, data);
          } else if (typeof module === 'object') {
            importAll$(module, data);
          } else {
            console.warn(getTime() + " [" + moduleName + "] TypeError when initializing. `module` needs to be either an Object or a Function but is " + typeof module);
            module = data;
          }
        } else {
          module = data;
        }
        module.displayName = displayName || (displayName = moduleName);
        cbs = module._cbs = {};
        arrEqual = function(a, b){
          var i$, len$, i;
          if (!a || !b || a.length !== b.length) {
            return false;
          }
          for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
            i = i$;
            if (a[i] !== b[i]) {
              return false;
            }
          }
          return true;
        };
        objEqual = function(a, b){
          var k;
          if (a === b) {
            return true;
          }
          if (!a || !b) {
            return false;
          }
          for (k in a) {
            if (a[k] !== b[k]) {
              return false;
            }
          }
          return true;
        };
        helperFNs = {
          addListener: function(target){
            var args, ref$, that;
            args = slice$.call(arguments, 1);
            if (target === 'early') {
              ref$ = args, target = ref$[0], args = slice$.call(ref$, 1);
              if (target.onEarly) {
                target.onEarly.apply(target, args);
              } else {
                console.warn(getTime() + " [" + moduleName + "] cannot use .onEarly on", target);
              }
            } else if (target === 'once' || target === 'one') {
              ref$ = args, target = ref$[0], args = slice$.call(ref$, 1);
              if (that = target.once || target.one) {
                that.apply(target, args);
              } else {
                console.warn(getTime() + " [" + moduleName + "] cannot use .once / .one on", target);
              }
            } else {
              target.on.apply(target, args);
            }
            (ref$ = cbs.listeners || (cbs.listeners = []))[ref$.length] = {
              target: target,
              args: args
            };
            return args[args.length - 1];
          },
          replace: function(target, attr, repl){
            var orig, replacement, ref$;
            if (attr in target) {
              orig = target[attr];
              if (!(attr + "_" in target)) {
                target[attr + "_"] = orig;
              }
            } else {
              target[attr + "_"] = null;
            }
            target[attr] = replacement = repl(target[attr]);
            (ref$ = cbs.replacements || (cbs.replacements = []))[ref$.length] = [target, attr, replacement, orig];
            return replacement;
          },
          revert: function(target_, attr_){
            var didReplace, i$, ref$, len$, ref1$, target, attr, replacement, orig;
            if (!cbs.replacements) {
              return false;
            }
            didReplace = false;
            if (attr_) {
              for (i$ = 0, len$ = (ref$ = cbs.replacements).length; i$ < len$; ++i$) {
                ref1$ = ref$[i$], target = ref1$[0], attr = ref1$[1], replacement = ref1$[2], orig = ref1$[3];
                if (target === target_ && attr_ === attr && target[attr] === replacement) {
                  target[attr] = orig;
                  cbs.replacements;
                  return true;
                }
              }
            } else if (target_) {
              for (i$ = 0, len$ = (ref$ = cbs.replacements).length; i$ < len$; ++i$) {
                ref1$ = ref$[i$], target = ref1$[0], attr = ref1$[1], replacement = ref1$[2], orig = ref1$[3];
                if (target === target_ && target[attr] === replacement) {
                  target[attr] = orig;
                  didReplace = true;
                }
              }
            } else {
              for (i$ = 0, len$ = (ref$ = cbs.replacements).length; i$ < len$; ++i$) {
                ref1$ = ref$[i$], target = ref1$[0], attr = ref1$[1], replacement = ref1$[2], orig = ref1$[3];
                if (target === target_) {
                  target[attr] = orig;
                  didReplace = true;
                }
              }
            }
            return didReplace;
          },
          replaceListener: function(emitter, event, ctx, callback){
            var evts, ref$, i$, len$, e;
            if (!(evts = emitter != null ? (ref$ = emitter._events) != null ? ref$[event] : void 8 : void 8)) {
              console.error(getTime() + " [ERROR] unable to replace listener of type '" + event + "' (no such event for event emitter specified)", emitter, ctx);
              return false;
            }
            if (callback) {
              for (i$ = 0, len$ = evts.length; i$ < len$; ++i$) {
                e = evts[i$];
                if (e.ctx === ctx || typeof ctx === 'function' && e.ctx instanceof ctx) {
                  return this.replace(e, 'callback', callback);
                }
              }
            } else {
              callback = ctx;
              for (i$ = 0, len$ = evts.length; i$ < len$; ++i$) {
                e = evts[i$];
                if (e.ctx.cid) {
                  return this.replace(e, 'callback', callback);
                }
              }
            }
            console.error(getTime() + " [ERROR] unable to replace listener of type '" + event + "' (no appropriate callback found)", emitter, ctx);
            return false;
          },
          replace_$Listener: function(event, constructor, callback){
            if (typeof _$context == 'undefined' || _$context === null) {
              console.error(getTime() + " [ERROR] unable to replace listener in _$context._events['" + event + "'] (no _$context)");
              return false;
            }
            if (arguments.length === 2) {
              callback = constructor;
              constructor = _$context;
            }
            helperFNs.replaceListener(_$context, event, constructor, callback);
          },
          add: function(target, callback, options){
            var d, ref$;
            d = [target, callback, options];
            if (options != null && options.bound) {
              callback = callback.bind(module);
            }
            d.index = target.length;
            target[d.index] = callback;
            (ref$ = cbs.adds || (cbs.adds = []))[ref$.length] = d;
          },
          addCommand: function(commandName, data){
            helperFNs.replace(chatCommands.commands, commandName, function(){
              return data;
            });
            chatCommands.updateCommands();
          },
          $create: function(html){
            var ref$;
            return (ref$ = cbs.$elements || (cbs.$elements = []))[ref$.length] = $(html);
          },
          $createPersistent: function(html){
            var ref$;
            return (ref$ = cbs.$elementsPersistent || (cbs.$elementsPersistent = []))[ref$.length] = $(html);
          },
          css: function(name, str){
            p0neCSS.css(name, str);
            (cbs.css || (cbs.css = {}))[name] = str;
          },
          loadStyle: function(url){
            p0neCSS.loadStyle(url);
            (cbs.loadedStyles || (cbs.loadedStyles = {}))[url] = true;
          },
          toggle: function(){
            if (this.disabled) {
              this.enable();
              return true;
            } else {
              this.disable();
              return false;
            }
          },
          enable: function(){
            var err;
            if (!this.disabled) {
              return;
            }
            this.disabled = false;
            if (!module.modDisabled) {
              disabledModules[moduleName] = false;
            }
            try {
              setup.call(module, helperFNs, module);
              trigger('moduleEnabled');
              console.info(getTime() + " [" + moduleName + "] enabled", setup !== null);
            } catch (e$) {
              err = e$;
              console.error(getTime() + " [" + moduleName + "] error while re-enabling", err.messageAndStack);
            }
            return this;
          },
          disable: function(temp){
            var newModule, hasChatCommands, i$, ref$, len$, ref1$, target, args, attr, replacement, orig, d, style, url, $el, m, err;
            if (module.disabled) {
              return this;
            }
            if (temp && temp !== true) {
              newModule = temp;
            }
            try {
              module.disabled = true;
              hasChatCommands = (typeof chatCommands != 'undefined' && chatCommands !== null ? chatCommands.commands : void 8) != null;
              if (typeof disable === 'function') {
                disable.call(module, helperFNs, newModule);
              }
              for (i$ = 0, len$ = (ref$ = cbs.listeners || []).length; i$ < len$; ++i$) {
                ref1$ = ref$[i$], target = ref1$.target, args = ref1$.args;
                target.off.apply(target, args);
              }
              for (i$ = 0, len$ = (ref$ = cbs.replacements || []).length; i$ < len$; ++i$) {
                ref1$ = ref$[i$], target = ref1$[0], attr = ref1$[1], replacement = ref1$[2], orig = ref1$[3];
                if (target[attr] === replacement) {
                  target[attr] = orig;
                  if (hasChatCommands && target === chatCommands.commands) {
                    if (!orig) {
                      delete chatCommands.commands.roomsettings;
                    }
                    chatCommands.updateCommands();
                  }
                }
              }
              for (i$ = 0, len$ = (ref$ = cbs.adds || []).length; i$ < len$; ++i$) {
                d = ref$[i$], target = d[0];
                target.remove(d.index);
                d.index = -1;
              }
              for (style in cbs.css) {
                p0neCSS.css(style, "/* disabled */");
              }
              for (url in cbs.loadedStyles) {
                p0neCSS.unloadStyle(url);
              }
              for (i$ = 0, len$ = (ref$ = cbs.$elements || []).length; i$ < len$; ++i$) {
                $el = ref$[i$];
                $el.remove();
              }
              for (i$ = 0, len$ = (ref$ = p0ne.dependencies[moduleName] || []).length; i$ < len$; ++i$) {
                m = ref$[i$];
                m.disable();
              }
              if (!module.modDisabled && !temp) {
                disabledModules[moduleName] = true;
              }
              if (!newModule) {
                for (i$ = 0, len$ = (ref$ = cbs.$elementsPersistent || []).length; i$ < len$; ++i$) {
                  $el = ref$[i$];
                  $el.remove();
                }
                trigger('moduleDisabled');
                console.info(getTime() + " [" + moduleName + "] disabled");
                dataUnload("p0ne/" + moduleName);
              }
              delete cbs.listeners, delete cbs.replacements, delete cbs.adds, delete cbs.css, delete cbs.loadedStyles, delete cbs.$elements;
              if (typeof disableLate === 'function') {
                disableLate.call(module, helperFNs, newModule);
              }
            } catch (e$) {
              err = e$;
              console.error(getTime() + " [module] failed to disable '" + moduleName + "' cleanly", err.messageAndStack);
              delete window[moduleName];
            }
            delete p0ne.dependencies[moduleName];
            return this;
          }
        };
        module.trigger || (module.trigger = function(target){
          var args, i$, ref$, len$, listener, isMatch, l, j$, ref1$, len1$, i, arg, fn;
          args = slice$.call(arguments, 1);
          for (i$ = 0, len$ = (ref$ = cbs.listeners || []).length; i$ < len$; ++i$) {
            listener = ref$[i$];
            if (listener.target === target) {
              isMatch = true;
              l = listener.args.length - 1;
              for (j$ = 0, len1$ = (ref1$ = listener.args).length; j$ < len1$; ++j$) {
                i = j$;
                arg = ref1$[j$];
                if (arg !== args[i] && !(typeof arg === 'string' && arg.split(/\s+/).has(args[i]))) {
                  if (i + 1 < args.length && i !== l) {
                    isMatch = false;
                  }
                  break;
                }
              }
              if (isMatch) {
                fn = (ref1$ = listener.args)[ref1$.length - 1];
                if (typeof fn === 'function') {
                  fn(args.slice(i));
                }
              }
            }
          }
        });
        module.disable = helperFNs.disable;
        module.enable = helperFNs.enable;
        if (module_ = window[moduleName]) {
          for (i$ = 0, len$ = (ref$ = persistent || []).length; i$ < len$; ++i$) {
            k = ref$[i$];
            module[k] = module_[k];
          }
          if (!module_.disabled) {
            try {
              if (typeof module_.disable == 'function') {
                module_.disable(module);
              }
            } catch (e$) {
              err = e$;
              console.error(getTime() + " [module] failed to disable '" + moduleName + "' cleanly", err.messageAndStack);
            }
          }
        }
        dependenciesLoading = 1;
        failedRequirements = [];
        l = 0;
        for (i$ = 0, len$ = (ref$ = require || []).length; i$ < len$; ++i$) {
          r = ref$[i$];
          if (!r) {
            failedRequirements[l++] = r;
          } else if (typeof r === 'string' && !window[r]) {
            (ref1$ = (ref2$ = p0ne.dependencies)[r] || (ref2$[r] = []))[ref1$.length] = this;
            failedRequirements[l++] = r;
          } else if (that = l === 0 && r.loading || typeof r === 'string' && ((ref1$ = window[r]) != null ? ref1$.loading : void 8)) {
            dependenciesLoading++;
            that.done(loadingDone).fail(loadingFailed);
          }
        }
        if (l) {
          console.error(getTime() + " [" + moduleName + "] didn't initialize (" + humanList(failedRequirements) + " " + (failedRequirements.length > 1 ? 'are' : 'is') + " required)");
          return module;
        }
        res$ = [];
        for (i$ = 0, len$ = (ref$ = optional || []).length; i$ < len$; ++i$) {
          r = ref$[i$];
          if (!r || (typeof r === 'string' && !window[r])) {
            res$.push(r);
          }
        }
        optionalRequirements = res$;
        if (optionalRequirements.length) {
          console.warn(getTime() + " [" + moduleName + "] couldn't load optional requirement" + (optionalRequirements.length > 1 && 's' || '') + ": " + humanList(optionalRequirements) + ". This module may only run with limited functionality");
        }
        if (module.help != null) {
          module.help = module.help.replace(/\n/g, "<br>\n");
        }
        if (settingsPerCommunity) {
          roomSlug = getRoomSlug();
          disabledModules = p0ne.disabledModules._rooms[roomSlug];
          module._updateRoom = function(){
            var roomSlug, module_, disabledModules, def, settingsKey;
            module.disable();
            roomSlug = getRoomSlug();
            module_ = module;
            disabledModules = p0ne.disabledModules._rooms[roomSlug];
            module.disabled = disabledModules[moduleName];
            def = $.Deferred();
            module.loading = def.promise();
            settingsKey = "p0ne__" + roomSlug + "_" + moduleName;
            dataLoad(settingsKey, _settings, function(err, _settings){
              module._settings = _settings;
              if (err) {
                console.warn("[p0ne] error loading room settings for " + moduleName, err);
              }
              def.resolve(module);
              delete module.loading;
              console.info(getTime() + " [" + moduleName + "] new room settings loaded");
            });
          };
        } else {
          disabledModules = p0ne.disabledModules;
        }
        if (moduleName in disabledModules) {
          module.disabled = disabledModules[moduleName];
        } else {
          module.disabled = disabledModules[moduleName] = !!disabled;
        }
        if (moderator && !user.isStaff && !module.disabled) {
          module.modDisabled = module.disabled = true;
        }
        if (module_ != null && module_._settings) {
          module._settings = module_._settings;
        } else if (_settings) {
          settingsKey = settingsPerCommunity
            ? "p0ne__" + roomSlug + "_" + moduleName
            : "p0ne_" + moduleName;
          dependenciesLoading++;
          dataLoad(settingsKey, _settings, function(err, _settings){
            module._settings = _settings;
            if (err) {
              console.warn("[p0ne] error loading settings for " + moduleName, err);
            }
            loadingDone();
          });
        }
        window[moduleName] = p0ne.modules[moduleName] = module;
        if (dependenciesLoading > 1) {
          def = $.Deferred();
          module.loading = def.promise();
        }
        loadingDone();
      } catch (e$) {
        e = e$;
        console.error(getTime() + " [p0ne module] error initializing '" + moduleName + "':", e.messageAndStack);
      }
      return module;
      function loadingDone(){
        var wasDisabled, e;
        if (--dependenciesLoading === 0 && 0 === failedRequirements.length) {
          delete module.loading;
          if (module.disabled) {
            if (module.modDisabled) {
              wasDisabled = ", %cbut is for moderators only";
            } else {
              wasDisabled = ", %cbut is (still) disabled";
            }
            if (def != null) {
              def.reject(module);
            }
          } else {
            wasDisabled = "%c";
            try {
              if (setup != null) {
                setup.call(module, helperFNs, module, module_);
              }
              if (def != null) {
                def.resolve(module);
              }
            } catch (e$) {
              e = e$;
              console.error(getTime() + " [" + moduleName + "] error initializing", e.messageAndStack);
              module.disable(true);
              if (def != null) {
                def.reject(module);
              }
            }
          }
          if (module_) {
            trigger('moduleUpdated');
            console.info(getTime() + " [" + moduleName + "] updated" + wasDisabled, "color: orange");
          } else {
            trigger('moduleLoaded');
            console.info(getTime() + " [" + moduleName + "] initialized" + wasDisabled, "color: orange");
          }
          if (!module.disabled) {
            trigger('moduleEnabled');
          }
          return module_ = null;
        }
      }
      function loadingFailed(){
        var ref$;
        if (def != null) {
          def.reject(module);
        }
        delete module.loading;
        return ref$ = window[moduleName], delete window[moduleName], ref$;
      }
      function trigger(type){
        if (typeof _$context != 'undefined' && _$context !== null) {
          _$context.trigger("p0ne:" + type, module, module_);
        }
        return API.trigger("p0ne:" + type, module, module_);
      }
    };
    window.loadModule = function(moduleName, url){
      var def;
      def = $.Deferred();
      if (p0ne.modules[moduleName]) {
        if (p0ne.modules[moduleName].loading) {
          console.log("[loadModule] module loading", moduleName, url);
          p0ne.modules[moduleName].loading.then(def.resolve);
        } else {
          console.log("[loadModule] module already loaded", moduleName, url);
          return def.resolve(p0ne.modules[moduleName]);
        }
      }
      window[moduleName] = p0ne.modules[moduleName] = {
        loading: def,
        disable: function(arg$, m){
          _.defer(function(){
            if (m != null && m.loading) {
              console.log("[loadModule] module loading", moduleName, url);
              p0ne.modules[moduleName].loading.then(def.resolve);
            } else if (m) {
              console.log("[loadModule] module initialized", moduleName, url);
              def.resolve(m);
            } else {
              def.reject();
            }
          });
        }
      };
      console.log("[loadModule] loading", moduleName, url);
      $.getScript(url).then(function(){
        console.log("[loadModule] script loaded", moduleName, url);
      }).fail(function(){
        console.warn("[loadModule] script failed to load", moduleName, url);
        def.reject;
      });
      return def;
    };
    /*@source p0ne.auxiliary-modules.ls */
    /**
     * Auxiliary plug_p0ne modules
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.auxiliaries-modules ~~~~~~~");
    /*####################################
    #            AUXILIARIES             #
    ####################################*/
    module('getActivePlaylist', {
      require: ['playlists'],
      module: function(){
        return playlists.findWhere({
          active: true
        });
      }
    });
    module('updateUserData', {
      require: ['user_', 'users', '_$context'],
      setup: function(arg$){
        var addListener, i$, ref$, len$, user;
        addListener = arg$.addListener;
        addListener(window.user_, 'change:username', function(){
          user.username = window.user_.get('username');
        });
        for (i$ = 0, len$ = (ref$ = users.models).length; i$ < len$; ++i$) {
          user = ref$[i$];
          user.set('joinedRoom', -1);
        }
        addListener(API, 'userJoin', function(arg$){
          var id, ref$;
          id = arg$.id;
          if ((ref$ = users.get(id)) != null) {
            ref$.set('joinedRoom', Date.now());
          }
        });
      }
    });
    module('throttleOnFloodAPI', {
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        addListener(API, 'socket:floodAPI', function(){
          /* all AJAX and Socket functions should check if the counter is AT LEAST below 20 */
          window.floodAPI_counter += 20;
          sleep(15000, function(){
            /* it is assumed, that the API counter resets every 10 seconds. 15s is to provide enough buffer */
            window.floodAPI_counter -= 20;
          });
        });
      }
    });
    module('PopoutListener', {
      require: ['PopoutView'],
      optional: ['_$context'],
      setup: function(arg$){
        var replace;
        replace = arg$.replace;
        replace(PopoutView, 'render', function(r_){
          return function(){
            r_.apply(this, arguments);
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.trigger('popout:open', PopoutView._window, PopoutView);
            }
            API.trigger('popout:open', PopoutView._window, PopoutView);
          };
        });
        replace(PopoutView, 'clear', function(c_){
          return function(){
            var err;
            console.log("[popout:clear]", this, this.clear_ === c_, c_);
            if (!this.chat) {
              return;
            }
            try {
              c_.apply(this, arguments);
            } catch (e$) {
              err = e$;
              chatWarnSmall('p0ne-error', "[p0ne] Error closing the popout: " + err.message).on('click', function(){
                console.error(err.messageAndStack);
              });
              window.error = err;
            }
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.trigger('popout:close', PopoutView._window, PopoutView);
            }
            API.trigger('popout:close', PopoutView._window, PopoutView);
          };
        });
      }
    });
    module('chatDomEvents', {
      require: ['backbone'],
      optional: ['chat', 'PopoutView', 'PopoutListener'],
      persistent: ['_events'],
      _events: [],
      setup: function(arg$){
        var addListener, cm, this$ = this;
        addListener = arg$.addListener;
        cm = (typeof chat != 'undefined' && chat !== null ? chat.$chatMessages : void 8) || $('#chat-messages');
        this.on = function(){
          var ref$;
          (ref$ = this._events)[ref$.length] = arguments;
          cm.on.apply(cm, arguments);
          if (PopoutView.chat) {
            PopoutView.chat.$el.on.apply(PopoutView.chat.$el, arguments);
          }
        };
        this.off = function(){
          var isAnyMatch, i, cb, hasMatch, i$, len$, o;
          isAnyMatch = false;
          i = -1;
          while (cb = this._events[++i]) {
            hasMatch = true;
            for (i$ = 0, len$ = arguments.length; i$ < len$; ++i$) {
              o = i$;
              if (cb[o] !== arguments[o]) {
                hasMatch = false;
                break;
              }
            }
            if (hasMatch) {
              isAnyMatch = true;
              this._events.remove(i--);
            }
          }
          if (isAnyMatch) {
            cm.off.apply(cm, arguments);
          }
        };
        this.once = function(type, callback){
          this.on(type, function(){
            this.off(type, callback);
            callback.apply(this, arguments);
          });
        };
        addListener(API, 'popout:open', function(){
          var cm, i$, ref$, len$, cb;
          cm = PopoutView.chat.$el;
          console.log("[chatDomEvents] popup opened", this$._events);
          for (i$ = 0, len$ = (ref$ = this$._events).length; i$ < len$; ++i$) {
            cb = ref$[i$];
            console.log("[chatDomEvents] adding listener", cm, cb);
            cm.on.apply(cm, cb);
          }
        });
      }
    });
    module('playlistCachePatch', {
      require: ['playlistCache'],
      setup: function(arg$){
        var replace, parse, err;
        replace = arg$.replace;
        parse = JSON.parse;
        try {
          JSON.parse = function(str){
            return playlistCache._data = parse(str);
          };
          playlistCache.ready(userID);
        } catch (e$) {
          err = e$;
          console.error("error patching playlistCache", err.messageAndStack);
        }
        JSON.parse = parse;
      }
    });
    module('playlistCacheEvent', {
      require: ['playlistCache'],
      setup: function(arg$){
        var replace;
        replace = arg$.replace;
        replace(playlistCache, 'mediaUpdate', function(mU_){
          return function(playlistID){
            mU_.call(this, playlistID);
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.trigger('p0ne:playlistCache:update', playlistID);
            }
            API.trigger('p0ne:playlistCache:update', playlistID);
          };
        });
      }
    });
    module('grabEvent', {
      require: ['votes'],
      setup: function(arg$){
        var replace;
        replace = arg$.replace;
        replace(votes, 'grab', function(g_){
          return function(uid){
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.trigger('p0ne:vote:grab', getUser(uid));
            }
            g_.call(this, uid);
            API.trigger('p0ne:vote:grab', getUser(uid));
          };
        });
      }
    });
    module('grabMedia', {
      require: ['playlists', 'auxiliaries'],
      optional: ['_$context'],
      module: function(playlistIDOrName, media, appendToEnd){
        var currentPlaylist, def, i$, ref$, len$, pl, playlist;
        currentPlaylist = playlists.get(playlists.getActiveID());
        def = $.Deferred();
        if (typeof playlistIDOrName === 'string' && !playlistIDOrName.startsWith('http')) {
          for (i$ = 0, len$ = (ref$ = playlists.models).length; i$ < len$; ++i$) {
            pl = ref$[i$];
            if (playlistIDOrName === pl.get('name')) {
              playlist = pl;
              break;
            }
          }
        } else if (!(playlist = playlists.get(playlistIDOrName))) {
          playlist = currentPlaylist;
          appendToEnd = media;
          media = playlistIDOrName;
        }
        if (!media) {
          addMedia(API.getMedia());
        } else if (media.duration || media.id) {
          addMedia(media);
        } else {
          mediaLookup(media, {
            success: addMedia,
            fail: function(err){
              console.error("[grabMedia] couldn't grab", err);
              def.reject('lookupFailed', err);
            }
          });
        }
        return def.promise();
        function addMedia(media){
          console.log("[grabMedia] add '" + media.author + " - " + media.title + "' to playlist:", playlist);
          playlist.set('syncing', true);
          media.get = function(it){
            this[it];
          };
          return ajax('POST', "playlists/" + playlist.id + "/media/insert", {
            media: auxiliaries.serializeMediaItems([media]),
            append: !!appendToEnd
          }).then(function(arg$){
            var data, e;
            data = arg$.data, e = data[0];
            if (playlist.id !== e.id) {
              console.warn("playlist mismatch", playlist.id, e.id);
              playlist.set('syncing', false);
              playlist = playlists.get(e.id) || playlist;
            }
            playlist.set('count', e.count);
            if (playlist.id === currentPlaylist.id) {
              if (typeof _$context != 'undefined' && _$context !== null) {
                _$context.trigger('PlaylistActionEvent:load', playlist.id, playlists.getActiveID() !== playlists.getVisibleID() && playlist.toArray());
              }
            }
            playlist.set('syncing', false);
            console.info("[grabMedia] successfully added to playlist");
            def.resolve(playlist.toJSON());
          }).fail(function(err){
            console.error("[grabMedia] error adding song to the playlist");
            def.reject('ajaxError', err);
          });
        }
      }
    });
    /*####################################
    #            ROOM  HELPER            #
    ####################################*/
    module('p0neModuleRoomSettingsLoader', {
      require: ['_$context'],
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        addListener(_$context, 'room:joining', function(){
          var i$, ref$, m;
          for (i$ in ref$ = p0ne.modules) {
            m = ref$[i$];
            if (m.settingsPerCommunity) {
              m._updateRoom();
            }
          }
        });
        addListener(_$context, 'room:joined', function(){
          var i$, ref$, m;
          for (i$ in ref$ = p0ne.modules) {
            m = ref$[i$];
            if (m.settingsPerCommunity && !m.disabled) {
              if (m.loading) {
                m.loading.then(fn$);
              } else {
                m.enable();
              }
            }
          }
          function fn$(){
            m.enable();
          }
        });
      }
    });
    /*####################################
    #             CUSTOM CSS             #
    ####################################*/
    module('p0neCSS', {
      optional: ['PopoutListener', 'PopoutView'],
      $popoutEl: $(),
      styles: {},
      urlMap: {},
      persistent: ['styles'],
      setup: function(arg$, arg1$, p0neCSS_){
        var addListener, $create, $el, $popoutEl, styles, urlMap, cb, throttled, loadingStyles, res, n, ref$, css, url, i;
        addListener = arg$.addListener, $create = arg$.$create;
        this.$el = $create('<style>').appendTo('head');
        $el = this.$el, $popoutEl = this.$popoutEl, styles = this.styles, urlMap = this.urlMap;
        cb = addListener(API, 'popout:open', function(_window, PopoutView){
          $popoutEl = $el.clone().loadAll(PopoutView.resizeBind).appendTo(_window.document.head);
        });
        if ((typeof PopoutView != 'undefined' && PopoutView !== null) && PopoutView._window) {
          cb();
        }
        out$.getCustomCSS = this.getCustomCSS = function(inclExternal){
          var el;
          if (inclExternal) {
            return (function(){
              var i$, ref$, len$, results$ = [];
              for (i$ = 0, len$ = (ref$ = $el).length; i$ < len$; ++i$) {
                el = ref$[i$];
                results$.push(el.outerHTML);
              }
              return results$;
            }()).join('\n');
          } else {
            return $el.first().text();
          }
        };
        throttled = false;
        out$.css = this.css = function(name, css){
          if (css == null) {
            return styles[name];
          }
          styles[name] = css;
          if (!throttled) {
            throttled = true;
            requestAnimationFrame(function(){
              var res, n, ref$, css;
              throttled = false;
              res = "";
              for (n in ref$ = styles) {
                css = ref$[n];
                res += "/*== " + n + " ==*/\n" + css + "\n\n";
              }
              $el.first().text(res);
              $popoutEl.first().text(res);
            });
          }
        };
        loadingStyles = 0;
        out$.loadStyle = this.loadStyle = function(url){
          var s;
          console.log("[loadStyle] %c" + url, "color: #009cdd");
          if (urlMap[url]) {
            return urlMap[url]++;
          } else {
            urlMap[url] = 1;
          }
          loadingStyles++;
          s = $("<link rel='stylesheet' >").attr('href', url).on('load fail', function(){
            if (--loadingStyles === 0) {
              requestAnimationFrame(function(){
                if (typeof _$context != 'undefined' && _$context !== null) {
                  _$context.trigger('p0ne:stylesLoaded');
                }
                API.trigger('p0ne:stylesLoaded');
              });
            }
          }).appendTo(document.head);
          $el.push(s[0]);
          if (typeof Layout != 'undefined' && Layout !== null) {
            Layout.onResize();
          }
          if ((typeof PopoutView != 'undefined' && PopoutView !== null) && PopoutView._window) {
            $popoutEl.push(s.clone().load(PopoutView.resizeBind).appendTo(PopoutView._window.document.head));
          }
        };
        out$.unloadStyle = this.unloadStyle = function(url){
          var i;
          if (urlMap[url] > 0) {
            urlMap[url]--;
          }
          if (urlMap[url] === 0) {
            console.log("[loadStyle] unload %c" + url, "color: #009cdd");
            delete urlMap[url];
            if (-1 !== (i = $el.indexOf("[href='" + url + "']"))) {
              $el.eq(i).remove();
              $el.splice(i, 1);
              if (typeof Layout != 'undefined' && Layout !== null) {
                Layout.onResize();
              }
            }
            if (-1 !== (i = $popoutEl.indexOf("[href='" + url + "']"))) {
              $popoutEl.eq(i).remove();
              $popoutEl.splice(i, 1);
              if ((typeof PopoutView != 'undefined' && PopoutView !== null) && PopoutView._window) {
                PopoutView.resizeBind();
              }
            }
          }
        };
        this.disable = function(){
          $el.remove();
          $popoutEl.remove();
          if (typeof Layout != 'undefined' && Layout !== null) {
            Layout.onResize();
          }
          if ((typeof PopoutView != 'undefined' && PopoutView !== null) && PopoutView._window) {
            PopoutView.resizeBind();
          }
        };
        if (p0neCSS_) {
          res = "";
          for (n in ref$ = this.styles) {
            css = ref$[n];
            res += "/*== " + n + " ==*/\n" + css + "\n\n";
          }
          if (res) {
            $el.first().text(res);
            $popoutEl.first().text(res);
          }
          for (url in ref$ = p0neCSS_.urlMap) {
            i = ref$[url];
            this.loadStyle(url);
            this.urlMap[url] = i;
          }
        }
      }
    });
    _.defer(function(){
      module('p0neNotifHelper', {
        require: ['chatDomEvents'],
        setup: function(arg$){
          var addListener;
          addListener = arg$.addListener;
          addListener(chatDomEvents, 'click', '.p0ne-notif .badge-box', function(){
            var $this;
            $this = $(this).closest('.p0ne-notif').slideUp(function(){
              $this.remove();
            });
          });
        }
      });
    });
    /*@source p0ne.perf.ls */
    /**
     * performance enhancements for plug.dj
     * the perfEmojify module also adds custom emoticons
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    module('jQueryPerf', {
      setup: function(arg$){
        var replace, core_rnotwhite;
        replace = arg$.replace;
        core_rnotwhite = /\S+/g;
        if ('classList' in document.body) {
          replace(jQuery.fn, 'addClass', function(){
            return function(value){
              var i$, len$, j, classes, i, elem, clazz;
              if (jQuery.isFunction(value)) {
                for (i$ = 0, len$ = this.length; i$ < len$; ++i$) {
                  j = this[i$];
                  jQuery(this).addClass(value.call(this, j, this.className));
                }
              } else if (typeof value === 'string' && value) {
                classes = value.match(core_rnotwhite) || [];
                i = 0;
                while (elem = this[i++]) {
                  if (elem.nodeType === 1) {
                    j = 0;
                    while (clazz = classes[j++]) {
                      elem.classList.add(clazz);
                    }
                  }
                }
              }
              return this;
            };
          });
          replace(jQuery.fn, 'removeClass', function(){
            return function(value){
              var i$, len$, j, i, elem, clazz, classes;
              if (jQuery.isFunction(value)) {
                for (i$ = 0, len$ = this.length; i$ < len$; ++i$) {
                  j = this[i$];
                  jQuery(this).removeClass(value.call(this, j, this.className));
                }
              } else if (value == null) {
                i = 0;
                while (elem = this[i++]) {
                  if (elem.nodeType === 1) {
                    j = elem.classList.length;
                    while (clazz = elem.classList[--j]) {
                      elem.classList.remove(clazz);
                    }
                  }
                }
              } else if (typeof value === 'string' && value) {
                classes = value.match(core_rnotwhite) || [];
                i = 0;
                while (elem = this[i++]) {
                  if (elem.nodeType === 1) {
                    j = 0;
                    while (clazz = classes[j++]) {
                      elem.classList.remove(clazz);
                    }
                  }
                }
              }
              return this;
            };
          });
          replace(jQuery.fn, 'hasClass', function(){
            return function(className){
              var i, elem;
              i = 0;
              while (elem = this[i++]) {
                if (elem.classList.contains(className)) {
                  return true;
                }
              }
              return false;
            };
          });
        }
      }
    });
    module('perfEmojify', {
      require: ['emoticons'],
      setup: function(arg$){
        var replace, escapeReg;
        replace = arg$.replace;
        escapeReg = function(e){
          return e.replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1");
        };
        emoticons.autoEmoteMap = {
          /*NOTE: since plug_p0ne v1.6.3, emoticons are case-sensitive */
          ">:(": 'angry',
          ">XD": 'astonished',
          ":DX": 'bowtie',
          "</3": 'broken_heart',
          ":$": 'confused',
          "X$": 'confounded',
          ":~(": 'cry',
          ":[": 'disappointed',
          ":~[": 'disappointed_relieved',
          "XO": 'dizzy_face',
          ":|": 'expressionless',
          "8|": 'flushed',
          ":(": 'frowning',
          ":#": 'grimacing',
          ":D": 'grinning',
          "<3": 'heart',
          "<3)": 'heart_eyes',
          "O:)": 'innocent',
          ":~)": 'joy',
          ":*": 'kissing',
          ":<3": 'kissing_heart',
          "X<3": 'kissing_closed_eyes',
          "XD": 'laughing',
          ":O": 'open_mouth',
          "Z:|": 'sleeping',
          ":)": 'smiley',
          ":/": 'smirk',
          "T_T": 'sob',
          ":P": 'stuck_out_tongue',
          "X-P": 'stuck_out_tongue_closed_eyes',
          ";P": 'stuck_out_tongue_winking_eye',
          "B-)": 'sunglasses',
          "~:(": 'sweat',
          "~:)": 'sweat_smile',
          "XC": 'tired_face',
          ">:/": 'unamused',
          ";)": 'wink'
        };
        emoticons.update = function(){
          var k, ref$, v, h, i$, len$, i, letter, l, tmp;
          this.reverseMap = {};
          this.trie = {};
          for (k in ref$ = this.map) {
            v = ref$[k];
            if (this.reverseMap[v]) {
              continue;
            }
            this.reverseMap[v] = k;
            h = this.trie;
            for (i$ = 0, len$ = k.length; i$ < len$; ++i$) {
              i = i$;
              letter = k[i$];
              l = h[letter];
              if (typeof h[letter] === 'string') {
                h[letter] = {
                  _list: [l]
                };
                if (l.length > i) {
                  h[letter][l[i + 1]] = l;
                }
              }
              if (l) {
                h[letter] || (h[letter] = {
                  _list: []
                });
              } else {
                h[letter] = k;
                break;
              }
              h[letter]._list = (h[letter]._list.concat(k)).sort();
              h = h[letter];
            }
          }
          for (k in ref$ = this.autoEmoteMap) {
            v = ref$[k];
            if (k !== (tmp = k.replace(/</g, "&lt;").replace(/>/g, "&gt;"))) {
              this.autoEmoteMap[tmp] = v;
              delete this.autoEmoteMap[k];
            }
          }
          this.regAutoEmote = RegExp('(^|\\s|&nbsp;)(' + Object.keys(this.autoEmoteMap).map(escapeReg).join("|") + ')(?=\\s|$)', 'g');
        };
        emoticons.update();
        replace(emoticons, 'emojify', function(){
          return function(str){
            var lastWasEmote, this$ = this;
            lastWasEmote = false;
            return str.replace(this.regAutoEmote, function(arg$, pre, emote){
              return pre + ":" + this$.autoEmoteMap[emote] + ":";
            }).replace(/:(.*?)(?=:)|:(.*)$/g, function(_, emote, post){
              var p, lastWasEmote_;
              if ((p = typeof post !== 'string') && !lastWasEmote && this$.map[emote]) {
                lastWasEmote = true;
                return "<span class='emoji-glow'><span class='emoji emoji-" + this$.map[emote] + "'></span></span>";
              } else {
                lastWasEmote_ = lastWasEmote;
                lastWasEmote = false;
                return (lastWasEmote_ ? '' : ':') + "" + (p ? emote : post);
              }
            });
          };
        });
        replace(emoticons, 'lookup', function(){
          return function(str){
            var h, res, i$, len$, i, letter, j$, to$;
            h = this.trie;
            for (i$ = 0, len$ = str.length; i$ < len$; ++i$) {
              i = i$;
              letter = str[i$];
              h = h[letter];
              switch (typeof h) {
              case 'undefined':
                return [];
              case 'string':
                for (j$ = i + 1, to$ = str.length; j$ < to$; ++j$) {
                  i = j$;
                  if (str[i] !== h[i]) {
                    return [];
                  }
                }
                return [h];
              }
            }
            return h._list;
          };
        });
      }
    });
    module('perfChat', {
      require: ['chat', 'plugUrls'],
      setup: function(arg$){
        var replace, badoop;
        replace = arg$.replace;
        badoop = new Audio(plugUrls.sfx);
        replace(chat, 'playSound', function(){
          return function(){
            badoop.currentTime = 0;
            badoop.play();
          };
        });
      }
    });
    /*@source p0ne.sjs.ls */
    /**
     * propagate Socket Events to the API Event Emitter for custom event listeners
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.socket ~~~~~~~");
    /*####################################
    #          SOCKET LISTENERS          #
    ####################################*/
    module('socketListeners', {
      require: ['socketEvents'],
      optional: ['_$context', 'auxiliaries'],
      logUnmatched: false,
      lastHandshake: 0,
      setup: function(arg$, socketListeners){
        var replace, base_url, ref$, onRoomJoinQueue2, i$, ref1$, len$;
        replace = arg$.replace;
        window.Socket || (window.Socket = window.SockJS || window.WebSocket);
        if (Socket === window.SockJS) {
          base_url = "https://shalamar.plug.dj:443/socket";
        } else {
          base_url = "wss://godj.plug.dj/socket";
        }
        if (((ref$ = window.socket) != null ? ref$.url : void 8) === base_url) {
          return;
        }
        onRoomJoinQueue2 = [];
        _$context.on('room:joined', function(){
          forEach(onRoomJoinQueue2);
          onRoomJoinQueue2 = [];
        });
        for (i$ = 0, len$ = (ref1$ = ['send', 'dispatchEvent', 'close']).length; i$ < len$; ++i$) {
          (fn$.call(this, ref1$[i$]));
        }
        function forEach(data){
          var i$, len$, el, ref$, err, results$ = [];
          for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
            el = data[i$];
            if (!((ref$ = data[0]) != null && ref$.a)) {
              console.warn("[SOCKET:WARNING] socket message format changed", t);
            }
            _$context.trigger("socket:" + el.a, el);
            if (el.s === 'dashboard' && !room.get('joined')) {
              onRoomJoinQueue2[onRoomJoinQueue2.length] = r;
            }
            if (socketEvents[el.a]) {
              try {
                socketEvents[el.a](el.p);
              } catch (e$) {
                err = e$;
                console.error(getTime() + " [Socket] failed triggering '" + el.a + "'", err.messageAndStack);
              }
            } else {
              console.error(getTime() + " [Socket] unknown event type '" + el.a + "'");
            }
            results$.push(API.trigger("socket:" + el.a, el));
          }
          return results$;
        }
        function fn$(event){
          replace(Socket.prototype, event, function(e_){
            return function(){
              var url, err, this$ = this;
              try {
                e_.apply(this, arguments);
                url = this._base_url || this.url;
                if (window.socket !== this && url === base_url) {
                  replace(window, 'socket', function(){
                    return this$;
                  });
                  replace(this, 'onmessage', function(msg_){
                    return function(t){
                      var data;
                      if (t.data === 'h') {
                        return;
                      }
                      if (typeof t.data === 'string') {
                        data = JSON.parse(t.data);
                      } else {
                        data = t.data || [];
                      }
                      forEach(data);
                    };
                  });
                  socket.emit = function(e, t, n){
                    socket.send(JSON.stringify({
                      a: e,
                      p: t,
                      t: typeof auxiliaries != 'undefined' && auxiliaries !== null ? auxiliaries.getServerEpoch() : void 8,
                      d: n
                    }));
                  };
                  /*socketListeners.hoofcheck = repeat 1.min, !->
                      if Date.now! > socketListeners.lastHandshake + 2.min
                          console.warn "the socket seems to have silently disconnected, trying to reconnect. last message", ago(socketListeners.lastHandshake)
                          reconnectSocket!*/
                  console.info("[Socket] socket patched (using ." + event + ")", this);
                } else if (socketListeners.logUnmatched && window.socket !== this) {
                  console.warn("socket found, but url differs '" + url + "'", this);
                }
              } catch (e$) {
                err = e$;
                out$.err = err;
                console.error("error when patching socket", this, err.stack);
              }
            };
          });
        }
      },
      disable: function(){
        clearInterval(this.hoofcheck);
      }
    });
    /*@source p0ne.fixes.ls */
    /**
     * Fixes for plug.dj bugs
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.fixes ~~~~~~~");
    /*####################################
    #                FIXES               #
    ####################################*/
    module('simpleFixes', {
      setup: function(arg$){
        var addListener, replace;
        addListener = arg$.addListener, replace = arg$.replace;
        this.scm = $('#twitter-menu, #facebook-menu, .shop-button').detach();
        replace($('#chat-input-field')[0], 'tabIndex', function(){
          return 1;
        });
        replace(localStorage, 'clear', function(){
          return $.noop;
        });
        addListener($('#vote'), 'click', function(){
          $('#chat-input-field').focus();
        });
        addListener(API, 'socket:reconnected', function(){
          var ref$;
          if ((app != null ? (ref$ = app.dialog.dialog) != null ? ref$.options.title : void 8 : void 8) === Lang.alerts.connectionError) {
            app.dialog.$el.hide();
          }
        });
        replace(window._, 'bind', function(bind_){
          return function(func, context){
            if (func) {
              return bind_.apply(this, arguments);
            } else {
              return null;
            }
          };
        });
      },
      disable: function(){
        var ref$;
        if ((ref$ = this.scm) != null) {
          ref$.insertAfter('#playlist-panel');
        }
      }
    });
    /*####################################
    #           USE P0 GAPI KEY          #
    ####################################*/
    module('p0neGapiKey', {
      setup: function(arg$){
        var replace, ref$;
        replace = arg$.replace;
        (ref$ = gapi.client).key || (ref$.key = 'AIzaSyCXdCG_sDuHISSSFcbUmJatH70nS9NYnTs');
        (ref$ = gapi.client).keyProvider || (ref$.keyProvider = 'plug.dj');
        replace(gapi.client, 'key', function(){
          return p0ne.YOUTUBE_V3_KEY;
        });
        replace(gapi.client, 'keyProvider', function(){
          return 'plug_p0ne';
        });
        gapi.client.setApiKey(gapi.client.key);
      },
      disableLate: function(){
        gapi.client.setApiKey(gapi.client.key);
      }
    });
    /*####################################
    #        BULLETPROOF ANIMATION       #
    ####################################*/
    module('sandboxAnimation', {
      require: ['app'],
      setup: function(arg$){
        var replace;
        replace = arg$.replace;
        replace(app, 'animate', function(a_){
          return function(){
            var err;
            try {
              a_.apply(this, arguments);
            } catch (e$) {
              err = e$;
              console.error(err.messageAndStack);
            }
          };
        });
      }
    });
    /*####################################
    #       PREVENT DOUBLE ADVANCES      #
    ####################################*/
    module('fixDoubleAdvances', {
      require: ['socketEvents'],
      setup: function(arg$){
        var replace, lastHistoryID;
        replace = arg$.replace;
        replace(socketEvents, 'advance', function(a_){
          return function(data){
            if (lastHistoryID !== data.h) {
              lastHistoryID = data.h;
              return a_.call(this, data);
            }
          };
        });
      }
    });
    /*####################################
    #        FIX MEDIA THUMBNAILS        #
    ####################################*/
    module('fixMediaThumbnails', {
      require: ['auxiliaries'],
      help: 'Plug.dj changed the Soundcloud thumbnail URL several times, but never updated the paths in their song database, so many songs have broken thumbnail images.\nThis module fixes this issue.',
      setup: function(arg$){
        var replace, $create;
        replace = arg$.replace, $create = arg$.$create;
        replace(auxiliaries, 'deserializeMedia', function(){
          return function(e){
            var ref$;
            e.author = this.h2t(e.author);
            e.title = this.h2t(e.title);
            if (e.image) {
              if (e.format === 2) {
                if ((ref$ = parseURL(e.image).host) === 'plug.dj' || ref$ === 'cdn.plug.dj') {
                  e.image = "https://i.imgur.com/41EAJBO.png";
                }
              } else {
                if (e.image.startsWith("http:") || e.image.startsWith("//")) {
                  e.image = "https:" + e.image.substr(e.image.indexOf('//'));
                }
              }
            }
          };
        });
      }
    });
    /*####################################
    #            FIX GHOSTING            #
    ####################################*/
    module('fixGhosting', {
      displayName: 'Fix Ghosting',
      require: ['PlugAjax'],
      settings: 'fixes',
      settingsMore: function(){
        return $('<toggle val=warnings>Show Warnings</toggle>');
      },
      help: 'Plug.dj sometimes considers you to be "not in any room" even though you still are. This is also called "ghosting" because you can chat in a room that technically you are not in anymore. While ghosting you can still chat, but not join the waitlist or moderate. If others want to @mention you, you don\'t show up in the autocomplete.\n\ntl;dr this module automatically rejoins the room when you are ghosting',
      _settings: {
        verbose: true
      },
      setup: function(arg$){
        var replace, addListener, _settings, rejoining, queue, rejoinRoom;
        replace = arg$.replace, addListener = arg$.addListener;
        _settings = this._settings;
        rejoining = false;
        queue = [];
        addListener(API, 'socket:userLeave', function(arg$){
          var p;
          p = arg$.p;
          if (p === userID) {
            sleep(200, function(){
              rejoinRoom('you left the room');
            });
          }
        });
        replace(PlugAjax.prototype, 'onError', function(oE_){
          return function(code, e){
            if (e.status === 'notInRoom') {
              queue[queue.length] = this;
              rejoinRoom("got 'notInRoom' error from plug", true);
            } else {
              oE_.call(this, e);
            }
          };
        });
        out$.rejoinRoom = rejoinRoom = function(reason, throttled){
          var this$ = this;
          if (rejoining && throttled) {
            console.warn("[fixGhosting] You are still ghosting, retrying to connect.");
          } else {
            console.warn("[fixGhosting] You are ghosting!", "Reason: " + reason);
            rejoining = true;
            ajax('POST', 'rooms/join', {
              slug: getRoomSlug()
            }, {
              success: function(data){
                var ref$, i$, ref1$, len$, req;
                if (((ref$ = data.responseText) != null ? ref$[0] : void 8) === "<") {
                  if (data.responseText.has("You have been permanently banned from plug.dj")) {
                    chatWarn("your account got permanently banned. RIP", "fixGhosting");
                  } else {
                    chatWarn("cannot rejoin the room. Plug is acting weird, maybe it is in maintenance mode or you got IP banned?", "fixGhosting");
                  }
                } else {
                  if (_settings.verbose) {
                    chatWarn("reconnected to the room", "fixGhosting");
                  }
                  for (i$ = 0, len$ = (ref1$ = queue).length; i$ < len$; ++i$) {
                    req = ref1$[i$];
                    req.execute();
                  }
                  rejoining = false;
                  if (typeof _$context != 'undefined' && _$context !== null) {
                    _$context.trigger('p0ne:reconnected');
                  }
                  API.trigger('p0ne:reconnected');
                }
              },
              error: function(data){
                var statusCode, responseJSON, status;
                statusCode = data.statusCode, responseJSON = data.responseJSON;
                status = responseJSON != null ? responseJSON.status : void 8;
                switch (status) {
                case 'ban':
                  chatWarn("you are banned from this community", "fixGhosting");
                  break;
                case 'roomCapacity':
                  chatWarn("the room capacity is reached :/", "fixGhosting");
                  break;
                case 'notAuthorized':
                  chatWarn("you got logged out", "fixGhosting");
                  break;
                default:
                  switch (statusCode) {
                  case 401:
                    chatWarn("unexpected permission error while rejoining the room.", "fixGhosting");
                    break;
                  case 503:
                    chatWarn("plug.dj is in mainenance mode. nothing we can do here", "fixGhosting");
                    break;
                  case 521:
                  case 522:
                  case 524:
                    chatWarn("plug.dj is currently completly down", "fixGhosting");
                    break;
                  default:
                    chatWarn("cannot rejoin the room, unexpected error " + statusCode + " (" + datastatus + ")", "fixGhosting");
                  }
                }
                sleep(10 .min, function(){
                  rejoining = false;
                });
              }
            });
          }
        };
      }
    });
    /*####################################
    #        FIX OTHERS GHOSTING         #
    ####################################*/
    module('fixOthersGhosting', {
      require: ['users', 'socketEvents'],
      displayName: "Fix Other Users Ghosting",
      settings: 'fixes',
      settingsMore: function(){
        return $('<toggle val=warnings>Show Warnings</toggle>');
      },
      help: 'Sometimes plug.dj does not properly emit join notifications, so that clients don\'t know another user joined a room. Thus they appear as "ghosts", as if they were not in the room but still can chat\n\nThis module detects "ghost" users and force-adds them to the room.',
      _settings: {
        verbose: true
      },
      setup: function(arg$){
        var addListener, css, this$ = this;
        addListener = arg$.addListener, css = arg$.css;
        addListener(API, 'chat', function(d){
          if (d.uid && !users.get(d.uid)) {
            console.info("[fixOthersGhosting] seems like '" + d.un + "' (" + d.uid + ") is ghosting");
            ajax('GET', "rooms/state").then(function(data){
              var i$, ref$, len$, yet$, i, u;
              for (yet$ = true, i$ = 0, len$ = (ref$ = data[0].users).length; i$ < len$; ++i$) {
                i = i$;
                u = ref$[i$];
                yet$ = false;
                if (!users.get(u.id)) {
                  socketEvents.userJoin(u);
                  if (this$._settings.verbose) {
                    chatWarn("force-joined #" + i + " " + d.un + " (" + d.uid + ") to the room", "p0ne");
                  }
                }
              } if (yet$) {
                ajax('GET', "users/" + d.uid, fn$);
              }
              function fn$(data){
                data.role = -1;
                socketEvents.userJoin(data);
                if (this$._settings.verbose) {
                  chatWarn(d.un + " (" + d.uid + ") is ghosting", "p0ne");
                }
              }
            }).fail(function(){
              console.error("[fixOthersGhosting] cannot load room data:", status, data);
              console.error("[fixOthersGhosting] cannot load user data:", status, data);
            });
          }
        });
      }
    });
    /*####################################
    #            FIX STUCK DJ            #
    ####################################*/
    module('fixStuckDJ', {
      require: ['socketEvents'],
      optional: ['votes'],
      displayName: "Fix Stuck Advance",
      settings: 'fixes',
      settingsMore: function(){
        return $('<toggle val=warnings>Show Warnings</toggle>');
      },
      help: 'Sometimes plug.dj does not automatically start playing the next song. Usually you would have to reload the page to fix this bug.\n\nThis module detects stuck advances and automatically force-loads the next song.',
      _settings: {
        verbose: true
      },
      tries: 0,
      MAX_TRIES: 10,
      setup: function(arg$, fixStuckDJ){
        var replace, addListener, this$ = this;
        replace = arg$.replace, addListener = arg$.addListener;
        if (API.getTimeRemaining() === 0 && API.getMedia()) {
          this.timer = sleep(5000, fixStuckDJ);
        }
        addListener(API, 'advance', function(d){
          console.log(getTime() + " [API.advance]");
          clearTimeout(this$.timer);
          if (d.media) {
            this$.timer = sleep(d.media.duration * 1000 + 2000, fixStuckDJ);
          }
        });
      },
      module: function(){
        var fixStuckDJ, showWarning, m, this$ = this;
        fixStuckDJ = this;
        if (showWarning = API.getTimeRemaining() === 0) {
          console.warn("[fixNoAdvance] song seems to be stuck, trying to fix…");
        }
        m = API.getMedia() || {};
        ajax('GET', 'rooms/state', {
          error: function(data){
            console.error("[fixNoAdvance] cannot load room data:", status, data);
            if (!this$.disabled && this$.tries < this$.MAX_TRIES) {
              this$.timer = sleep(10000, fixStuckDJ);
            } else {
              this$.tries = 0;
            }
          },
          success: function(data){
            var ref$, ref1$, ref2$, uid, i, v;
            this$.tries = 0;
            (ref$ = data[0]).playback || (ref$.playback = {});
            if (m.id === ((ref$ = data[0].playback) != null ? (ref1$ = ref$.media) != null ? ref1$.id : void 8 : void 8)) {
              console.log("[fixNoAdvance] the same song is still playing.");
            } else {
              (ref2$ = data[0]).playback || (ref2$.playback = {});
              socketEvents.advance({
                c: data[0].booth.currentDJ,
                d: data[0].booth.waitingDJs,
                h: data[0].playback.historyID,
                m: data[0].playback.media,
                t: data[0].playback.startTime,
                p: data[0].playback.playlistID
              });
              if (typeof votes != 'undefined' && votes !== null) {
                for (uid in data[0].grabs) {
                  votes.grab(uid);
                }
                for (i in ref2$ = data[0].votes) {
                  v = ref2$[i];
                  votes.vote({
                    i: i,
                    v: v
                  });
                }
              } else {
                console.warn("[fixNoAdvance] cannot properly set votes, because optional requirement `votes` is missing");
              }
              if (this$._settings.verbose && showWarning) {
                chatWarn("fixed DJ not advancing", "p0ne");
              }
            }
          }
        });
      }
    });
    /*####################################
    #         FIX PLAYLIST CYCLE         #
    ####################################*/
    /*
    module \fixNoPlaylistCycle, do
        require: <[ _$context ActivateEvent ]>
        displayName: "Fix No Playlist Cycle"
        settings: \fixes
        settingsMore: !-> return $ '<toggle val=warnings>Show Warnings</toggle>'
        help: '''
            Sometimes after DJing, plug.dj does not move the played song to the bottom of the playlist.
    
            This module automatically detects this bug and moves the song to the bottom.
        '''
        _settings:
            verbose: true
        setup: ({addListener}) !->
            addListener API, \socket:reconnected, !->
                _$context.dispatch new LoadEvent(LoadEvent.LOAD)
                _$context.dispatch new ActivateEvent(ActivateEvent.ACTIVATE)
            / *
            # manual check
            addListener API, \advance, ({dj, lastPlay}) !~>
                #ToDo check if spelling is correctly
                #ToDo get currentPlaylist
                if dj?.id == userID and lastPlay.media.id == currentPlaylist.song.id
                    #_$context .trigger \MediaMoveEvent:move
                    ajax \PUT, "playlists/#{currentPlaylist.id}/media/move", ids: [lastPlay.media.id], beforeID: 0
                    chatWarn "fixed playlist not cycling", "p0ne" if @_settings.verbose
            * /
    */
    /*####################################
    #         FIX STUCK DJ BUTTON        #
    ####################################*/
    module('fixStuckDJButton', {
      settings: 'fixes',
      displayName: 'Fix Stuck DJ Button',
      require: ['_$context'],
      setup: function(arg$){
        var addListener, $djbtn, fixTimeout;
        addListener = arg$.addListener;
        $djbtn = $('#dj-button');
        fixTimeout = false;
        addListener(_$context, 'djButton:update', function(){
          var spinning;
          spinning = $djbtn.find('.spinner').length === 0;
          if (fixTimeout && spinning) {
            clearTimeout(fixTimeout);
          } else if (!fixTimeout) {
            fixTimeout = sleep(5000, function(){
              fixTimeout = false;
              if ($djbtn.find('.spinner').length !== 0) {
                console.log("[djButton:update] force joining", true, fixTimeout);
                ajax('GET', 'rooms/state', function(d){
                  d = d.data[0];
                  if (d.currentDJ === userID || d.waitingDJs.lastIndexOf(userID) !== -1) {
                    chatWarn("fixing stuck the DJ button", "fixStuckDJButton");
                    forceJoin();
                  }
                });
              }
            });
          }
        })();
      }
    });
    /*####################################
    #              ZALGO FIX             #
    ####################################*/
    module('zalgoFix', {
      settings: 'fixes',
      displayName: 'Fix Zalgo Messages',
      help: 'This avoids messages\' text bleeding out of the message, as it is the case with so called "Zalgo" messages.\nEnable this if you are dealing with spammers in the chat who use Zalgo.',
      setup: function(arg$){
        var css;
        css = arg$.css;
        css('zalgoFix', '.message {overflow: hidden;}');
      }
    });
    /*####################################
    #           WARN ON ADBLOCK          #
    ####################################*/
    module('warnOnAdblockPopoutBlock', {
      require: ['PopoutListener'],
      setup: function(arg$){
        var addListener, isOpen, warningShown;
        addListener = arg$.addListener;
        isOpen = false;
        warningShown = false;
        addListener(API, 'popout:open', function(_window, PopoutView){
          isOpen = true;
          sleep(1000, function(){
            isOpen = false;
          });
        });
        addListener(API, 'popout:close', function(_window, PopoutView){
          if (isOpen && !warningShown) {
            chatWarn("Popout chat immediately closed again. This might be because of an adblocker. You'd have to make an exception for plug.dj or disable your adblocker. Specifically Adblock Plus is known for causing this problem", "p0ne");
            warningShown = true;
            sleep(15 .min, function(){
              warningShown = false;
            });
          }
        });
      }
    });
    /*####################################
    #           CHAT EMOJI FIX           #
    ####################################*/
    /*module \chatEmojiPolyfill, do
        require: <[ users ]>
        #optional: <[ chatPlugin socketEvents database ]> defined later
        _settings:
            verbose: true
        fixedUsernames: {}
        originalNames: {}
        setup: ({addListener, replace}) !-> _.defer !~>
            /*@security HTML injection should NOT be possible * /
            /* Emoji-support detection from Modernizr https://github.com/Modernizr/Modernizr/blob/master/feature-detects/emoji.js * /
            try
                pixelRatio = window.devicePixelRatio || 1; offset = 12 * pixelRatio
                document.createElement \canvas .getContext \2d
                    ..fillStyle = \#f00
                    ..textBaseline = \top
                    ..font = '32px Arial'
                    ..fillText '\ud83d\udc28', 0px, 0px # U+1F428 KOALA
                    if ..getImageData(offset, offset, 1, 1).data[0] != 0
                        console.info "[chatPolyfixEmoji] emojicons appear to be natively supported. fix will not be applied"
                        @disable!
                    else
                        console.info "[chatPolyfixEmoji] emojicons appear to NOT be natively supported. applying fix…"
                        css \chatPolyfixEmoji, '
                            .emoji {
                                position: relative;
                                display: inline-block;
                            }
                        '
                        # cache usernames that require fixing
                        # note: .rawun is used, because it's already HTML escaped
                        for u in users?.models ||[] when (tmp=emojifyUnicode u.get(\rawun)) != (original=u.get \rawun)
                            console.log "\t[chatPolyfixEmoji] fixed username from '#original' to '#{unemojify tmp}'" if @_settings.verbose
                            u.set \rawun, @fixedUsernames[u.id] = tmp
                            @originalNames[u.id] = original
                            # ooooh dangerous dangerous :0
                            # (not with regard to security, but breaking other scripts)
                            # (though .rawun should only be used for inserting HTML)
                            # i really hope this doesn't break anything :I
                            #                                   --Brinkie 2015
                        if @fixedUsernames[userID]
                            user.rawun = @fixedUsernames[userID]
                            userRegexp = //@#{user.rawun}//g
    
    
                        if _$context?
                            # fix joining users
                            addListener _$context, \user:join, (u) !~>
                                if  (tmp=emojifyUnicode u.get(\rawun)) != (original=u.get \rawun)
                                    console.log "[chatPolyfixEmoji] fixed username '#original' => '#{unemojify tmp}'" if @_settings.verbose
                                    u.set \rawun, @fixedUsernames[u.id] = tmp
                                    @originalNames[u.id] = original
    
                            # prevent memory leak
                            addListener _$context, \user:leave, (u) !~>
                                delete @fixedUsernames[u.id]
                                delete @originalNames[u.id]
    
                            # fix incoming messages
                            addListener _$context, \chat:plugin, (msg) !~>
                                # fix the message body
                                if msg.uid and msg.message != (tmp = emojifyUnicode(msg.message))
                                    console.log "\t[chatPolyfixEmoji] fixed message '#{msg.message}' to '#{unemojify tmp}'" if @_settings.verbose
                                    msg.message = tmp
    
                                    # fix the username
                                    if @fixedUsernames[msg.uid]
                                        # usernames may not contain HTML, also .rawun is HTML escaped.
                                        # The HTML that's added by the emoji fix is considered safe
                                        # we modify it, so that the sender's name shows up fixed in the chat
                                        msg.un_ = msg.un
                                        msg.un = that
    
                                    if userRegexp?
                                        userRegexp.lastIndex = 0
                                        if userRegexp.test msg.message
                                            console.log "\t[chatPolyfixEmoji] fix mention"
                                            msg.type = \mention
                                            msg.sound = \mention if database?.settings.chatSound
                                            msg.[]mentions.push "@#{user.rawun}"
                            # as soon as possible, we have to restore the sender's username again
                            # otherwise other modules might act weird, such as disableCommand
                            addListener \early, API, \chat, (msg) !->
                                if msg.un_
                                    msg.un = msg.un_
                                    delete msg.un_
    
                            # fix users on name changes
                            addListener _$context, \socket:userUpdate, (u) !~>
                                # note: this gets called BEFORE userUpdate is natively processed
                                # so changes to `u` will be applied
                                delete @fixedUsernames[u.id]
                                if (tmp=emojifyUnicode u.rawun) != u.rawun
                                    console.log "[chatPolyfixEmoji] fixed username '#{u.rawun}' => '#{unemojify tmp}'" if @_settings.verbose
                                    u.rawun = @fixedUsernames[u.id] = tmp
                                    if u.id == userID
                                        user.rawun = @fixedUsernames[userID]
                                        userRegexp := //@#{user.rawun}//g
            catch err
                console.error "[chatPolyfixEmoji] error", err.stack
        disable: !->
            for uid, original of @originalNames
                getUserInternal(uid)? .set \rawun, original
            if @originalNames[userID]
                user.rawun = @originalNames[userID]
    */
    /*####################################
    #        STOP SUBSCRIBER SPAM        #
    ####################################*/
    module('stopSubscriberSpam', {
      displayName: "Stop Subscriber Spam",
      settings: 'fixes',
      require: ['_$context'],
      setup: function(arg$){
        var replace_$Listener;
        replace_$Listener = arg$.replace_$Listener;
        return replace_$Listener('chat:nonsubimage', function(){
          return $.noop;
        });
      }
    });
    /*####################################
    #          YT PAGED SEARCH           #
    ####################################*/
    /* The paginated search was removed on plug.dj on purpose, because searches use up quite a lot of
     * the Youtube API quota that plug.dj has. Limiting the search results is to avoid running out of quota.
     * This is not an issue with plug_p0ne, because plug_p0ne replaces the API key with plug_p0ne's own,
     * so that the plug.dj quota won't be used up.
     */
    module('ytPagedSearch', {
      displayName: "More Search-Results",
      settings: 'fixes',
      require: ['searchManager', 'searchAux', 'SearchList', 'YtSearchService'],
      optional: ['pl'],
      help: "Usually plug.dj only shows 50 results when doing a Youtube search.<br>With this module, more results are loaded when you scroll to the bottom of the results.",
      setup: function(arg$){
        var replace, ref$;
        replace = arg$.replace;
        replace(SearchList.prototype, 'onScroll', function(){
          return function(){
            if (!this.searching && this.collection.length < 200 && searchManager.lastCount > 0 && this.scrollPane.getPercentScrolledY() > 0.97) {
              this.searching = !0;
              searchManager.collection = this.collection;
              if (searchManager.more()) {
                this.showRowSpinner();
              } else {
                this.hideRowSpinner();
              }
            }
          };
        });
        if (pl != null) {
          if ((ref$ = pl.list) != null) {
            ref$.scrollBind = bind$(pl, 'onScroll');
          }
        }
        replace(searchManager, 'more', function(){
          return function(){
            if (!this.relatedSearch && this.lastCount > 0 && this.collection.length < 200) {
              ++this.page;
              if (!this.scFavoritesLookup && !this.scTracksLookup) {
                this._search();
              } else if (this.scFavoritesLookup) {
                this.loadSCFavorites(this.page);
              } else if (this.scTracksLookup) {
                this.loadSCTracks(this.page);
              }
              return true;
            } else {
              return false;
            }
          };
        });
        replace(searchManager, '_search', function(){
          return function(){
            var limit, ref$;
            limit = (ref$ = pl != null ? pl.visibleRows : void 8) > 50 ? ref$ : 50;
            console.log("[_search]", this.lastQuery, this.page, limit);
            if (this.lastFormat === 1) {
              searchAux.ytSearch(this.lastQuery, this.page, limit, this.ytBind);
            } else if (this.lastFormat === 2) {
              searchAux.scSearch(this.lastQuery, this.page, limit, this.scBind);
            }
          };
        });
        replace(searchAux, 'ytSearch', function(){
          return function(query, page, limit, callback){
            this.ytSearchService || (this.ytSearchService = new YtSearchService);
            this.ytSearchService.load(query, page, limit, callback);
          };
        });
        replace(YtSearchService.prototype, 'load', function(){
          return function(query, page, limit, callback){
            var this$ = this;
            this.nextPage = page + 1;
            this.lastQuery = query;
            this.callback = callback;
            gapi.client.youtube.search.list({
              q: query,
              part: 'snippet',
              fields: 'nextPageToken,items(id/videoId,snippet/title,snippet/thumbnails,snippet/channelTitle)',
              maxResults: limit,
              pageToken: page !== 1 && query === this.lastQuery ? this.nextPageToken : null,
              videoEmbeddable: !0,
              videoDuration: 'any',
              type: 'video',
              safeSearch: 'none',
              videoSyndicated: "true"
            }).then(function(e){
              this$.nextPageToken = e.result.nextPageToken;
              return this$.onList(e);
            }, this.errorBind);
          };
        });
      }
    });
    /*####################################
    #            FIX PLAYLIST            #
    ####################################*/
    module('fixPlaylists', {
      help: 'This fixes some issues with the playlist drawer.<ul><li>right clicking on a playlist\'s name opens it</li><li>releasing the middle mouse button (scroll wheel) over a playlist\'s name opens it</li></ul>',
      require: ['PlaylistListRow'],
      setup: function(arg$){
        var replace;
        replace = arg$.replace;
        replace(PlaylistListRow.prototype.events, 'click', function(){
          return PlaylistListRow.prototype.events.mouseup;
        });
        replace(PlaylistListRow.prototype.events, 'mouseup', function(){
          return function(){
            var ref$;
            if ((ref$ = this.options.parent.selectedRows) != null && ref$.length) {
              this.onRowRelease();
            }
          };
        });
        if (typeof playlists != 'undefined' && playlists !== null) {
          playlists.sort();
        }
      }
    });
    /*####################################
    #          FIX POPOUT CLOSE          #
    ####################################*/
    module('fixPopoutChatClose', {
      require: ['PopoutListener'],
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        addListener(API, 'popout:open', function(window_){
          window_.onbeforeunload = bind$(PopoutView, 'close');
        });
      }
    });
    /*####################################
    #            FIX NULL USER           #
    ####################################*/
    /*
    module \fixNullUser, do
        settings: \fixes
        require: <[ _$context ]>
        disabled: true
        setup: ({addListener, replace}) !->
            addListener _$context, \user:join, cb = (u) !->
                if u.get(\rawun) == null
                    console.info "fixed null user", u.id
                    name = "null (#{u.id})"
                    u.set \username, name
                    u.set \rawun, name
                    u.set \language, \en
                    u.set \slug, \null
            if users?
                do addListener _$context, \ack, !->
                    sleep 2_000ms, !->
                        for u in users.models
                            cb(u)
    */
    /*####################################
    #           PL CACHE UPDATE          #
    ####################################*/
    module('playlistCacheUpdate', {
      require: ['playlistCache', 'playlistCachePatch', 'eventMap'],
      setup: function(arg$){
        var replace, ref$, ref1$, ref2$, ref3$, ref4$, ref5$;
        replace = arg$.replace;
        replace((ref$ = eventMap.eventTypeMap['MediaActionEvent:add']) != null ? (ref1$ = ref$[0]) != null ? ref1$.prototype : void 8 : void 8, 'onSuccess', function(oS_){
          return function(e){
            var pl, i$, ref$, len$, m;
            console.log("[MediaActionEvent:add:onSuccess]", e, this.event);
            if (pl = playlistCache._data[1].p[e.id]) {
              for (i$ = 0, len$ = (ref$ = this.event.items).length; i$ < len$; ++i$) {
                m = ref$[i$];
                pl.items[m.get('cid')] = true;
              }
            }
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.trigger('p0ne:playlistCache:update', e.id);
            }
            oS_.call(this, e);
            API.trigger('p0ne:playlistCache:update', e.id);
          };
        });
        replace((ref2$ = eventMap.eventTypeMap['MediaInsertEvent:insert']) != null ? (ref3$ = ref2$[0]) != null ? ref3$.prototype : void 8 : void 8, 'onSuccess', function(oS_){
          return function(e){
            var pl, i$, ref$, len$, m;
            if (pl = playlistCache._data[1].p[e.id]) {
              for (i$ = 0, len$ = (ref$ = this.event.items).length; i$ < len$; ++i$) {
                m = ref$[i$];
                pl.items[m.get('cid')] = true;
              }
            }
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.trigger('p0ne:playlistCache:update', e.id);
            }
            oS_.call(this, e);
            API.trigger('p0ne:playlistCache:update', e.id);
          };
        });
        replace((ref4$ = eventMap.eventTypeMap['PlaylistCreateEvent:create']) != null ? (ref5$ = ref4$[0]) != null ? ref5$.prototype : void 8 : void 8, 'onSuccess', function(oS_){
          return function(e){
            var event, pl, i$, ref$, len$, m;
            event = this.event;
            if (event.items) {
              if (typeof _$context != 'undefined' && _$context !== null) {
                _$context.trigger('p0ne:playlistCache:update', e.id);
              }
              oS_.call(this, e);
              if (pl = playlistCache._data[1].p[e.id]) {
                for (i$ = 0, len$ = (ref$ = event.items).length; i$ < len$; ++i$) {
                  m = ref$[i$];
                  pl.items[m.get('cid')] = true;
                }
              }
              API.trigger('p0ne:playlistCache:update', e.id);
            } else {
              oS_.call(this, e);
            }
          };
        });
      }
    });
    /*@source p0ne.stream.ls */
    /**
     * Modules for Audio-Only stream and stream settings for plug_p0ne
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
    */
    /* This modules includes the following things:
        - audio steam
        - a stream-settings field in the playback-controls (replacing the HD-button)
        - a blocked-video-unblocker
       These are all conbined into this one module to avoid conflicts
       and due to them sharing a lot of code
    */
    /*####################################
    #           STREAM SETTINGS          #
    ####################################*/
    module('streamSettings', {
      settings: 'dev',
      displayName: 'Stream-Settings',
      require: ['app', 'Playback', 'currentMedia', 'database', '_$context'],
      optional: ['database', 'plugUrls'],
      _settings: {
        audioOnly: false
      },
      setup: function(arg$, streamSettings, m_){
        var addListener, replace, revert, replaceListener, $create, css, $playback, $playbackContainer, $el, playback, $btn, $label, $icons, disabledBtns, Player, audio, unblocker, i$, ref$, youtube, sc, DummyPlayer, noDJ, syncingPlayer, streamOff, snoozed, m, player, this$ = this;
        addListener = arg$.addListener, replace = arg$.replace, revert = arg$.revert, replaceListener = arg$.replaceListener, $create = arg$.$create, css = arg$.css;
        css('streamSettings', ".icon-stream-video {background: " + getIcon('icon-chat-sound-on').background + ";}.icon-stream-audio {background: " + getIcon('icon-chat-room').background + ";}.icon-stream-off {background: " + getIcon('icon-chat-sound-off').background + ";}");
        $playback = $('#playback');
        $playbackContainer = $('#playback-container');
        $el = $create('<div class=p0ne-stream-select>');
        playback = {};
        if (m_ != null && m_._settings) {
          this._settings.audioOnly = m_._settings.audioOnly;
        }
        $('#playback-controls').removeClass('no-hd snoozed');
        replace(Playback.prototype, 'onHDClick', function(){
          return $.noop;
        });
        $btn = $('#playback .hd').addClass('p0ne-stream-select');
        this.$btn_ = $btn.children();
        $btn.html('<div class="box"><span id=p0ne-stream-label></span><div class="p0ne-stream-buttons"><i class="icon icon-stream-video enabled"></i> <i class="icon icon-stream-audio enabled"></i> <i class="icon icon-stream-off enabled"></i> <div class="p0ne-stream-fancy"></div></div></div>');
        this.$label = $label = $btn.find('#p0ne-stream-label');
        $icons = $btn.find('.icon');
        disabledBtns = {};
        function disableBtn(mode){
          var $icon;
          disabledBtns[mode] = true;
          return $icon = $btn.find(".icon-stream-" + mode).removeClass('enabled');
        }
        addListener(API, 'advance', function(d){
          var mode;
          if (d.media) {
            for (mode in disabledBtns) {
              $btn.find(".icon-stream-" + mode).addClass('enabled');
              delete disabledBtns[mode];
            }
            if (d.media.format === 2) {
              disableBtn('video');
            }
          }
        });
        $btn.find('.icon-stream-video').on('click', function(){
          if (!disabledBtns.video) {
            database.settings.streamDisabled = false;
            this$._settings.audioOnly = false;
            changeStream('video');
            refresh();
          }
        });
        $btn.find('.icon-stream-audio').on('click', function(){
          var ref$;
          if (!disabledBtns.audio) {
            database.settings.streamDisabled = false;
            if (2 !== ((ref$ = currentMedia.get('media')) != null ? ref$.get('format') : void 8)) {
              this$._settings.audioOnly = true;
            }
            changeStream('audio');
            refresh();
          }
        });
        $btn.find('.icon-stream-off').on('click', function(){
          database.settings.streamDisabled = true;
          changeStream('off');
          refresh();
        });
        Player = {
          enable: function(){
            var media;
            console.log("[StreamSettings] loading " + this.name + " stream");
            media = currentMedia.get('media');
            if (this.media === media && this === player) {
              this.start();
            } else {
              this.media = media;
              this.getURL(media);
            }
          }
          /*getURL: !->
              ...
              @media.src = ...
              @start!*/,
          start: function(){
            this.seek();
            this.src = this.media.src;
            this.load();
            this.updateVolume(currentMedia.get('volume'));
            $playbackContainer.append(this);
          },
          disable: function(){
            this.src = "";
            $playbackContainer.empty();
          },
          seek: function(){
            var startTime;
            startTime = currentMedia.get('elapsed');
            if (player !== this) {
              return;
            } else if (startTime > 4 && currentMedia.get('remaining') > 4) {
              this.seekTo(startTime);
              console.log("[StreamSettings] " + this.name + " seeking…", mediaTime(startTime));
            } else {
              this.play();
            }
          },
          seekTo: function(t){
            this.currentTime = t;
          },
          updateVolume: function(vol){
            this.volume = vol / 100;
          }
        };
        audio = (m_ != null ? m_.audio : void 8) || new Audio();
        unblocker = (m_ != null ? m_.audio : void 8) || document.createElement('video');
        $([unblocker, audio]).addClass('media');
        for (i$ in ref$ = {
          audio: audio,
          unblocker: unblocker
        }) {
          (fn$.call(this, i$, ref$[i$]));
        }
        audio.name = "Audio-Only";
        audio.mode = 'audio';
        audio.getURL = function(media){
          var this$ = this;
          mediaDownload(media, true).then(function(d){
            console.log("[audioStream] found url. Buffering…", d);
            audio.media = media;
            media.src = d.preferredDownload.url;
            this$.enable();
          }).fail(function(err){
            console.error("[audioStream] couldn't get audio-only stream", err);
            chatWarn("couldn't load audio-only stream, using video instead", "audioStream", true);
            media.audioFailed = true;
            refresh();
            disableBtn('audio');
            $playback.addClass('p0ne-stream-audio-failed');
            API.once('advance', function(){
              $playback.addClass('p0ne-stream-audio-failed');
            });
          });
        };
        /*not working*/
        unblocker.name = "Youtube (unblocked)";
        unblocker.mode = 'video';
        unblocker.getURL = function(media){
          var blocked, this$ = this;
          console.log("[YT Unblocker] receiving video URL", media);
          blocked = media.get('blocked');
          mediaDownload(media).then(function(d){
            media.src = d.preferredDownload.url;
            console.log("[YT Unblocker] got video URL", media.src);
            this$.start();
          }).fail(function(){
            media.set('blocked', blocked++);
            if (blocked === 2) {
              chatWarn("failed, trying again…", "YT Unblocker");
              refresh();
            } else {
              chatWarn("failed to unblock video :(", "YT Unblocker");
              disableBtn('video');
            }
          });
        };
        youtube = (ref$ = clone$(Player), ref$.name = "Video", ref$.mode = 'video', ref$.enable = function(media){
          var startTime;
          this.media = media;
          console.log("[StreamSettings] loading Youtube stream");
          startTime = currentMedia.get('elapsed');
          playback.buffering = false;
          playback.yto = {
            id: media.get('cid'),
            volume: currentMedia.get('volume'),
            seek: startTime < 4 ? 0 : startTime,
            quality: database.hdVideo ? 'hd720' : ""
          };
          $("<iframe id=yt-frame frameborder=0 src='//plgyte.appspot.com/yt5.html'>").load(playback.ytFrameLoadedBind).appendTo(playback.$container);
        }, ref$.disable = function(){
          $playbackContainer.empty();
        }, ref$.updateVolume = function(vol){
          playback.tx("setVolume=" + vol);
        }, ref$);
        sc = (ref$ = clone$(Player), ref$.name = "SoundCloud", ref$.mode = 'audio', ref$.enable = function(media){
          var b;
          this$.media = media;
          console.log("[StreamSettings] loading Soundcloud audio stream");
          if (soundcloud.r) {
            if (soundcloud.sc) {
              playback.$container.empty().append("<iframe id=yt-frame frameborder=0 src='" + playback.visualizers.random() + "'></iframe>");
              b = setTimeout(playback.scTimeoutBind, 5000);
              soundcloud.sc.whenStreamingReady(function(){
                soundcloud.sc.stream(media.get('cid'), {
                  autoPlay: true
                }, function(e){
                  var startTime;
                  clearTimeout(b);
                  if (media !== currentMedia.get('media')) {
                    return e.stop();
                  }
                  playback.player = e;
                  startTime = currentMedia.get('elapsed');
                  e.seek(startTime < 4
                    ? 0
                    : startTime * 1000);
                  e.setVolume(currentMedia.get('volume') / 100);
                  e._player.on('stateChange', playback.scStateBind);
                });
              });
            } else {
              playback.$container.append($('<img src="https://soundcloud-support.s3.amazonaws.com/images/downtime.png" height="271"/>').css({
                position: 'absolute',
                left: 46
              }));
            }
          } else {
            if (this$.SCReadyCB) {
              _$context.off('sc:ready', this$.SCReadyCB);
            }
            _$context.once('sc:ready', this$.SCReadyCB = function(){
              soundcloud.updateVolume(currentMedia.get('volume'));
              if (media === currentMedia.get('media')) {
                playback.onSCReady();
              } else {
                console.warn("[StreamSettings] Soundcloud: a different song already started playing");
              }
            });
          }
        }, ref$.disable = function(){
          var ref$;
          if ((ref$ = playback.player) != null) {
            ref$.stop();
          }
          playback.buffering = false;
          $playbackContainer.empty();
        }, ref$.updateVolume = function(vol){
          playback.player.setVolume(vol / 100);
        }, ref$);
        DummyPlayer = {
          enable: $.noop,
          disable: $.noop,
          updateVolume: $.noop
        };
        noDJ = (ref$ = clone$(DummyPlayer), ref$.name = "No DJ", ref$.mode = 'off', ref$.enable = function(){
          playback.$noDJ.show();
          playback.$controls.hide();
        }, ref$.disable = function(){
          playback.$noDJ.hide();
        }, ref$);
        syncingPlayer = (ref$ = clone$(DummyPlayer), ref$.name = "waiting…", ref$.mode = 'off', ref$.enable = function(){
          $playbackContainer.html("<iframe id=yt-frame frameborder=0 src='" + ((typeof plugUrls != 'undefined' && plugUrls !== null ? plugUrls.syncing : void 8) || '/_/visualizers/arcs') + "'></iframe>");
        }, ref$.updateVolume = $.noop, ref$);
        streamOff = (ref$ = clone$(DummyPlayer), ref$.name = "Stream: OFF", ref$.mode = 'off', ref$);
        snoozed = (ref$ = clone$(DummyPlayer), ref$.name = "Snoozed", ref$.mode = 'off', ref$);
        if (m = currentMedia.get('media')) {
          player = database.settings.streamDisabled
            ? streamOff
            : isSnoozed()
              ? snoozed
              : [youtube, sc][m.get('format') - 1];
        } else {
          player = noDJ;
        }
        changeStream(player);
        replace(Playback.prototype, 'onVolumeChange', function(){
          return function(arg$, vol){
            player.updateVolume(vol);
          };
        });
        replace(Playback.prototype, 'onMediaChange', function(oMC_){
          return function(){
            var media, oldPlayer, this$ = this;
            this.reset();
            this.$controls.removeClass('snoozed');
            media = currentMedia.get('media');
            if (media) {
              if (database.settings.streamDisabled) {
                changeStream(streamOff);
                return;
              }
              this.ignoreComplete = true;
              sleep(1000, function(){
                this$.resetIgnoreComplete();
              });
              oldPlayer = player;
              if (media.get('format') === 1) {
                /*== AudioOnly Stream (YT) ==*/
                if (streamSettings._settings.audioOnly && !media.audioFailed) {
                  player = audio;
                } else if (media.blocked === 3) {
                  player = syncingPlayer;
                } else if (media.blocked) {
                  player = unblocker;
                } else {
                  player = youtube;
                }
              } else if (media.get('format') === 2) {
                disableBtn('video');
                player = sc;
              }
            } else {
              player = noDJ;
            }
            changeStream(player);
            player.enable(media);
          };
        });
        replace(Playback.prototype, 'stop', function(){
          return function(){
            player.disable();
          };
        });
        replace(Playback.prototype, 'reset', function(r_){
          return function(){
            if (database.settings.streamDisabled) {
              changeStream(streamOff);
            }
            player.disable();
            r_.apply(this, arguments);
          };
        });
        replace(Playback.prototype, 'onYTPlayerError', function(){
          return function(e){
            console.log("[streamSettings] Youtube Playback Error", e);
            if (!database.settings.streamDisabled && !streamSettings._settings.audioOnly) {
              streamSettings.unblockYT();
            }
          };
        });
        replace(Playback.prototype, 'onPlaybackEnter', function(){
          return function(){
            if (currentMedia.get('media')) {
              this.$controls.show();
            }
          };
        });
        replace(Playback.prototype, 'onSnoozeClick', function(){
          return function(){
            if (!isSnoozed()) {
              changeStream(snoozed);
              this.reset();
            }
          };
        });
        /*replace Playback::, \onRefreshClick, !-> return !->
            if currentMedia.get(\media) and restr = currentMedia.get \restricted
                currentMedia.set do
                    media: restr
                    restricted: void
            else
                @onMediaChange!*/
        if (app != null) {
          this.playback = playback = app.room.playback;
          onGotPlayback(playback);
        } else {
          replace(Playback.prototype, 'onRemainingChange', function(oMC){
            return function(){
              this$.playback = playback = this$;
              oMC.apply(this$, arguments);
              onGotPlayback(playback);
            };
          });
        }
        if (this._settings.audioOnly) {
          refresh();
        }
        function onGotPlayback(playback){
          revert(Playback.prototype, 'onRemainingChange');
          window.snooze = bind$(playback, 'onSnoozeClick');
          replaceListener(_$context, 'change:streamDisabled', Playback, function(){
            return bind$(playback, 'onMediaChange');
          });
          replaceListener(currentMedia, 'change:media', Playback, function(){
            return bind$(playback, 'onMediaChange');
          });
          replaceListener(currentMedia, 'change:volume', Playback, function(){
            return bind$(playback, 'onVolumeChange');
          });
          $playback.off('mouseenter').on('mouseenter', function(){
            playback.onPlaybackEnter();
          });
          return $playback.find('.snooze').off('click').on('click', function(){
            playback.onSnoozeClick();
          });
        }
        function changeStream(mode, name){
          var ref$;
          if (typeof mode === 'object') {
            ref$ = mode, mode = ref$.mode, name = ref$.name;
          }
          console.log("[streamSettings] => stream-" + mode);
          $label.text(name || player.name);
          $playback.removeClass().addClass("p0ne-stream-" + mode);
          if (typeof _$context != 'undefined' && _$context !== null) {
            _$context.trigger('p0ne:changeMode');
          }
          return API.trigger('p0ne:changeMode', mode, name);
        }
        this.unblockYT = function(){
          console.error("Cannot unblock blocked Youtube video");
          return;
        };
        function fn$(k, p){
          importAll$(p, Player);
          p.addEventListener('canplay', function(){
            var diff;
            console.log("[" + k + " stream] finished buffering");
            if (currentMedia.get('media') === player.media && player === this) {
              diff = currentMedia.get('elapsed') - player.currentTime;
              if (diff > 4 && currentMedia.get('remaining') > 4) {
                this.seek();
              } else {
                player.play();
                console.log("[" + k + " stream] playing song (diff " + humanTime(diff, true) + ")");
              }
            } else {
              console.warn("[" + k + " stream] next song already started");
            }
          });
        }
      },
      disable: function(){
        var $playback, this$ = this;
        window.removeEventListener('message', this.onRestricted);
        $playback = $('#playback').removeClass();
        $('#playback .hd').removeClass('p0ne-stream-select').empty().append(this.$btn_);
        sleep(0, function(){
          if (this$._settings.audioOnly && !isSnoozed()) {
            refresh();
          }
          if (this$.Playback) {
            $playback.off('mouseenter').on('mouseenter', bind$(this$.playback, 'onPlaybackEnter'));
          }
        });
      }
    });
    /*@source p0ne.chat-commands.ls */
    /**
     * plug_p0ne ChatCommands
     * Basic chat commands are defined here. Trigger them on plug.dj by writing "/commandname" in the chat
     * e.g. "/move @Brinkie Pie 2" to move the user "Brinkie Pie" to the 2nd position in the waitlist
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.chat-commands ~~~~~~~");
    /*####################################
    #           CHAT COMMANDS            #
    ####################################*/
    module('chatCommands', {
      optional: ['currentMedia'],
      setup: function(arg$, arg1$, cC_){
        var addListener, k, ref$, v, this$ = this;
        addListener = arg$.addListener;
        addListener(API, 'chatCommand', function(c){
          var cmd, ref$, err;
          if (cmd = this$._commands[(ref$ = /^\/(\w+)/.exec(c)) != null ? ref$[1].toLowerCase() : void 8]) {
            console.log("/chatCommand", cmd, cmd.moderation);
            if (!cmd.moderation || user.gRole || cmd.moderation === true && user.isStaff || user.role >= cmd.moderation) {
              try {
                cmd.callback(c);
              } catch (e$) {
                err = e$;
                chatWarn("<div>" + err.message + "</div>", "error while executing " + c, true);
                console.error("[chatCommand] " + c);
                throw err;
              }
            } else {
              chatWarn("You need to be " + (deepEq$(cmd.moderation, true, '===')
                ? 'staff'
                : 'at least ' + getRank({
                  role: cmd.moderation
                })), c);
            }
          }
        });
        if (cC_) {
          for (k in ref$ = cC_.commands) {
            v = ref$[k];
            if (!(k in this.commands)) {
              this.commands[k] = v;
            }
          }
        }
        this.updateCommands();
      },
      updateCommands: function(){
        var this$ = this;
        if (this.updating) {
          return;
        }
        this.updating = true;
        requestAnimationFrame(function(){
          var k, ref$, v, lresult$, i$, ref1$, len$, results$ = [];
          this$.updating = false;
          this$._commands = {};
          for (k in ref$ = this$.commands) {
            v = ref$[k];
            lresult$ = [];
            if (v) {
              this$._commands[k] = v;
              for (i$ = 0, len$ = (ref1$ = v.aliases || []).length; i$ < len$; ++i$) {
                k = ref1$[i$];
                lresult$.push(this$._commands[k] = v);
              }
            }
            results$.push(lresult$);
          }
          return results$;
        });
      },
      parseUserArg: function(str){
        var id, user;
        if (/[\s\d]+/.test(str)) {
          return (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = str.split(/\s+/)).length; i$ < len$; ++i$) {
              id = ref$[i$];
              if (+id) {
                results$.push(+id);
              }
            }
            return results$;
          }());
        } else {
          return (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = getMentions(str)).length; i$ < len$; ++i$) {
              user = ref$[i$];
              results$.push(user.id);
            }
            return results$;
          }());
        }
      },
      commands: {
        commands: {
          description: "show this list of commands",
          callback: function(){
            var user, res, k, ref$, command, descr, title, ref1$;
            user = API.getUser();
            res = "<div class='msg text'>";
            for (k in ref$ = chatCommands.commands) {
              command = ref$[k];
              if (command && (!command.moderation || user.gRole || (command.moderation === true
                ? user.role > 2
                : user.role >= command.moderation))) {
                descr = (command.parameters || '') + " - " + command.description;
                title = "/" + k + " " + descr;
                if ((ref1$ = command.aliases) != null && ref1$.length) {
                  title += "\n" + plural(command.aliases.length, 'alias', 'aliases') + ": " + humanList(command.aliases);
                }
                res += "<div class=p0ne-help-command title='" + title + "'><b>/" + k + "</b> " + descr + "</div>";
              }
            }
            res += "</div>";
            appendChat($("<div class='cm update p0ne-help'>").html(res));
          }
        },
        woot: {
          description: "woot the current song",
          callback: woot
        },
        meh: {
          description: "meh the current song",
          callback: meh
        },
        grab: {
          aliases: ['curate'],
          parameters: " (playlist)",
          description: "grab the current song into a playlist (default is current playlist)",
          callback: function(c){
            var that;
            if (that = c.replace(/^\/\w+\s*/, '')) {
              grabMedia(that);
            } else {
              grabMedia();
            }
          }
        }
        /*away:
            aliases: <[ afk ]>
            description: "change your status to <b>away</b>"
            callback: !->
                API.setStatus 1
        busy:
            aliases: <[ work working ]>
            description: "change your status to <b>busy</b>"
            callback:  !->
                API.setStatus 2
        gaming:
            aliases: <[ game ingame ]>
            description: "change your status to <b>gaming</b>"
            callback:  !->
                API.setStatus 3*/,
        join: {
          description: "join the waitlist",
          callback: join
        },
        leave: {
          description: "leave the waitlist",
          callback: leave
        },
        stream: {
          parameters: " [on|off]",
          description: "enable/disable the stream (just '/stream' toggles it)",
          callback: function(c){
            if (typeof currentMedia != 'undefined' && currentMedia !== null) {
              stream(c.has('on' || !(c.has('off') || 'toggle')));
            } else {
              chatWarn("couldn't load required module for enabling/disabling the stream.");
            }
          }
        },
        snooze: {
          description: "snoozes the current song",
          callback: snooze
        },
        mute: {
          aliases: ['stfu', 'silence'],
          parameters: "[[duration] @username(s)]",
          description: "if no parameters then mute the audio, \notherwise mute the specified user(s)",
          callback: function(user){
            var durArg, duration, i$, ref$, len$, id;
            user = user.replace(/^\/\w+\s*/, '').trim();
            if (!user) {
              mute();
            } else {
              if (durArg = /\w+/.exec(user)) {
                duration = {
                  s: 's',
                  short: 's',
                  15: 's',
                  '15min': 's',
                  m: 'm',
                  middle: 'm',
                  30: 'm',
                  '30min': 'm',
                  l: 'l',
                  long: 'l',
                  45: 'l',
                  '45min': 'l'
                }[durArg[1]];
                if (duration) {
                  user = user.substr(durArg[1].length);
                } else if (getUser(durArg[1])) {
                  duration = 's';
                }
              } else {
                duration = 's';
              }
              if (!duration || (user === 'h' || user === '-h' || user === 'help' || user === '--help' || user === '?' || user === 'hlep')) {
                chatWarn('<div class=p0ne-help-command>possible durations are:<br>- <b>s</b> (<em>15min</em>, <em>short</em>)<br>- <b>m</b> (<em>30min</em>, <em>middle</em>)<br>- <b>l</b> (<em>45min</em>, <em>long</em>)<br>If left out, defaults to 15 minutes.<br>You can also use /mute to extend/reduce the mute time.</div>', '/mute [[duration] @username(s)]', true);
              } else {
                for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(user)).length; i$ < len$; ++i$) {
                  id = ref$[i$];
                  API.moderateMuteUser(id, duration, 1);
                }
              }
            }
          }
        },
        unmute: {
          parameters: "[@username(s)]",
          description: "unmutes the audio or specified user(s)",
          callback: function(user){
            var i$, ref$, len$, id;
            user = user.replace(/^\/\w+\s*/, '').trim();
            if (!user) {
              unmute();
            } else {
              for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(user)).length; i$ < len$; ++i$) {
                id = ref$[i$];
                API.moderateUnmuteUser(id, duration, 1);
              }
            }
          }
        },
        muteonce: {
          aliases: ['muteone'],
          description: "mutes the current song",
          callback: muteonce
        },
        automute: {
          parameters: " [add|remove]",
          description: "adds/removes this song from the automute list",
          callback: function(c){
            if (API.getVolume() !== 0) {
              muteonce();
            }
            if (typeof automute != 'undefined' && automute !== null) {
              automute(c.hasAny('add' || !c.hasAny('remove' || 'toggle')));
            } else {
              chatWarn("automute is not yet implemented");
            }
          }
        },
        volume: {
          parameters: " (0 - 100)",
          description: "sets the volume to the specified percentage",
          callback: function(vol){
            vol = vol.replace(/^\/\w+\s*|%/, '').trim();
            API.setVolume(+vol);
          }
        },
        popout: {
          aliases: ['popup'],
          description: "opens/closes the chat popout window",
          callback: function(){
            if (typeof PopoutView != 'undefined' && PopoutView !== null) {
              if (PopoutView._window) {
                PopoutView.close();
              } else {
                PopoutView.show();
              }
            } else {
              chatWarn("sorry, the command currently doesn't work");
            }
          }
        },
        reconnect: {
          aliases: ['reconnectSocket', 'forceReconnect'],
          description: "forces the socket to reconnect. This might solve chat issues",
          callback: function(){
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.once('sjs:reconnected', function(){
                chatWarn("socket reconnected", '/reconnect');
              });
            }
            reconnectSocket();
          }
        },
        rejoin: {
          aliases: ['rejoinRoom'],
          description: "forces a rejoin to the room (to fix issues)",
          callback: function(){
            if (typeof _$context != 'undefined' && _$context !== null) {
              _$context.once('room:joined', function(){
                chatWarn("room rejoined", '/rejoin');
              });
            }
            rejoinRoom();
          }
        },
        intercom: {
          aliases: ['messages'],
          description: "Show Intercom messages",
          callback: function(){
            Intercom("showMessages");
          }
        },
        ban: {
          aliases: ['gtfo', 'rekt', 'abuse'],
          parameters: "[duration] @username(s)",
          description: "bans the specified user(s). use `/ban help` for more info",
          moderation: true,
          callback: function(user){
            var i$, ref$, len$, id;
            user = user.replace(/^\/\w+\s*/, '').trim();
            if (!user || (user === 'h' || user === '-h' || user === 'help' || user === '--help' || user === '?' || user === 'hlep')) {
              chatWarn('<div class=p0ne-help-command>possible durations are:<br>- <b>s</b> (<em>15min</em>, <em>short</em>)<br>- <b>h</b> (<em>1h</em>, <em>hour</em>, <em>long</em>)<br>- <b>f</b> (<em>forever</em>, <em>p</em>, <em>perma</em>)<br>If left out, defaults to 15 minutes.<br>You can also use /ban to extend the ban time.</div>', '/ban [duration] @username(s)', true);
            }
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(user)).length; i$ < len$; ++i$) {
              id = ref$[i$];
              API.modBan(id, 's', 1);
            }
          }
        },
        unban: {
          aliases: ['pardon', 'revive'],
          parameters: " @username(s)",
          description: "unbans the specified user(s)",
          moderation: true,
          callback: function(user){
            var i$, ref$, len$, yet$, id;
            for (yet$ = true, i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(user.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              yet$ = false;
              API.moderateUnbanUser(id);
            } if (yet$) {
              chatWarn("couldn't find any user", '/unban');
            }
          }
        },
        move: {
          parameters: " @username position",
          description: "moves a user to the pos. in the waitlist",
          moderation: true,
          callback: function(c){
            var wl, pos, users, id, error;
            wl = API.getWaitList();
            c = c.replace(/(\d+)\s*$/, function(arg$, d){
              pos = +d;
              return '';
            });
            if (0 < pos && pos < 51) {
              if (users = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))) {
                if (!(id = users[0]) || !getUser(id)) {
                  chatWarn("The user doesn't seem to be in the room");
                } else {
                  moveDJ(id, pos);
                }
                return;
              } else {
                error = "requires you to specify a user to be moved";
              }
            } else {
              error = "requires a position to move the user to";
            }
            chatWarn(error + "<br>e.g. /move @" + API.getUsers().random().rawun + " " + (~~(Math.random() * wl.length) + 1), '/move', true);
          }
        },
        moveTop: {
          aliases: ['push'],
          parameters: " @username(s)",
          description: "moves the specified user(s) to the top of the waitlist",
          moderation: true,
          callback: function(c){
            var users, i$, yet$, i;
            users = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''));
            for (yet$ = true, i$ = users.length - 1; i$ <= 0; ++i$) {
              i = i$;
              yet$ = false;
              moveDJ(i, 1);
            } if (yet$) {
              chatWarn("couldn't find any user", '/moveTop');
            }
          }
        }
        /*moveUp:
            aliases: <[  ]>
            parameters: " @username(s) (how much)"
            description: "moves the specified user(s) up in the waitlist"
            moderation: true
            callback: (user) !->
                res = []; djsToAdd = []; l=0
                wl = API.getWaitList!
                # iterating over the loop in reverse, so that the first name will be the first, second will be second, …
                for id in chatCommands.parseUserArg user.replace(/^\/\w+\s*(?:)/, '')
                    for u, pos in wl when u.id == id
                        if pos == 0
                            skipFirst = true
                        else
                            res[pos - 1] = u.id
                        break
                    else
                        djsToAdd[l++] = id
                console.log "[/move] starting to move…", res, djsToAdd
                pos = -1; l = res.length
                do helper = !->
                    id = res[++pos]
                    if id
                        if not skipFirst
                            console.log "[/move]\tmoving #id to #{pos + 1}/#{wl.length}"
                            moveDJ id, pos
                                .then helper
                                .fail !->
                                    chatWarn "couldn't /moveup #{if getUser(id) then that.username else id}"
                                    helper!
                        else
                            helper!
                    else if pos < l
                        skipFirst := false
                        helper!
                    else
                        for id in djsToAdd
                            addDJ id
                        console.log "[/move] done"
        moveDown:
            aliases: <[  ]>
            parameters: " @username(s) (how much)"
            description: "moves the specified user(s) down in the waitlist"
            moderation: true
            callback: !->
                ...
        */,
        addDJ: {
          aliases: ['add'],
          parameters: " @username(s)",
          description: "adds the specified user(s) to the waitlist",
          moderation: true,
          callback: function(c){
            var users, i, helper;
            users = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''));
            i = 0;
            if (users.length) {
              (helper = function(){
                if (users[i]) {
                  addDJ(users[i++], helper);
                }
              })();
            } else {
              chatWarn("couldn't find any user", '/addDJ');
            }
          }
        },
        removeDJ: {
          aliases: ['remove'],
          parameters: " @username(s)",
          description: "removes the specified user(s) from the waitlist / DJ booth",
          moderation: true,
          callback: function(c){
            var i$, ref$, len$, yet$, id;
            for (yet$ = true, i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              yet$ = false;
              API.moderateRemoveDJ(id);
            } if (yet$) {
              chatWarn("couldn't find any user", '/removeDJ');
            }
          }
        },
        skip: {
          aliases: ['forceSkip', 's'],
          description: "skips the current song",
          moderation: true,
          callback: function(){
            if (API.getTimeElapsed() > 2) {
              return API.moderateForceSkip();
            } else {
              return chatWarn("The song just changed, are you sure you want to skip?<br><button class=p0ne-btn onclick='API.moderateForceSkip()'>skip</button>\xa0<button class=p0ne-btn onclick='$(this).closest(\".cm\").remove()'>cancel</button>", '/skip', true);
            }
          }
        },
        promote: {
          parameters: " @username(s)",
          description: "promotes the specified user(s) to the next rank",
          moderation: 3,
          callback: function(c){
            var i$, ref$, len$, id, that;
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              if (that = getUser(id)) {
                API.moderateSetRole(id, that.role + 1);
              }
            }
          }
        },
        demote: {
          parameters: " @username(s)",
          description: "demotes the specified user(s) to the lower rank",
          moderation: 3,
          callback: function(c){
            var i$, ref$, len$, id, user;
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              user = getUser(id);
              if ((user != null ? user.role : void 8) > 0) {
                API.moderateSetRole(id, user.role - 1);
              }
            }
          }
        },
        destaff: {
          parameters: " @username(s)",
          description: "removes the specified user(s) from the staff",
          moderation: 3,
          callback: function(c){
            var i$, ref$, len$, id, user;
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              user = getUser(id);
              if ((user != null ? user.role : void 8) > 0) {
                API.moderateSetRole(id, 0);
              }
            }
          }
        },
        rdj: {
          aliases: ['resident', 'residentDJ', 'dj'],
          parameters: " @username(s)",
          description: "makes the specified user(s) resident DJ",
          moderation: 3,
          callback: function(c){
            var i$, ref$, len$, id, user;
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              user = getUser(id);
              if ((user != null ? user.role : void 8) > 0) {
                API.moderateSetRole(id, 1);
              }
            }
          }
        },
        bouncer: {
          aliases: ['helper', 'temp', 'staff'],
          parameters: " @username(s)",
          description: "makes the specified user(s) bouncer",
          moderation: 3,
          callback: function(c){
            var i$, ref$, len$, id, user;
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              user = getUser(id);
              if ((user != null ? user.role : void 8) > 0) {
                API.moderateSetRole(id, 2);
              }
            }
          }
        },
        manager: {
          parameters: " @username(s)",
          description: "makes the specified user(s) manager",
          moderation: 4,
          callback: function(c){
            var i$, ref$, len$, id, user;
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              user = getUser(id);
              if ((user != null ? user.role : void 8) > 0) {
                API.moderateSetRole(id, 3);
              }
            }
          }
        },
        cohost: {
          aliases: ['co-host', 'co'],
          parameters: " @username(s)",
          description: "makes the specified user(s) co-host",
          moderation: 5,
          callback: function(c){
            var i$, ref$, len$, id, user;
            for (i$ = 0, len$ = (ref$ = chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, ''))).length; i$ < len$; ++i$) {
              id = ref$[i$];
              user = getUser(id);
              if ((user != null ? user.role : void 8) > 0) {
                API.moderateSetRole(id, 4);
              }
            }
          }
        },
        host: {
          parameters: " @username",
          description: "makes the specified user the communities's host (USE WITH CAUTION!)",
          moderation: 5,
          callback: function(c){
            var user;
            user = getUser(chatCommands.parseUserArg(c.replace(/^\/\w+\s*/, '')));
            if ((user != null ? user.role : void 8) > 0) {
              API.moderateSetRole(id, 5);
            }
          }
        }
      }
    });
    /*@source p0ne.base.ls */
    /**
     * Base plug_p0ne modules
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.base ~~~~~~~");
    /*####################################
    #           DISABLE/STATUS           #
    ####################################*/
    module('disableCommand', {
      setup: function(arg$){
        var addListener, this$ = this;
        addListener = arg$.addListener;
        addListener(API, 'chat', function(msg){
          var enabledModules, disabledModules, i$, ref$, m, response;
          if (msg.message.has("!disable") && API.hasPermission(msg.uid, API.ROLE.BOUNCER) && isMention(msg)) {
            console.warn("[DISABLE] '" + status + "'");
            enabledModules = [];
            disabledModules = [];
            for (i$ in ref$ = p0ne.modules) {
              m = ref$[i$];
              if (m.disableCommand) {
                if (!m.disabled) {
                  enabledModules[enabledModules.length] = m.displayName || m.name;
                  m.disable();
                } else {
                  disabledModules[disabledModules.length] = m.displayName || m.name;
                }
              }
            }
            response = "@" + msg.un + " ";
            if (enabledModules.length) {
              response += "disabled " + humanList(enabledModules) + ".";
            } else if (disabledModules.length) {
              response += " " + humanList(disabledModules) + " " + (disabledModules.length === 1 ? 'was' : 'were') + " weren't enabled.";
            }
            API.sendChat(response);
          }
        });
      }
    });
    module('getStatus', {
      module: function(){
        var status, that, modules, res$, i$, ref$, m;
        status = "Running plug_p0ne v" + p0ne.version;
        if (that = getPlugCubedVersion()) {
          status += "\tand plug³ v" + that;
        }
        if (window.ppSaved) {
          status += "\tand plugplug " + window.getVersionShort();
        }
        status += ".\tStarted " + ago(p0ne.started);
        res$ = [];
        for (i$ in ref$ = p0ne.modules) {
          m = ref$[i$];
          if (m.disableCommand && !m.disabled) {
            res$.push(m);
          }
        }
        modules = res$;
        if (modules.length) {
          status += ".\t" + humanList(modules) + " enabled";
        }
      }
    });
    module('statusCommand', {
      timeout: false,
      setup: function(arg$){
        var addListener, this$ = this;
        addListener = arg$.addListener;
        addListener(API, 'chat', function(data){
          var status;
          if (!this$.timeout) {
            if (data.message.has('!status') && isMention(data) && API.hasPermission(data.uid, API.ROLE.BOUNCER)) {
              this$.timeout = true;
              status = getStatus() + "";
              console.info("[AR] status: '" + status + "'", data.uid, data.un);
              API.sendChat(status, data);
              sleep(30 * 60000, function(){
                this.timeout = false;
                console.info("[status] timeout reset");
              });
            }
          }
        });
      }
    });
    /*####################################
    #             AUTOJOIN               #
    ####################################*/
    module('autojoin', {
      displayName: "Autojoin",
      help: 'Automatically join the waitlist again after you DJ\'d or if the waitlist gets unlocked.\nIt will disable itself, if you got removed from the waitlist by a moderator.',
      settings: 'base',
      settingsVip: true,
      settingsSimple: true,
      disabled: true,
      disableCommand: true,
      optional: ['_$context', 'booth', 'socketListeners'],
      setup: function(arg$){
        var addListener, ref$, wasLocked, this$ = this;
        addListener = arg$.addListener;
        if (((ref$ = API.getDJ()) != null ? ref$.id : void 8) !== userID && API.getWaitListPosition() === -1) {
          join();
        }
        addListener(API, 'advance waitListUpdate ws:reconnected sjs:reconnected p0ne:reconnected', function(d){
          var ref$;
          if (((ref$ = API.getDJ()) != null ? ref$.id : void 8) !== userID && API.getWaitListPosition() === -1) {
            if (join()) {
              console.log(getTime() + " [autojoin] joined waitlist");
            } else {
              console.error(getTime() + " [autojoin] failed to join waitlist");
              API.once('advance', this.autojoin, this);
            }
          }
        });
        wasLocked = $djButton.hasClass('is-locked');
        addListener(_$context, 'djButton:update', function(){
          var isLocked;
          isLocked = $djButton.hasClass('is-locked');
          if (wasLocked && !isLocked) {
            join();
          }
          wasLocked = isLocked;
        });
        addListener(API, 'socket:modRemoveDJ', function(e){
          if (e.t === API.getUser().rawun) {
            this$.disable();
          }
        });
      }
    });
    /*####################################
    #             AUTOWOOT               #
    ####################################*/
    module('autowoot', {
      displayName: 'Autowoot',
      help: 'automatically woot all songs (you can still manually meh)',
      settings: 'base',
      settingsVip: true,
      settingsSimple: true,
      disabled: true,
      disableCommand: true,
      optional: ['chatDomEvents'],
      _settings: {
        warnOnMehs: true
      },
      setup: function(arg$){
        var addListener, timer, timer2, lastScore, hasMehWarning, this$ = this;
        addListener = arg$.addListener;
        lastScore = API.getHistory()[1].score;
        hasMehWarning = false;
        addListener(API, 'advance', function(d){
          var lastScore;
          if (d.media) {
            lastScore = d.lastPlay.score;
            clearTimeout(timer);
            timer = sleep(1 .s + 3 .s * Math.random(), function(){
              if (!API.getUser().vote) {
                console.log(getTime() + " [autowoot] autowooting");
                woot();
              }
            });
          }
          if (hasMehWarning) {
            clearTimeout(timer2);
            get$cms().find('.p0ne-autowoot-meh-btn').closest('.cm').remove();
            hasMehWarning = false;
          }
        });
        addListener(API, 'voteUpdate', function(d){
          var score;
          score = API.getScore();
          if (this$._settings.warnOnMehs && (score.negative > 2 * score.positive && score.negative > (lastScore.positive + lastScore.negative) / 4 && score.negative >= 5) && !hasMehWarning && API.getTimeRemaining() > 30) {
            timer2 = sleep(5000, function(){
              chatWarn("Many users meh'd this song, you may be preventing a voteskip. <span class=p0ne-autowoot-meh-btn>Click here to meh</span> if you dislike the song", "Autowoot", true);
              playChatSound();
            });
            hasMehWarning = true;
          }
        });
        addListener(chatDomEvents, 'click', '.p0ne-autowoot-meh-btn', function(){
          meh();
          $(this).closest('.cm').remove();
        });
      }
    });
    /*####################################
    #              AUTOMUTE              #
    ####################################*/
    module('automute', {
      displayName: "Automute",
      settings: 'base',
      settingsSimple: true,
      optional: ['streamSettings'],
      help: 'automatically set songs from the "mute list" to silent, so you don\'t have to hear them when they get played. Useful for tracks that you don\'t like but that often get played.',
      _settings: {
        songlist: {}
      },
      setup: function(arg$, automute){
        var addListener, media, $snoozeBtn, $box, streamOff, onModeChange, this$ = this;
        addListener = arg$.addListener;
        this.songlist = this._settings.songlist;
        media = API.getMedia();
        addListener(API, 'advance', function(d){
          if ((media = d.media) && this$.songlist[media.cid]) {
            console.info("[automute] '" + media.author + " - " + media.title + "' is in automute list. Automuting…");
            chatWarn("This song is automuted", 'automute');
            snooze();
          }
        });
        $snoozeBtn = $('#playback .snooze');
        this.$box_ = $snoozeBtn.children();
        $box = $("<div class='box'></div>");
        streamOff = isSnoozed();
        addListener(API, 'p0ne:changeMode', onModeChange = function(mode){
          var newStreamOff;
          newStreamOff = mode === 'off';
          requestAnimationFrame(function(){
            if (newStreamOff) {
              if (media) {
                $snoozeBtn.empty().removeClass('p0ne-automute-add p0ne-automute-remove').append($box);
                if (this$.songlist[media.cid]) {
                  console.log("[automute] change automute-btn to REMOVE");
                  $snoozeBtn.addClass('p0ne-automute p0ne-automute-remove');
                  $box.html("remove from<br>automute");
                } else {
                  console.log("[automute] change automute-btn to ADD");
                  $snoozeBtn.addClass('p0ne-automute p0ne-automute-add');
                  $box.html("add to<br>automute");
                }
              }
            } else if (streamOff) {
              console.log("[automute] change automute-btn to SNOOZE");
              $snoozeBtn.empty().removeClass('p0ne-automute p0ne-automute-add p0ne-automute-remove').append(this$.$box_);
            }
            streamOff = newStreamOff;
          });
        });
        this.updateBtn = function(mode){
          onModeChange(streamOff && 'off');
        };
        addListener($snoozeBtn, 'click', function(e){
          if (streamOff) {
            console.info("[automute] snoozy", media.cid, this$.songlist[media.cid], streamOff);
            automute();
          }
        });
      },
      module: function(media, isAdd){
        var $row, ref$;
        if (typeof media === 'boolean') {
          isAdd = media;
          media = false;
        }
        if (media) {
          if (media.toJSON) {
            media = media.toJSON();
          }
          if (!media.cid || !'author' in media) {
            throw new TypeError("invalid arguments for automute(media, isAdd*)");
          }
        } else {
          media = API.getMedia();
        }
        if (isAdd === 'toggle' || isAdd == null) {
          isAdd = !this.songlist[media.cid];
        }
        if (isAdd) {
          this.songlist[media.cid] = media;
          this.createRow(media.cid);
          chatWarnSmall('p0ne-automute-notif p0ne-automute-added', "automute " + media.author + " - " + media.title + "'", 'icon-volume-off');
        } else {
          delete this.songlist[media.cid];
          chatWarnSmall('p0ne-automute-notif p0ne-automute-removed', "un-automute " + media.author + " - " + media.title + "'", 'icon-volume-half');
          if ($row = this.$rows[media.cid]) {
            $row.css({
              transform: 'scale(0)',
              height: 0
            });
            sleep(500, function(){
              $row.remove();
            });
          }
        }
        if (media.cid === ((ref$ = API.getMedia()) != null ? ref$.cid : void 8)) {
          this.updateBtn();
        }
      },
      $rows: {},
      settingsPanel: function($el, automute){
        var cid;
        this.$el = $el;
        for (cid in this.songlist) {
          this.createRow(cid);
        }
        $el.on('mouseover', '.song-format-2 .load-sc', function(){
          var this$ = this;
          mediaLookup({
            format: 2,
            cid: $(this).closest('row').data('cid')
          }).then(function(d){
            $(this$).attr('href', d.url).removeClass('load-sc');
          });
        }).on('click', '.song-remove', function(){
          var $row;
          $row = $(this).closest('.row');
          automute(automute.songlist[$(this).closest('.row').data('cid')], false);
        }).parent().css({
          height: '100%'
        });
      },
      createRow: function(cid){
        var song, mediaURL, loadSC;
        if (this.$el) {
          song = this.songlist[cid];
          if (song.format === 1) {
            mediaURL = "http://youtube.com/watch?v=" + song.cid;
            loadSC = "";
          } else {
            mediaURL = "https://soundcloud.com/search?q=" + encodeURIComponent(song.author + ' - ' + song.title);
            loadSC = " load-sc";
          }
          this.$rows[cid] = $("<div class='row song-format-" + song.format + "' data-cid='" + cid + "'><div class=song-thumb-wrapper><img class=song-thumb src='" + song.image + "'><span class=song-duration>" + mediaTime(song.duration) + "</span></div><div class=meta><div class=author title='" + song.author + "'>" + song.author + "</div><div class=title title='" + song.title + "'>" + song.title + "</div></div><div class='song-remove btn'><i class='icon icon-clear-input'></i></div><a class='song-open btn " + loadSC + "' href='" + mediaURL + "' target='_blank'><i class='icon icon-chat-popout'></i></a></div>").appendTo(this.$el);
        }
      },
      disable: function(){
        $('#playback .snooze').empty().append(this.$box_);
      }
    });
    /*####################################
    #          AFK AUTORESPOND           #
    ####################################*/
    module('afkAutorespond', {
      displayName: 'AFK Autorespond',
      settings: 'base',
      settingsSimple: true,
      settingsVip: true,
      _settings: {
        message: "I'm AFK at the moment",
        timeout: 1 .min
      },
      disabled: true,
      disableCommand: true,
      DEFAULT_MSG: "I'm AFK at the moment",
      setup: function(arg$){
        var addListener, $create, timeout, this$ = this;
        addListener = arg$.addListener, $create = arg$.$create;
        timeout = true;
        sleep(this._settings.timeout, function(){
          timeout = false;
        });
        addListener(API, 'chat', function(msg){
          if (msg.uid && msg.uid !== userID && !timeout && isMention(msg, true) && !msg.message.has('!disable')) {
            API.sendChat((this$._settings.emote || '') + "[AFK] " + (this$._settings.message || this$.DEFAULT_MSG));
            timeout = true;
            sleep(this$._settings.timeout, function(){
              timeout = false;
            });
          } else if (msg.uid === userID) {
            timeout = true;
            sleep(this$._settings.timeout, function(){
              timeout = false;
            });
          }
        });
        $create('<div class=p0ne-afk-button>').text("Disable " + this.displayName).click(function(){
          this$.disable();
        }).appendTo('#footer-user');
      },
      settingsExtra: function($el){
        var afkAutorespond, $input;
        afkAutorespond = this;
        $input = $("<input class=p0ne-settings-input placeholder=\"" + this.DEFAULT_MSG + "\">").val(this._settings.message).on('input', function(){
          var val;
          val = this.value;
          if (val.startsWith("/me ") || val.startsWith("/em ")) {
            afkAutorespond._settings.emote = val.substr(0, 4);
            val = val.substr(4);
          } else {
            delete afkAutorespond._settings.emote;
          }
          afkAutorespond._settings.message = val;
        }).appendTo($el);
      }
    });
    /*####################################
    #      JOIN/LEAVE NOTIFICATION       #
    ####################################*/
    module('joinLeaveNotif', {
      optional: ['chatDomEvents', 'chat', 'auxiliaries', 'database'],
      settings: 'base',
      displayName: 'Join/Leave Notifications',
      help: 'Shows notifications for when users join/leave the room in the chat.\nNote: the country flags indicate the user\'s plug.dj language settings, they don\'t necessarily have to match where they are from.\n\nIcons explained:\n+ user joined\n- user left\n\u21ba user reconnected (left and joined again)\n\u21c4 user joined and left again',
      _settings: {
        mergeSameUser: true
      },
      setup: function(arg$, joinLeaveNotif, update){
        var addListener, css, lastMsg, $lastNotif, CHAT_TYPE, lastUsers, cssClasses, i$, ref$, len$;
        addListener = arg$.addListener, css = arg$.css;
        if (update) {
          lastMsg = get$cm().children().last();
          if (lastMsg.hasClass('p0ne-notif-joinleave')) {
            $lastNotif = lastMsg;
          }
        }
        CHAT_TYPE = 'p0ne-notif-joinleave';
        lastUsers = {};
        cssClasses = {
          userJoin: 'join',
          userLeave: 'leave',
          refresh: 'refresh',
          instaLeave: 'instaleave'
        };
        for (i$ = 0, len$ = (ref$ = ['userJoin', 'userLeave']).length; i$ < len$; ++i$) {
          (fn$.call(this, ref$[i$]));
        }
        addListener(API, 'popout:open popout:close', function(){
          var $lastNotif;
          $lastNotif = get$cm().find('.p0ne-notif-joinleave:last');
        });
        function fn$(event_){
          addListener(API, event_, function(u){
            var event, reuseNotif, title, $msg, isAtBottom;
            event = event_;
            if (!(reuseNotif = (typeof chat != 'undefined' && chat !== null ? chat.lastType : void 8) === CHAT_TYPE && $lastNotif)) {
              lastUsers = {};
            }
            title = '';
            if (reuseNotif && lastUsers[u.id] && joinLeaveNotif._settings.mergeSameUser) {
              if (event === 'userJoin' && 'userJoin' !== lastUsers[u.id].event) {
                event = 'refresh';
                title = "title='reconnected'";
              } else if (event === 'userLeave' && 'userLeave' !== lastUsers[u.id].event) {
                event = 'instaLeave';
                title = "title='joined and left again'";
              }
            }
            $msg = $("<div class=p0ne-notif-" + cssClasses[event] + " data-uid=" + u.id + " " + title + ">" + formatUserHTML(u, true, {
              lvl: true,
              flag: true,
              warning: true
            }) + "" + getTimestamp() + "</div>");
            if (event === event_) {
              lastUsers[u.id] = {
                event: event,
                $el: $msg
              };
            }
            if (reuseNotif) {
              isAtBottom = chatIsAtBottom();
              if (event !== event_) {
                lastUsers[u.id].$el.replaceWith($msg);
                delete lastUsers[u.id];
              } else {
                $lastNotif.append($msg);
              }
              if (isAtBottom) {
                chatScrollDown();
              }
            } else {
              $lastNotif = $("<div class='cm update p0ne-notif p0ne-notif-joinleave'>").append($msg);
              appendChat($lastNotif);
              if (typeof chat != 'undefined' && chat !== null) {
                chat.lastType = CHAT_TYPE;
              }
            }
          });
        }
      }
    });
    /*####################################
    #     CURRENT SONG TITLE TOOLTIP     #
    ####################################*/
    module('titleCurrentSong', {
      disable: function(){
        $('#now-playing-media').prop('title', "");
      },
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        addListener(API, 'advance', function(d){
          if (d.media) {
            $('#now-playing-media').prop('title', d.media.author + " - " + d.media.title);
          } else {
            $('#now-playing-media').prop('title', null);
          }
        });
      }
    });
    /*####################################
    #       MORE ICON IN USERLIST        #
    ####################################*/
    module('userlistIcons', {
      require: ['users', 'RoomUserRow'],
      _settings: {
        forceMehIcon: false
      },
      setup: function(arg$){
        var replace, settings;
        replace = arg$.replace;
        settings = this._settings;
        replace(RoomUserRow.prototype, 'vote', function(){
          return function(){
            var ref$, vote, that;
            if (this.model.id === ((ref$ = API.getDJ()) != null ? ref$.id : void 8)) {
              /* fixed in Febuary 2015 http://tech.plug.dj/2015/02/18/version-1-2-7-6478/
              if vote # stupid haxxy edge-cases… well to be fair, I don't see many other people but me abuse that >3>
                  if not @$djIcon
                      @$djIcon = $ '<i class="icon icon-current-dj" style="right: 35px">'
                          .appendTo @$el
                      API.once \advance, !~>
                          @$djIcon .remove!
                          delete @$djIcon
              else*/
              vote = 'dj';
            } else if (this.model.get('grab')) {
              vote = 'grab';
            } else {
              vote = this.model.get('vote');
              if (vote === -1 && !user.isStaff && !settings.forceMehIcon) {
                vote = 0;
              }
            }
            if (vote !== 0) {
              if (this.$icon) {
                this.$icon.removeClass();
              } else {
                this.$icon = $('<i>').appendTo(this.$el);
              }
              this.$icon.addClass('icon');
              if (vote === -1) {
                this.$icon.addClass('icon-meh');
              } else if (vote === 'grab') {
                this.$icon.addClass('icon-grab');
              } else if (vote === 'dj') {
                this.$icon.addClass('icon-current-dj');
              } else {
                this.$icon.addClass('icon-woot');
              }
            } else if (this.$icon) {
              this.$icon.remove();
              delete this.$icon;
            }
            if (that = typeof chatPolyfixEmoji != 'undefined' && chatPolyfixEmoji !== null ? chatPolyfixEmoji.fixedUsernames[this.model.id] : void 8) {
              this.$el.find('.name').html(that);
            }
          };
        });
        this.updateEvents();
      },
      updateEvents: function(){
        var i$, ref$, len$, u, j$, ref1$, len1$, event;
        for (i$ = 0, len$ = (ref$ = users.models).length; i$ < len$; ++i$) {
          u = ref$[i$];
          if (u._events) {
            for (j$ = 0, len1$ = (ref1$ = u._events['change:vote'] || []).length; j$ < len1$; ++j$) {
              event = ref1$[j$];
              if (event.ctx instanceof RoomUserRow) {
                event.callback = RoomUserRow.prototype.vote;
              }
            }
            for (j$ = 0, len1$ = (ref1$ = u._events['change:grab'] || []).length; j$ < len1$; ++j$) {
              event = ref1$[j$];
              if (event.ctx instanceof RoomUserRow) {
                event.callback = RoomUserRow.prototype.vote;
              }
            }
          }
        }
      },
      disableLate: function(){
        this.updateEvents();
      }
    });
    /*####################################
    #        DBLCLICK to @MENTION        #
    ####################################*/
    /*note: this is also makes usernames clickable in many other parts of plug.dj & other plug_p0ne modules */
    module('chatDblclick2Mention', {
      require: ['chat', 'simpleFixes'],
      settings: 'chat',
      displayName: 'DblClick username to Mention',
      setup: function(arg$, chatDblclick2Mention){
        var replace, addListener, $appRight, newFromClick, $cms, i$, ref$, len$, ref1$, ctx, $el, attr, boundAttr;
        replace = arg$.replace, addListener = arg$.addListener;
        $appRight = $('.app-right');
        newFromClick = function(e){
          var name, this$ = this;
          e.stopPropagation();
          e.preventDefault();
          if (!chatDblclick2Mention.timer) {
            chatDblclick2Mention.timer = sleep(200, function(){
              var $this, text, r, ref$, i, pos, ref1$, err;
              if (chatDblclick2Mention.timer) {
                try {
                  chatDblclick2Mention.timer = 0;
                  $this = $(this$);
                  if (text = $this.find('.name')) {
                    text = text.text();
                  } else {
                    text = $this.text();
                  }
                  if (r = $this.closest('.cm').children('.badge-box').data('uid') || $this.data('uid') || ((ref$ = i = getUserInternal(text)) != null ? ref$.id : void 8)) {
                    pos = {
                      x: $appRight.offset().left,
                      y: (ref1$ = $this.offset().top) > 0 ? ref1$ : 0
                    };
                    if (i || (i = getUserInternal(r))) {
                      chat.onShowChatUser(i, pos);
                    } else {
                      chat.getExternalUser(r, pos, chat.showChatUserBind);
                    }
                  } else {
                    console.warn("[dblclick2Mention] couldn't get userID", this$);
                  }
                } catch (e$) {
                  err = e$;
                  console.error("[dblclick2Mention] error showing user rollover", err.stack);
                }
              }
            });
          } else {
            clearTimeout(chatDblclick2Mention.timer);
            chatDblclick2Mention.timer = 0;
            name = e.target.textContent;
            if (name[0] === "@") {
              name = name.substr(1);
            }
            ((typeof PopoutView != 'undefined' && PopoutView !== null ? PopoutView.chat : void 8) || chat).onInputMention(e.target.textContent);
          }
        };
        $cms = get$cms();
        for (i$ = 0, len$ = (ref$ = [[chat, $cms.find('.un'), 'onFromClick', 'fromClickBind'], [WaitlistRow.prototype, $('#waitlist .user'), 'onDJClick', 'clickBind'], [RoomUserRow.prototype, $('#user-lists .user'), 'onClick', 'clickBind']]).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], ctx = ref1$[0], $el = ref1$[1], attr = ref1$[2], boundAttr = ref1$[3];
          replace(ctx, attr, noop);
          if (ctx[boundAttr]) {
            replace(ctx, boundAttr, noop);
          }
          $el.off('click', ctx[boundAttr]);
        }
        replace(WaitlistRow.prototype, 'draw', function(d_){
          return function(){
            d_.call(this);
            this.$el.attr('uid', this.model.id);
          };
        });
        replace(RoomUserRow.prototype, 'draw', function(d_){
          return function(){
            d_.call(this);
            this.$el.attr('uid', this.model.id);
          };
        });
        addListener(chatDomEvents, 'click', '.un', newFromClick);
        addListener($body, 'click', '.p0ne-name, #user-lists .user, #waitlist .user, .friends .row', newFromClick);
        function noop(){
          return null;
        }
      },
      disableLate: function(arg$, newModule){
        var attr, ref$, ref1$, ctx, $el, legacyChat;
        for (attr in ref$ = {
          fromClickBind: [chat, get$cms()],
          onDJClick: [WaitlistRow.prototype, $('#waitlist')],
          onClick: [RoomUserRow.prototype, $('#user-lists')]
        }) {
          ref1$ = ref$[attr], ctx = ref1$[0], $el = ref1$[1];
          $el.find('.mention .un, .message .un, .name').off('click', ctx[attr]).on('click', ctx[attr]);
        }
        legacyChat = p0ne.modules.legacyChat;
        if (!newModule && legacyChat && legacyChat.disabled) {
          chatWarn("while " + legacyChat.displayName + " is enabled, clicking usernames might not work without " + this.displayName, "plug_p0ne warning");
        }
      }
    });
    /*####################################
    #             ETA  TIMER             #
    ####################################*/
    module('etaTimer', {
      displayName: 'ETA Timer',
      settings: 'base',
      optional: ['_$context'],
      setup: function(arg$){
        var css, addListener, $create, sum, lastSongDur, tooltipIntervalID, showingTooltip, $nextMediaLabel, $eta, $etaText, $etaTime, hist, l, tinyhist, i$, i, lastETA, this$ = this;
        css = arg$.css, addListener = arg$.addListener, $create = arg$.$create;
        css('etaTimer', '.p0ne-eta {position: absolute;}#your-next-media>span {width: auto !important;right: 50px;}');
        sum = lastSongDur = tooltipIntervalID = 0;
        showingTooltip = false;
        $nextMediaLabel = $('#your-next-media > span');
        $eta = $create('<div class=p0ne-eta>').append($etaText = $('<span class=p0ne-eta-text>ETA: </span>')).append($etaTime = $('<span class=p0ne-eta-time></span>')).mouseover(function(){
          if (typeof _$context != 'undefined' && _$context !== null) {
            updateToolTip();
            clearInterval(tooltipIntervalID);
            tooltipIntervalID = repeat(1000, updateToolTip);
          }
          function updateToolTip(){
            var p, avg, rem;
            p = API.getWaitListPosition();
            if (p === -1) {
              p = API.getWaitList().length;
            }
            avg = Math.round(
            sum / l);
            rem = API.getTimeRemaining();
            if (p) {
              return _$context.trigger('tooltip:show', mediaTime(rem) + " remaining + " + p + " × " + mediaTime(avg) + " avg. song duration", $etaText);
            } else if (rem) {
              return _$context.trigger('tooltip:show', mediaTime(rem) + " remaining, the waitlist is empty", $etaText);
            } else {
              return _$context.trigger('tooltip:show', "Nobody is playing and the waitlist is empty", $etaText);
            }
          }
        }).mouseout(function(){
          if (typeof _$context != 'undefined' && _$context !== null) {
            clearInterval(tooltipIntervalID);
            _$context.trigger('tooltip:hide');
          }
        }).appendTo('#playlist-meta');
        addListener(API, 'waitListUpdate', updateETA);
        addListener(API, 'advance', function(d){
          if (d.media) {
            sum -= lastSongDur;
            sum += d.media.duration;
            lastSongDur = API.getHistory()[l - 1].media.duration;
          }
          if (API.getWaitList().length === 0) {
            updateETA();
          }
        });
        if (typeof _$context != 'undefined' && _$context !== null) {
          addListener(_$context, 'room:joined', updateETA);
        }
        hist = API.getHistory();
        l = hist.length;
        if (l < 50) {
          (tinyhist = function(){
            addListener('once', API, 'advance', function(d){
              if (d.media) {
                lastSongDur = 0;
                l++;
              }
              if (l < 50) {
                tinyhist();
              }
            });
          })();
        } else {
          l = 50;
          lastSongDur = hist[l - 1].media.duration;
        }
        for (i$ = 0; i$ < l; ++i$) {
          i = i$;
          sum += hist[i].media.duration;
        }
        updateETA();
        addListener(API, 'p0ne:stylesLoaded', function(){
          requestAnimationFrame(function(){
            $nextMediaLabel.css({
              right: $eta.width() - 50
            });
          });
        });
        function updateETA(){
          var skipCalcETA, p, ref$, eta_, eta, forceSkipBtnWidth, ref1$;
          skipCalcETA = false;
          p = API.getWaitListPosition();
          if (p === 0) {
            $etaText.text("you are next DJ!");
            $etaTime.text('');
            skipCalcETA = true;
          } else if (p === -1) {
            if (((ref$ = API.getDJ()) != null ? ref$.id : void 8) === userID) {
              $etaText.text("you are DJ!");
              $etaTime.text('');
              skipCalcETA = true;
            } else {
              if (0 === (p = API.getWaitList().length)) {
                $etaText.text('Join now to ');
                $etaTime.text("DJ instantly");
                skipCalcETA = true;
              }
            }
          }
          if (skipCalcETA) {
            $nextMediaLabel.css({
              right: $eta.width() - 50
            });
            return;
          }
          eta_ = API.getTimeRemaining() + sum * p / l;
          eta = Math.round(
          eta_ / 60);
          if (lastETA !== eta) {
            lastETA = eta;
            $etaText.text("ETA ca. ");
            if (eta > 60) {
              $etaTime.text(~~(eta / 60) + "h " + eta % 60 + "min");
            } else {
              $etaTime.text(eta + " min");
            }
            forceSkipBtnWidth = (ref1$ = p0ne.modules.forceSkipButton) != null && ref1$.disabled ? 50 : 0;
            $nextMediaLabel.css({
              right: $eta.width() - forceSkipBtnWidth
            });
            if (eta_ > 0) {
              clearTimeout(this$.timer);
              return this$.timer = sleep((eta_ % 60 + 31).s, updateETA);
            }
          }
        }
      },
      disable: function(){
        clearTimeout(this.timer);
      }
    });
    /*####################################
    #              VOTELIST              #
    ####################################*/
    module('votelist', {
      settings: 'base',
      displayName: 'Votelist',
      disabled: true,
      help: 'Moving your mouse above the woot/grab/meh icon shows a list of users who have wooted, grabbed or meh\'d respectively.\n(note: seeing who has meh\'d is for staff-only)',
      setup: function(arg$){
        var addListener, $create, $tooltip, currentFilter, $vote, $vl, $rows, MAX_ROWS, timeout;
        addListener = arg$.addListener, $create = arg$.$create;
        $tooltip = $('#tooltip');
        currentFilter = false;
        $vote = $('#vote');
        $vl = $create('<div class=p0ne-votelist>').hide().appendTo($vote);
        $rows = {};
        MAX_ROWS = 30;
        addListener($('#woot'), 'mouseenter', changeFilter('left: 0', function(userlist){
          var audience, i, i$, len$, u;
          audience = API.getAudience();
          i = 0;
          for (i$ = 0, len$ = audience.length; i$ < len$; ++i$) {
            u = audience[i$];
            if (u.vote === +1) {
              userlist += "<div>" + formatUserHTML(u, true, {
                flag: true
              }) + "</div>";
              if (++i === MAX_ROWS && audience.length > MAX_ROWS + 1) {
                userlist += "<i title='use the userlist to see all'>and " + (audience.length - MAX_ROWS) + " more</i>";
                break;
              }
            }
          }
          return userlist;
        }));
        addListener($('#grab'), 'mouseenter', changeFilter('left: 50%; transform: translateX(-50%)', function(userlist){
          var audience, i, i$, len$, u;
          audience = API.getAudience();
          i = 0;
          for (i$ = 0, len$ = audience.length; i$ < len$; ++i$) {
            u = audience[i$];
            if (u.grab) {
              userlist += "<div>" + formatUserHTML(u, true, {
                flag: true
              }) + "</div>";
              if (++i === MAX_ROWS && audience.length > MAX_ROWS + 1) {
                userlist += "<i title='use the userlist to see all'>and " + (audience.length - MAX_ROWS) + " more</i>";
                break;
              }
            }
          }
          return userlist;
        }));
        addListener($('#meh'), 'mouseenter', changeFilter('right: 0', function(userlist){
          var audience, i, i$, len$, u;
          if (user.isStaff) {
            audience = API.getAudience();
            i = 0;
            for (i$ = 0, len$ = audience.length; i$ < len$; ++i$) {
              u = audience[i$];
              if (u.vote === -1) {
                userlist += "<div>" + formatUserHTML(u, true, {
                  flag: true
                }) + "</div>";
                if (++i === MAX_ROWS && audience.length > MAX_ROWS + 1) {
                  userlist += "<i title='use the userlist to see all'>and " + (audience.length - MAX_ROWS) + " more</i>";
                  break;
                }
              }
            }
            return userlist;
          }
        }));
        addListener($vote, 'mouseleave', function(){
          currentFilter = false;
          $vl.hide();
          $tooltip.show();
        });
        addListener(API, 'voteUpdate', function(){
          clearTimeout(timeout);
          timeout = sleep(200, updateVoteList);
        });
        function changeFilter(styles, filter){
          return function(){
            currentFilter = filter;
            css('votelist', ".p0ne-votelist { " + styles + " }");
            updateVoteList();
          };
        }
        function updateVoteList(){
          var userlist;
          if (currentFilter) {
            userlist = currentFilter('');
            if (userlist) {
              $vl.html(userlist).show();
              if (!$tooltip.length) {
                $tooltip = $('#tooltip');
              }
              return $tooltip.hide();
            } else {
              $vl.hide();
              return $tooltip.show();
            }
          }
        }
      }
    });
    /*####################################
    #             USER POPUP             #
    ####################################*/
    module('friendslistUserPopup', {
      require: ['friendsList', 'FriendsList', 'chat'],
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        addListener($('.friends'), 'click', '.name, .image', function(e){
          var id, ref$, user, data;
          id = (ref$ = friendsList.rows[$(this.closest('.row')).index()]) != null ? ref$.model.id : void 8;
          if (id) {
            user = users.get(id);
          }
          data = {
            x: $body.width() - 353,
            y: e.screenY - 90
          };
          if (user) {
            chat.onShowChatUser(user, data);
          } else if (id) {
            chat.getExternalUser(id, data, function(user){
              chat.onShowChatUser(user, data);
            });
          }
        });
      }
    });
    module('waitlistUserPopup', {
      require: ['WaitlistRow'],
      setup: function(arg$){
        var replace;
        replace = arg$.replace;
        replace(WaitlistRow.prototype, "render", function(r_){
          return function(){
            r_.apply(this, arguments);
            this.$('.name, .image').click(this.clickBind);
          };
        });
      }
    });
    /*####################################
    #            BOOTH  ALERT            #
    ####################################*/
    module('boothAlert', {
      displayName: 'Booth Alert',
      settings: 'base',
      settingsSimple: true,
      help: 'Play a notification sound before you are about to play',
      setup: function(arg$, arg1$, module_){
        var addListener, _settings, isNext, fn;
        addListener = arg$.addListener;
        _settings = arg1$._settings;
        isNext = false;
        fn = addListener(API, 'advance waitListUpdate ws:reconnected sjs:reconnected p0ne:reconnected', function(){
          if (API.getWaitListPosition() === 0) {
            if (!isNext) {
              isNext = true;
              sleep(3000, function(){
                chatWarn("You are about to DJ next!", "Booth Alert");
                playChatSound();
              });
            }
          } else {
            isNext = false;
          }
        });
        if (!module_) {
          fn();
        }
      }
    });
    /*####################################
    #          NOTFIY ON GRABBER         #
    ####################################*/
    module('notifyOnGrabbers', {
      require: ['grabEvent'],
      persistent: ['grabs', 'notifs'],
      displayName: "Notify on Grabs",
      settings: 'base',
      grabs: {},
      notifs: {},
      setup: function(arg$){
        var addListener, replace, this$ = this;
        addListener = arg$.addListener, replace = arg$.replace;
        addListener(API, 'advance', function(){
          this$.grabs = {};
          this$.notifs = {};
        });
        addListener(API, 'p0ne:vote:grab', function(u){
          if (!this$.grabs[u.id]) {
            this$.notifs[u.id] = chatWarnSmall('p0ne-grab-notif', formatUserHTML(u, true), 'icon-grab', true);
            this$.grabs[u.id] = 1;
          } else {
            if (this$.grabs[u.id] === 1) {
              this$.notifs[u.id] = $('<span class=p0ne-grab-notif-count>').appendTo(this$.notifs[u.id]);
            }
            this$.notifs[u.id].text(++this$.grabs[u.id]);
          }
        });
      }
    });
    /*####################################
    #         AVOID HISTORY PLAY         #
    ####################################*/
    /*
    module \avoidHistoryPlay, do
        settings: \base
        displayName: '☢ Avoid History Plays'
        help: '''
            [WORK IN PROGRESS]
    
            This avoid playing songs that are already in history
        '''
        require: <[ app ]>
        setup: ({addListener}) !->
            #TODO make sure that `playlist` is actually the active playlist, not just the one the user is looking at
            # i.e. use another object which holds the next songs of the current playlist
            playlist = app.footer.playlist.playlist.media
            addListener API, \advance, (d) !->
                if d.media and d.dj?.id != userID
                    if playlist.list?.rows?.0?.model.cid == d.media.cid  and  getActivePlaylist?
                        chatWarn 'moved down', '☢ Avoid History Plays'
                        ajax \PUT, "playlists/#{getActivePlaylist!.id}/media/move", do
                            beforeID: -1
                            ids: [id]
                else
                    API.once \advance, checkOnNextAdv
    
            !function checkOnNextAdv d
                # assuming that the playlist did not already advance
                console.info "[Avoid History Plays]", playlist.list?.rows?.0?.model, playlist.list?.rows?.1?.model
                return if not (nextSong = playlist.list?.rows?.1?.nextSong) or not getActivePlaylist?
                for s in API.getHistory!
                    if s.media.cid == nextSong.cid
                        chatWarn 'moved down', '☢ Avoid History Plays'
                        ajax \PUT, "playlists/#{getActivePlaylist!.id}/media/move", do
                            beforeID: -1
                            ids: [nextSong.id]
            do @checkOnNextAdv = checkOnNextAdv
    */
    /*####################################
    #         WARN ON PAGE LEAVE         #
    ####################################*/
    module('warnOnPageLeave', {
      displayName: "Warn on Leaving plug.dj",
      settings: 'base',
      setup: function(arg$){
        var addListener, this$ = this;
        addListener = arg$.addListener;
        addListener($window, 'beforeunload', function(){
          return "[plug_p0ne Warn on Leaving plug.dj] \n(you can disable this warning in the settings under " + this$.settings.toUpperCase() + " > " + this$.displayName + ")";
        });
      }
    });
    /*####################################
    #          NOTIFY ON LVL UP          #
    ####################################*/
    module('notifyOnLevelUp', {
      displayName: "Show Friends' Level-Ups",
      settings: 'base',
      require: ['socketListeners'],
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        addListener(API, 'socket:userUpdate', function(arg$){
          var p, ref$, u;
          p = arg$.p;
          if (p.level && ((ref$ = u = getUser(p.i)) != null && ref$.friend)) {
            chatWarn("<b>" + formatUserSimple(u) + "</b> just reached level " + p.level + "!", "Friend Level-Up", true);
          }
        });
      }
    });
    /*####################################
    #        MAINTENANCE COUNTDOWN       #
    ####################################*/
    module('maintenanceCountdown', {
      require: ['socketListeners'],
      setup: function(arg$){
        var addListener, this$ = this;
        addListener = arg$.addListener;
        this.timer = 0;
        addListener(API, 'socket:plugMaintenanceAlert', function(arg$){
          var remainingMinutes;
          remainingMinutes = arg$.p;
          this$.$el = $('#footer-user .name').css({
            color: 'orange'
          });
          this$.$bck = this$.$el.children();
          clearInterval(this$.timer);
          this$.timer = repeat(60000, updateRemaining);
          function updateRemaining(){
            if (remainingMinutes > 1) {
              this$.$el.text("plug.dj going down in ca. " + remainingMinutes-- + " min");
            } else {
              this$.$el.text("plug.dj going down in soonish");
              clearInterval(this$.timer);
              this$.timer = 0;
              sleep(5 .min, function(){
                if (!this$.timer) {
                  this$.$el.html("").append(this$.$bck);
                }
              });
            }
          } updateRemaining();
        });
      },
      disable: function(){
        var ref$;
        clearInterval(this.timer);
        if ((ref$ = this.$el) != null) {
          ref$.css({
            color: ''
          }).html("").append($bck);
        }
      }
    });
    /*####################################
    #         PLAYLIST HIGHLIGHT         #
    ####################################*/
    module('grabMenuHighlight', {
      require: ['popMenu', 'playlistCachePatch'],
      setup: function(arg$){
        var replace;
        replace = arg$.replace;
        replace(popMenu, 'show', function(s_){
          return function(t, n, r){
            this.media = n;
            if (this.isShowing) {
              this.draw();
            }
            s_.call(this, t, n, r);
          };
        });
        replace(popMenu, 'drawRow', function(dR_){
          return function(e){
            var row, matches, ref$;
            row = dR_.call(this, e);
            matches = 0;
            if ((ref$ = playlistCache._data[1].p[e.id]) != null && ref$.items[this.media[0].get('cid')]) {
              row.$el.addClass('p0ne-pl-has-media');
            }
            if ((typeof playlists != 'undefined' && playlists !== null ? playlists.get(e.id).get('count') : void 8) === 200) {
              row.$el.addClass('p0ne-pl-is-full');
            }
          };
        });
        replace(popMenu, 'drawRowBind', function(){
          return bind$(popMenu, 'drawRow');
        });
      }
    });
    module('playlistMenuHighlight', {
      require: ['pl', 'playlists', 'PlaylistListRow', 'PlaylistMediaList', 'playlistMenu', 'playlistCacheEvent'],
      setup: function(arg$){
        var addListener, replace;
        addListener = arg$.addListener, replace = arg$.replace;
        replace(PlaylistListRow.prototype, 'render', function(r_){
          return function(){
            r_.call(this);
            if (playlistCache._data[1].p[this.model.id]) {
              this.inCache = true;
              this.$el.addClass('p0ne-pl-cached');
            }
          };
        });
        replace(PlaylistMediaList.prototype, 'onCheckThreshold', function(oCT_){
          return function(n){
            var i$, ref$, len$, row, hasAllMedia, cid;
            oCT_.call(this, n);
            if (this.isDragging) {
              for (i$ = 0, len$ = (ref$ = playlistMenu.rows).length; i$ < len$; ++i$) {
                row = ref$[i$];
                hasAllMedia = true;
                for (cid in this.selectedRows) {
                  if (!playlistCache._data[1].p[row.model.id].items[cid]) {
                    hasAllMedia = false;
                    break;
                  }
                }
                if (hasAllMedia) {
                  row.$el.addClass('p0ne-pl-has-media');
                }
                if (row.model.get('count') === 200) {
                  row.$el.addClass('p0ne-pl-is-full');
                }
              }
            }
          };
        });
        if ((pl != null ? pl.list : void 8) != null) {
          replace(pl.list, 'thresholdBind', function(){
            return _.bind(pl.list.onCheckThreshold, pl.list);
          });
        }
        replace(PlaylistMediaList.prototype, 'resetDrag', function(rD_){
          return function(){
            var i$, ref$, len$, row;
            if (this.isDragging) {
              for (i$ = 0, len$ = (ref$ = playlistMenu.rows).length; i$ < len$; ++i$) {
                row = ref$[i$];
                row.$el.removeClass('p0ne-pl-has-media p0ne-pl-is-full');
              }
            }
            rD_.call(this);
          };
        });
        addListener(API, 'p0ne:playlistCache:update', function(playlistID){
          var i$, ref$, len$, row;
          for (i$ = 0, len$ = (ref$ = playlistMenu.rows).length; i$ < len$; ++i$) {
            row = ref$[i$];
            if (row.model.id === playlistID) {
              if (!row.inCache) {
                row.inCache = true;
                row.$el.addClass('p0ne-pl-cached');
              }
              break;
            }
          }
        });
        playlists.sort();
      },
      disableLate: function(){
        var i$, ref$, len$, row;
        for (i$ = 0, len$ = (ref$ = playlistMenu.rows).length; i$ < len$; ++i$) {
          row = ref$[i$];
          if (playlistCache._data[1].p[row.model.id]) {
            delete row.inCache;
            row.$el.removeClass('p0ne-pl-cached');
          }
        }
      }
    });
    /*####################################
    #          SKIP WALKTHROUGH          #
    ####################################*/
    $('#walkthrough:not(.wt-p0) .next a').click();
    /*@source p0ne.chat.ls */
    /**
     * chat-related plug_p0ne modules
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.chat ~~~~~~~");
    /* ToDo:
     * add missing chat inline image plugins:
     * Derpibooru
     * imgur.com/a/
     * tumblr
     * deviantart
     * gfycat.com
     * cloud-4.steampowered.com … .resizedimage
     */
    MAX_IMAGE_HEIGHT = 300;
    /*####################################
    #         BETTER CHAT INPUT          #
    ####################################*/
    module('betterChatInput', {
      require: ['chat', 'user'],
      optional: ['user_', '_$context', 'PopoutListener', 'Lang'],
      displayName: "Better Chat Input",
      settings: 'chat',
      help: 'Replaces the default chat input field with a multiline textfield.\nThis allows you to more accurately see how your message will actually look when send',
      setup: function(arg$){
        var addListener, replace, revert, css, $create, $autoresize_helper, oldHeight, chat, focused, init, $onpage_autoresize_helper, chatHidden, wasEmote, this$ = this;
        addListener = arg$.addListener, replace = arg$.replace, revert = arg$.revert, css = arg$.css, $create = arg$.$create;
        css('p0ne_chat_input', '#chat-input {bottom: 7px;height: auto;background: transparent !important;min-height: 30px;}#chat-input-field {position: static;resize: none;height: 16px;overflow: hidden;margin-left: 8px;color: #eee;background: rgba(0, 24, 33, .7);box-shadow: inset 0 0 0 1px transparent;transition: box-shadow .2s ease-out;}.popout #chat-input-field {box-sizing: content-box;}#chat-input-field:focus {box-shadow: inset 0 0 0 1px #009cdd !important;}.autoresize-helper {display: none;white-space: pre-wrap;word-wrap: break-word;}#chat-input-field, .autoresize-helper {width: 295px;padding: 8px 10px 5px 10px;min-height: 16px;font-weight: 400;font-size: 12px;font-family: Roboto,sans-serif;}/* emote */.p0ne-better-chat-emote {font-style: italic;}/*fix chat-messages size*/#chat-messages {height: auto !important;bottom: 45px;}');
        chat = window.chat;
        this.cIF_ = chat.$chatInputField[0];
        this.$form = chat.$chatInputField.parent();
        focused = chat.$chatInputField.hasClass('focused');
        chat.$chatInput.removeClass('focused');
        init = addListener(API, 'popout:open', function(arg$, PopoutView){
          var val, focused;
          chat = PopoutView.chat;
          this$.popoutcIF_ = chat.$chatInputField[0];
          this$.$popoutForm = chat.$chatInputField.parent();
          val = window.chat.$chatInputField.val();
          focused = window.chat.$chatInputField.is(':focus');
          chat.$chatInputField.detach();
          chat.$chatInputField[0] = chat.chatInput = $create("<textarea id='chat-input-field' maxlength=256>").attr('tabIndex', 1).val(val).focus().attr('placeholder', (typeof Lang != 'undefined' && Lang !== null ? Lang.chat.placeholder : void 8) || "Chat").on('keydown', function(e){
            chat.onKeyDown(e);
          }).on('keyup', function(e){
            chat.onKeyUp(e);
          }).on('input', onInput).on('keydown', checkForMsgSend).appendTo(this$.$popoutForm).after($autoresize_helper = $create('<div>').addClass('autoresize-helper'))[0];
        });
        init(null, {
          chat: window.chat
        });
        $onpage_autoresize_helper = $autoresize_helper;
        if (PopoutView._window) {
          init(null, PopoutView);
        }
        addListener(API, 'popout:close', function(){
          window.chat.$chatInputField.val(chat.$chatInputField.val());
          chat = window.chat;
          $autoresize_helper = $onpage_autoresize_helper;
        });
        chatHidden = get$cm().parent().css('display') === 'none';
        wasEmote = false;
        function onInput(){
          var content, newHeight, scrollTop;
          content = chat.$chatInputField.val();
          if (content !== (content = content.replace(/\n/g, ""))) {
            chat.$chatInputField.val(content);
          }
          if (content[0] === '/' && (content[1] === 'm' && content[2] === 'e' || content[1] === 'e' && content[2] === 'm')) {
            if (!wasEmote) {
              wasEmote = true;
              chat.$chatInputField.addClass('p0ne-better-chat-emote');
              $autoresize_helper.addClass('p0ne-better-chat-emote');
            }
          } else if (wasEmote) {
            wasEmote = false;
            chat.$chatInputField.removeClass('p0ne-better-chat-emote');
            $autoresize_helper.removeClass('p0ne-better-chat-emote');
          }
          $autoresize_helper.text(content);
          newHeight = $autoresize_helper.height();
          if (oldHeight === newHeight) {
            return;
          }
          scrollTop = chat.$chatMessages.scrollTop();
          chat.$chatInputField.css({
            height: newHeight
          });
          chat.$chatMessages.css({
            bottom: newHeight + 30
          }).scrollTop(scrollTop + newHeight - oldHeight);
          return oldHeight = newHeight;
        }
        function checkForMsgSend(e){
          if ((e && (e.which || e.keyCode)) === 13) {
            return requestAnimationFrame(onInput);
          }
        }
      },
      disable: function(){
        if (this.cIF_) {
          chat.$chatInputField = $(chat.chatInput = this.cIF_).val(chat.$chatInputField.val()).appendTo(this.$form);
        } else {
          console.warn(getTime() + " [betterChatInput] ~~~~ disabling ~~~~", this.cIF_, this.$form);
        }
        if (PopoutView._window && this.popoutcIF_) {
          PopoutView.chat.$chatInputField = $(PopoutView.chat.chatInput = this.popoutcIF_).val(PopoutView.chat.$chatInputField.val()).appendTo(this.$popoutForm);
        }
      }
    });
    /*####################################
    #            CHAT PLUGIN             #
    ####################################*/
    module('chatPlugin', {
      require: ['_$context'],
      setup: function(arg$){
        var addListener, onerror, addClassesCB, ref$;
        addListener = arg$.addListener;
        p0ne.chatLinkPlugins || (p0ne.chatLinkPlugins = []);
        onerror = 'onerror="chatPlugin.imgError(this)"';
        addListener('early', _$context, 'chat:receive', function(msg){
          var onload;
          msg.wasAtBottom == null && (msg.wasAtBottom = chatIsAtBottom());
          msg.classes = {};
          msg.addClass = addClass;
          msg.removeClass = removeClass;
          msg.originalMessage = msg.message;
          if (msg.wasAtBottom) {
            onload = 'onload="chatScrollDown()"';
          } else {
            onload = '';
          }
          msg.message = msg.message.replace(/<a (.+?)>((https?:\/\/)(?:www\.)?(([^\/]+).+?))<\/a>/gi, function(all, pre, completeURL, protocol, url, domain, offset){
            var i$, ref$, len$, ctx, j$, ref1$, len1$, plugin, that, err;
            domain = domain.toLowerCase();
            for (i$ = 0, len$ = (ref$ = [_$context, API]).length; i$ < len$; ++i$) {
              ctx = ref$[i$];
              if (ctx._events['p0ne:chat:link']) {
                for (j$ = 0, len1$ = (ref1$ = ctx._events['p0ne:chat:link']).length; j$ < len1$; ++j$) {
                  plugin = ref1$[j$];
                  try {
                    if (that = plugin.callback.call(plugin.ctx, {
                      all: all,
                      pre: pre,
                      completeURL: completeURL,
                      protocol: protocol,
                      domain: domain,
                      url: url,
                      offset: offset,
                      onload: onload,
                      onerror: onerror,
                      msg: msg
                    })) {
                      return that;
                    }
                  } catch (e$) {
                    err = e$;
                    console.error("[p0ne] error while processing chat link plugin", plugin, err.stack);
                  }
                }
              }
            }
            return all;
          });
          _$context.trigger('p0ne:chat:plugin', msg);
          API.trigger('p0ne:chat:plugin', msg);
        });
        addListener(_$context, 'chat:receive', function(e){
          e.$el = getChat(e).addClass(Object.keys(e.classes || {}).join(' '));
          e.addClass = bind$(e.$el, 'addClass');
          e.removeClass = bind$(e.$el, 'removeClass');
        });
        addClassesCB = (ref$ = _$context._events['chat:receive'])[ref$.length - 1];
        addListener(_$context, 'popout:open', function(){
          _$context._events['chat:receive'].removeItem(addClassesCB);
          _$context._events['chat:receive'].push(addClassesCB);
        });
        function addClass(classes){
          var i$, ref$, len$, className;
          if (typeof classes === 'string') {
            for (i$ = 0, len$ = (ref$ = classes.split(/\s+/g)).length; i$ < len$; ++i$) {
              className = ref$[i$];
              if (className) {
                this.classes[className] = true;
              }
            }
          }
        }
        function removeClass(classes){
          var i$, ref$, len$, className;
          if (typeof classes === 'string') {
            for (i$ = 0, len$ = (ref$ = classes.split(/\s+/g)).length; i$ < len$; ++i$) {
              className = ref$[i$];
              delete this.classes[className];
            }
          }
        }
      },
      imgError: function(elem){
        var x$;
        console.warn("[inline-img] converting image back to link", elem.alt, elem, elem.outerHTML);
        x$ = $(elem).parent();
        x$.text(x$.attr('href'));
        x$.addClass('p0ne-img-failed');
      }
    });
    /*####################################
    #           MESSAGE CLASSES          #
    ####################################*/
    module('chatMessageClasses', {
      optional: ['users'],
      require: ['chatPlugin'],
      setup: function(arg$){
        /* designed to be compatible with p³-compatible Room Themes */
        var addListener, err;
        addListener = arg$.addListener;
        try {
          get$cms().children().each(function(){
            var uid, $this, fromUser, role, fromRole, i$, ref$, len$, yet$, r;
            if (uid = this.dataset.cid) {
              uid = uid.substr(0, 7);
              if (!uid) {
                return;
              }
              $this = $(this);
              if (fromUser = getUser(uid)) {
                role = getRank(fromUser, true);
                fromRole = "from-" + role;
                if (role === 'regular') {
                  if (uid === userID) {
                    fromRole = 'from-you';
                  }
                } else {
                  fromRole += " from-staff";
                }
                /*else # stupid p³. who would abuse the class `from` instead of using something sensible instead?!
                    fromRole += " from"
                */
                if (fromUser.friend) {
                  fromRole += " from-friend";
                }
              } else {
                for (yet$ = true, i$ = 0, len$ = (ref$ = ($this.find('.icon').prop('className') || "").split(" ")).length; i$ < len$; ++i$) {
                  r = ref$[i$];
                  yet$ = false;
                  if (r.startsWith('icon-chat-')) {
                    fromRole = "from-" + r.substr(10);
                  }
                } if (yet$) {
                  fromRole = 'from-regular';
                }
              }
              if ($(this).find('.subscriber').length) {
                fromRole += " from-subscriber";
              }
              $this.addClass("fromID-" + uid + " " + fromRole);
            }
          });
        } catch (e$) {
          err = e$;
          console.error("[chatMessageClasses] couldn't convert old messages", err.stack);
        }
        addListener(window._$context || API, 'p0ne:chat:plugin', function(message){
          var type, uid;
          type = message.type, uid = message.uid;
          if (uid) {
            message.addClass("fromID-" + uid);
            if (message.user = getUser(uid)) {
              message.addClass(getUserClasses(message.user, true, true));
              /*rank = getRank(message.user, true)
              if uid == userID
                  message.addClass \from-you
                  #also = \-also
              else
                  message.addClass "from-#rank"
              message.addClass \from-staff if message.user.role > 1 or message.user.gRole
              if rank == \regular
                  message.addClass \from-subscriber if message.user.sub
                  message.addClass \from-friend if message.user.friend*/
            }
          }
        });
      }
    });
    /*####################################
    #      UNREAD CHAT NOTIFICAITON      #
    ####################################*/
    module('unreadChatNotif', {
      require: ['_$context', 'chatDomEvents', 'chatPlugin'],
      bottomMsg: $(),
      settings: 'chat',
      settingsSimple: true,
      displayName: 'Mark Unread Chat',
      setup: function(arg$){
        var addListener, unreadCount, $chatButton, $unreadCount, this$ = this;
        addListener = arg$.addListener;
        unreadCount = 0;
        $chatButton = $('#chat-button').append($unreadCount = $('<div class=p0ne-toolbar-count>'));
        this.bottomMsg = get$cm().children().last();
        addListener(_$context, 'p0ne:chat:plugin', function(message){
          message.wasAtBottom == null && (message.wasAtBottom = chatIsAtBottom());
          if (!$chatButton.hasClass('selected') && (typeof PopoutView != 'undefined' && PopoutView !== null ? PopoutView.chat : void 8) == null) {
            $chatButton.addClass('p0ne-toolbar-highlight');
            $unreadCount.text(unreadCount + 1);
          } else if (message.wasAtBottom) {
            this.bottomMsg = get$cm().children().last();
            return;
          }
          delete this.bottomMsg;
          get$cm().addClass('has-unread');
          message.unread = true;
          message.addClass('unread');
          unreadCount++;
        });
        this.throttled = false;
        addListener(chatDomEvents, 'scroll', updateUnread);
        addListener($chatButton, 'click', updateUnread);
        addListener('early', _$context, 'chat:delete', function(cid){
          var $msg;
          $msg = getChat(cid);
          if ($msg.length && $msg.hasClass('unread')) {
            $msg.removeClass('unread');
            unreadCount--;
          }
        });
        function updateUnread(){
          if (this$.throttled) {
            return;
          }
          this$.throttled = true;
          return sleep(200, function(){
            var $cm, cmHeight, lastMsg, msg, $readMsgs, l, unread;
            try {
              $cm = get$cm();
              cmHeight = $cm.height();
              lastMsg = msg = this$.bottomMsg;
              $readMsgs = $();
              l = 0;
              while ((msg = msg.next()).length) {
                if (msg.position().top > cmHeight) {
                  this$.bottomMsg = lastMsg;
                  break;
                } else if (msg.hasClass('unread')) {
                  $readMsgs[l++] = msg[0];
                }
                lastMsg = msg;
              }
              if (l) {
                unread = $cm.find('.unread');
                sleep(1500, function(){
                  $readMsgs.removeClass('unread');
                  if ((unread = unread.filter('.unread')).length) {
                    this$.bottomMsg = unread.removeClass('unread').last();
                  }
                });
              }
              if (!msg.length) {
                $cm.removeClass('has-unread');
                $chatButton.removeClass('p0ne-toolbar-highlight');
                unreadCount = 0;
              }
            } catch (e$) {}
            this$.throttled = false;
          });
        }
      },
      fix: function(){
        var $cm;
        this.throttled = false;
        $cm = get$cm().removeClass('has-unread').find('.unread').removeClass('unread');
        this.bottomMsg = $cm.children().last();
      },
      disable: function(){
        get$cm().removeClass('has-unread').find('.unread').removeClass('unread');
      }
    });
    /*####################################
    #          OTHERS' @MENTIONS         #
    ####################################*/
    module('chatOthersMentions', {
      optional: ['users'],
      require: ['chatPlugin'],
      settings: 'chat',
      displayName: 'Highlight @mentions for others',
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        addListener(_$context, 'p0ne:chat:plugin', function(message){
          var type, uid, res, lastI, i$, ref$, len$, mention;
          type = message.type, uid = message.uid;
          if (uid) {
            res = "";
            lastI = 0;
            for (i$ = 0, len$ = (ref$ = getMentions(message, true)).length; i$ < len$; ++i$) {
              mention = ref$[i$];
              if (mention.id !== userID || type === 'emote') {
                res += "" + message.message.substring(lastI, mention.offset) + "<span class='mention-other mentionID-" + mention.id + " mention-" + getRank(mention, false) + " " + (mention.role || mention.gRole ? 'mention-staff' : '') + " " + (type === 'emote' && mention.id === userID ? 'mention-you' : '') + "'>@" + mention.rawun + "</span>";
                lastI = mention.offset + 1 + mention.rawun.length;
              }
            }
            if (res) {
              message.message = res + message.message.substr(lastI);
            }
          }
        });
      }
    });
    /*####################################
    #           INLINE  IMAGES           #
    ####################################*/
    CHAT_WIDTH = 500;
    module('chatInlineImages', {
      require: ['chatPlugin'],
      settings: 'chat',
      settingsSimple: true,
      displayName: 'Inline Images',
      help: 'Converts image links to images in the chat, so you can see a preview.\n\nWhen enabled, you can enter tags to filter images which should not be shown inline. These tags are case-insensitive and space-seperated.\n\n☢ The taglist is subject to improvement',
      _settings: {
        filterTags: ['nsfw', 'suggestive', 'gore', 'spoiler', 'questionable', 'no-inline', 'noinline']
      },
      regexpCache: {},
      setup: function(arg$){
        var addListener, this$ = this;
        addListener = arg$.addListener;
        addListener(API, 'p0ne:chat:link', function(arg$){
          var all, pre, completeURL, protocol, domain, url, onload, onerror, msg, offset, img, msgLC, i$, ref$, len$, tag, content, key$;
          all = arg$.all, pre = arg$.pre, completeURL = arg$.completeURL, protocol = arg$.protocol, domain = arg$.domain, url = arg$.url, onload = arg$.onload, onerror = arg$.onerror, msg = arg$.msg, offset = arg$.offset;
          if (img = this$.inlineify.apply(this$, arguments)) {
            if (msg.hasFilterWord == null) {
              msg.hasFilterWord = false;
              msgLC = msg.message.toLowerCase();
              for (i$ = 0, len$ = (ref$ = this$._settings.filterTags).length; i$ < len$; ++i$) {
                tag = ref$[i$];
                if (msgLC.has(tag)) {
                  msg.hasFilterWord = tag;
                  console.warn("[inline-img] message contains \"" + tag + "\", images will not be converted");
                  break;
                }
              }
            }
            if (msg.hasFilterWord || msg.message[offset + all.length] === ";" || domain === 'plug.dj') {
              console.info("[inline-img] filtered image", completeURL + " ==> " + protocol + img);
              if (pre.has("class=")) {
                pre = pre.replace(/class=('|")?(\S+)/i, function(arg$, q, cl){
                  return 'class=' + (q || '\'') + 'p0ne-img-filtered ' + cl + (q ? '' : '\'');
                });
              } else {
                pre = "class=p0ne-img-filtered " + pre;
              }
              if (msg.hasFilterWord) {
                content = completeURL.replace((ref$ = this$.regexpCache)[key$ = msg.hasFilterWord] || (ref$[key$] = RegExp(escapeRegExp(msg.hasFilterWord) + '', 'ig')), '<span class=p0ne-img-filterword>$&</span>');
              } else {
                content = completeURL;
              }
              return "<a " + pre + " src='" + img + "'>" + content + "</a>";
            } else {
              console.log("[inline-img]", completeURL + " ==> " + img);
              return "<a " + pre + "><img src='" + img + "' class=p0ne-img " + onload + " " + onerror + "></a>";
            }
          } else {
            return false;
          }
        });
        addListener(API, 'p0ne:chat:plugin', function(msg){
          if (msg.hasFilterWord) {
            msg.message = msg.message.replaceSansHTML(this$.regexpCache[msg.hasFilterWord], "<span class=p0ne-img-filterword>$&</span>");
          }
        });
      },
      regDirect: /^[^\#\?]+(?:\.(?:jpg|jpeg|gif|png|webp|apng)|image\.php)(?:@\dx)?(?:\/revision\/\w+)?(?:\?.*|\#.*)?$/i,
      inlineify: function(arg$){
        var all, pre, completeURL, protocol, domain, url, onload, onerror, msg, offset, that, rgx, repl, forceProtocol;
        all = arg$.all, pre = arg$.pre, completeURL = arg$.completeURL, protocol = arg$.protocol, domain = arg$.domain, url = arg$.url, onload = arg$.onload, onerror = arg$.onerror, msg = arg$.msg, offset = arg$.offset;
        if (that = this.plugins[domain] || this.plugins[domain.substr(1 + domain.indexOf('.'))]) {
          rgx = that[0], repl = that[1], forceProtocol = that[2];
          if (rgx.test(url)) {
            return (forceProtocol || protocol) + "" + url.replace(rgx, repl);
          }
        }
        if (this.regDirect.test(url)) {
          if (in$(domain, this.forceHTTPSDomains)) {
            return completeURL.replace('http://', 'https://');
          } else {
            return completeURL;
          }
        }
        return false;
      },
      settingsExtra: function($el){
        var $input, this$ = this;
        $('<span class=p0ne-settings-input-label>').text("filter tags: (space seperated, case-insensitive)").appendTo($el);
        $input = $('<input class="p0ne-settings-input">').val(this._settings.filterTags.join(" ")).on('input', function(){
          var l, map, i$, ref$, len$, tag;
          this$._settings.filterTags = [];
          l = 0;
          map = {
            "": true
          };
          for (i$ = 0, len$ = (ref$ = $input.val().split(" ")).length; i$ < len$; ++i$) {
            tag = ref$[i$];
            tag = $.trim(tag);
            if (!map[tag]) {
              this$._settings.filterTags[l++] = htmlEscape(tag);
            }
          }
        }).appendTo($el);
      },
      forceHTTPSDomains: ['i.imgur.com', 'deviantart.com'],
      plugins: {
        'imgur.com': [/^(?:i\.|m\.|edge\.|www\.)*imgur\.com\/(?:r\/[\w]+\/)*(?!gallery)(?!removalrequest)(?!random)(?!memegen)([\w]{5,8})(?:#\d+)?[sbtmlh]?(?:\.(?:jpe?g|gif|png|gifv|webm))?$/, "i.imgur.com/$1.gif", 'https://'],
        'prntscr.com': [/^(prntscr.com\/\w+)(?:\/direct\/)?/, "$1/direct", 'https://'],
        'gyazo.com': [/^gyazo.com\/\w+/, "$&/raw"],
        'dropbox.com': [/^dropbox.com(\/s\/[a-z0-9]*?\/[^\/\?#]*\.(?:jpg|jpeg|gif|png|webp|apng))/, "dl.dropboxusercontent.com$1"],
        'pbs.twitter.com': [/^(pbs.twimg.com\/media\/\w+\.(?:jpg|jpeg|gif|png|webp|apng))(?:\:large|\:small)?/, "$1:small"],
        'googleimg.com': [
          /^google\.com\/imgres\?imgurl=(.+?)(?:&|$)/, function(arg$, src){
            return decodeURIComponent(url);
          }
        ],
        'imageshack.com': [
          /^imageshack\.com\/[fi]\/(\w\w)(\w+?)(\w)(?:\W|$)/, function(){
            return chatInlineImages.imageshackPlugin.apply(this, arguments);
          }
        ],
        'imageshack.us': [
          /^imageshack\.us\/[fi]\/(\w\w)(\w+?)(\w)(?:\W|$)/, function(){
            return chatInlineImages.imageshackPlugin.apply(this, arguments);
          }
        ],
        'gstatic.com': [/^https:\/\/encrypted-tbn\d.gstatic.com\/images/, "$&"],
        'i.chzbgr.com': [/(?:)/, ""]
        /* meme-plugins based on http://userscripts.org/scripts/show/154915.html (mirror: http://userscripts-mirror.org/scripts/show/154915.html ) */,
        'quickmeme.com': [/^(?:m\.)?quickmeme\.com\/meme\/(\w+)/, "i.qkme.me/$1.jpg"],
        'qkme.me': [/^(?:m\.)?qkme\.me\/(\w+)/, "i.qkme.me/$1.jpg"],
        'memegenerator.net': [/^memegenerator\.net\/instance\/(\d+)/, "http://cdn.memegenerator.net/instances/" + CHAT_WIDTH + "x/$1.jpg"],
        'imageflip.com': [/^imgflip.com\/i\/(.+)/, "i.imgflip.com/$1.jpg"],
        'livememe.com': [/^livememe.com\/(\w+)/, "i.lvme.me/$1.jpg"],
        'memedad.com': [/^memedad.com\/meme\/(\d+)/, "memedad.com/memes/$1.jpg"],
        'makeameme.org': [/^makeameme.org\/meme\/(.+)/, "makeameme.org/media/created/$1.jpg"]
      },
      imageshackPlugin: function(arg$, host, img, ext){
        ext = {
          j: 'jpg',
          p: 'png',
          g: 'gif',
          b: 'bmp',
          t: 'tiff'
        }[ext];
        return "https://imagizer.imageshack.us/a/img" + parseInt(host, 36) + "/1337/" + img + "." + ext;
      }
      /*pluginsAsync:
          \deviantart.com
          \fav.me
          \sta.sh
      deviantartPlugin: (replaceLink, url) !->
          $.getJSON "http://backend.deviantart.com/oembed?format=json&url=#url", (d) !->
              if d.height <= MAX_IMAGE_HEIGHT
                  replaceLink d.url
              else
                  replaceLink d.thumbnail_url
      */
    });
    /*####################################
    #           IMAGE LIGHTBOX           #
    ####################################*/
    module('imageLightbox', {
      require: ['chatInlineImages', 'chatDomEvents'],
      setup: function(arg$){
        var addListener, $createPersistent, $img, PADDING, $container, lastSrc, $el, dialog;
        addListener = arg$.addListener, $createPersistent = arg$.$createPersistent;
        PADDING = 10;
        $container = $('#dialog-container');
        this.$el = $el = $createPersistent('<img class=p0ne-img-large>').css({
          position: 'absolute',
          zIndex: 6,
          cursor: 'pointer',
          boxShadow: '0 0 35px black, 0 0 5px black'
        }).hide().load(function(){
          _$context.trigger('ShowDialogEvent:show', {
            dialog: dialog
          }, true);
        }).appendTo($body);
        addListener($container, 'click', '.p0ne-img-large', function(){
          dialog.close();
          return false;
        });
        this.dialog = dialog = {
          on: function(arg$, arg1$, container){
            this.container = container;
          },
          off: $.noop,
          containerOnClose: $.noop,
          destroy: $.noop,
          $el: $el,
          render: function(){
            /*
            $elImg .css do
                width: \auto
                height: \auto
            <- requestAnimationFrame
            appW = $app.width!
            appH = $app.height!
            ratio = 1   <?   (appW - 345px - PADDING) / w   <?   (appH - PADDING) / h
            w *= ratio
            h *= ratio
            */
            var contW, contH, imgW, imgH, offset;
            contW = $container.width();
            contH = $container.height();
            imgW = $img.width();
            imgH = $img.height();
            offset = $img.offset();
            console.log("[lightbox] rendering");
            $el.removeClass('p0ne-img-large-open').css({
              left: (offset.left + imgW / 2) * 100 / contW + "%",
              top: (offset.top + imgH / 2) * 100 / contH + "%",
              maxWidth: imgW * 100 / contW + "%",
              maxHeight: imgH * 100 / contH + "%"
            }).show();
            $img.css({
              visibility: 'hidden'
            });
            requestAnimationFrame(function(){
              $el.addClass('p0ne-img-large-open').css({
                left: '',
                top: '',
                maxWidth: '',
                maxHeight: ''
              });
            });
          },
          close: function(cb){
            var $img_, $el_, contW, contH, imgW, imgH, offset, this$ = this;
            $img_ = $img;
            $el_ = $el;
            this.isOpen = false;
            contW = $container.width();
            contH = $container.height();
            imgW = $img.width();
            imgH = $img.height();
            offset = $img.offset();
            $el.css({
              left: (offset.left + imgW / 2) * 100 / contW + "%",
              top: (offset.top + imgH / 2) * 100 / contH + "%",
              maxWidth: imgW * 100 / contW + "%",
              maxHeight: imgH * 100 / contH + "%"
            });
            sleep(200, function(){
              $el.removeClass('p0ne-img-large-open');
              $img_.css({
                visibility: 'visible'
              });
              this$.container.onClose();
              if (typeof cb == 'function') {
                cb();
              }
            });
          }
        };
        dialog.closeBind = bind$(dialog, 'close');
        addListener(chatDomEvents, 'click', '.p0ne-img, .p0ne-img-filtered', function(e){
          var $img_;
          $img_ = $(this);
          e.preventDefault();
          if (dialog.isOpen) {
            if ($img_.is($img)) {
              dialog.close();
            } else {
              dialog.close(helper);
            }
          } else {
            helper();
          }
          function helper(){
            var src;
            $img = $img_;
            dialog.isOpen = true;
            src = $img.attr('src');
            if (src !== lastSrc) {
              lastSrc = src;
              $el[0].onload = function(){
                _$context.trigger('ShowDialogEvent:show', {
                  dialog: dialog
                }, true);
              };
              return $el.attr('src', src);
            } else {
              return _$context.trigger('ShowDialogEvent:show', {
                dialog: dialog
              }, true);
            }
          }
        });
      },
      disable: function(){
        var ref$, ref1$, this$ = this;
        if ((ref$ = this.dialog) != null && ref$.isOpen) {
          this.dialog.close(function(){
            var ref$;
            return (ref$ = this$.$el) != null ? ref$.remove() : void 8;
          });
        } else {
          if ((ref1$ = this.$el) != null) {
            ref1$.remove();
          }
        }
      }
    });
    /*####################################
    #            YT THUMBNAILS           #
    ####################################*/
    module('chatYoutubeThumbnails', {
      displayName: 'Youtube Links to Thumbnails',
      settings: 'chat',
      help: 'Convert show thumbnails of linked Youtube videos in the chat.\nWhen hovering the thumbnail, it will animate, alternating between three frames of the video.',
      setup: function(arg$, chatYoutubeThumbnails){
        var add, addListener, interval, frame, lastID;
        add = arg$.add, addListener = arg$.addListener;
        interval = -1;
        frame = 1;
        lastID = '';
        addListener(chatDomEvents, 'mouseenter', '.p0ne-yt-img', function(e){
          var id, this$ = this;
          clearInterval(interval);
          id = this.parentElement.dataset.ytCid;
          if (id !== lastID) {
            frame = 1;
            lastID = id;
          }
          this.style.backgroundImage = "url(https://i.ytimg.com/vi/" + id + "/" + frame + ".jpg)";
          out$.interval = interval = repeat(1000, function(){
            frame = frame % 3 + 1;
            this$.style.backgroundImage = "url(https://i.ytimg.com/vi/" + id + "/" + frame + ".jpg)";
          });
          console.log("[p0ne_yt_preview]", "started", e, id, interval);
        });
        addListener(chatDomEvents, 'mouseleave', '.p0ne-yt-img', function(e){
          var id;
          clearInterval(interval);
          id = this.parentElement.dataset.ytCid;
          this.style.backgroundImage = "url(https://i.ytimg.com/vi/" + id + "/0.jpg)";
          console.log("[p0ne_yt_preview]", "stopped");
        });
        addListener(API, 'p0ne:chat:link', function(arg$){
          var pre, protocol, url, onload, yt, that, media;
          pre = arg$.pre, protocol = arg$.protocol, url = arg$.url, onload = arg$.onload;
          yt = YT_REGEX.exec(protocol + url);
          if (yt && (yt = yt[1])) {
            console.log("[inline-img]", "[YouTube " + yt + "] " + url + " ==> https://i.ytimg.com/vi/" + yt + "/default.jpg");
            if (that = window.mediaLookupCache[yt]) {
              media = auxiliaries.authorTitle(that.title);
              media.author || (media.author = that.uploader.name);
            } else {
              media = {
                title: 'loading…',
                author: 'loading…'
              };
              mediaLookup(yt, function(data){
                var x$;
                media = auxiliaries.authorTitle(data.title);
                media.author || (media.author = data.uploader.name);
                x$ = get$cms().find(".p0ne-yt[data-yt-cid='" + yt + "']");
                x$.find('.song-title').text(media.title).attr('title', media.title);
                x$.find('.song-author').text(media.author).attr('title', media.author);
              });
            }
            return "<a class=p0ne-yt data-yt-cid='" + yt + "' " + pre + "><div class=p0ne-yt-img " + onload + " style='background-image:url(https://i.ytimg.com/vi/" + yt + "/default.jpg)'></div><div class=p0ne-yt-icon></div><b class='song-title'>" + media.title + "</b><span class='song-author'>" + media.author + "</span>" + url + "</a>";
          }
          return false;
        });
        addListener(chatDomEvents, 'click', '.p0ne-yt', function(e){
          var $this;
          e.preventDefault();
          $this = $(this);
          mediaPreview({
            format: 1,
            author: $this.find('.song-author').text(),
            title: $this.find('.song-title').text(),
            cid: $this.data('yt-cid')
          });
        });
        this.disableLate = function(){
          clearInterval(interval);
        };
      }
    });
    /*####################################
    #    CUSTOM NOTIFICATION TRIGGERS    #
    ####################################*/
    module('customChatNotificationTrigger', {
      displayName: 'Notification Trigger Words',
      settings: 'chat',
      settingsSimple: true,
      _settings: {
        triggerwords: (tmp = user.username.split(' ')).length
          ? tmp
          : []
      },
      disabled: true,
      require: ['chatPlugin', '_$context'],
      setup: function(arg$){
        var addListener, this$ = this;
        addListener = arg$.addListener;
        addListener(_$context, 'p0ne:chat:plugin', function(d){
          var mentioned, mentions, x;
          if (d.cid && d.uid !== userID && this$._settings.triggerwords.length) {
            mentioned = false;
            mentions = {};
            if (this$.hasUsernameTrigger) {
              this$.usernameReg.lastIndex = 0;
              while (x = this$.usernameReg.exec(d.message)) {
                mentions[x.index] = true;
              }
            }
            d.message = d.message.replaceSansHTML(this$.regexp, function(word, i){
              var o;
              for (o in this$.usernameTriggers[word]) {
                if (mentions[i - o]) {
                  return word;
                }
              }
              mentioned = true;
              return "<span class=p0ne-trigger-word>" + word + "</span>";
            });
            if (mentioned) {
              playChatSound();
            }
          }
        });
        if (window.user_) {
          addListener(window.user_, 'change:username', bind$(this, 'updateRegexp'));
        }
        this.updateRegexp();
      },
      updateRegexp: function(){
        var triggerwords, l, i$, ref$, len$, triggerword, rawun, this$ = this;
        if (this._settings.triggerwords.length === 0) {
          return;
        }
        triggerwords = [];
        l = 0;
        for (i$ = 0, len$ = (ref$ = this._settings.triggerwords).length; i$ < len$; ++i$) {
          triggerword = ref$[i$];
          triggerword = escapeRegExp(
          htmlEscape(
          triggerword));
          if (/\w/.test(triggerword[0])) {
            triggerword = "\\b" + triggerword;
          }
          if (/\w/.test(triggerword[triggerword.length - 1])) {
            triggerword = triggerword + "\\b";
          }
          triggerwords[l++] = triggerword;
        }
        this.regexp = RegExp(triggerwords.join('|') + '', 'gi');
        this.hasUsernameTrigger = false;
        this.usernameTriggers = {};
        rawun = API.getUser().rawun;
        rawun.replace(this.regexp, function(word, i){
          var ref$;
          this$.hasUsernameTrigger = true;
          (ref$ = this$.usernameTriggers)[word] || (ref$[word] = {});
          this$.usernameTriggers[word][i + 1] = true;
        });
        this.usernameReg = RegExp('@' + rawun, 'g');
      },
      settingsExtra: function($el){
        var $input, this$ = this;
        $('<span class=p0ne-settings-input-label>').text("aliases: (comma seperated, case insensitive)").appendTo($el);
        $input = $('<input class="p0ne-settings-input">').val(this._settings.triggerwords.join(", ")).on('input', function(){
          var l, i$, ref$, len$, word;
          this$._settings.triggerwords = [];
          l = 0;
          for (i$ = 0, len$ = (ref$ = $input.val().split(",")).length; i$ < len$; ++i$) {
            word = ref$[i$];
            this$._settings.triggerwords[l++] = $.trim(word);
          }
          this$.updateRegexp();
        }).appendTo($el);
      }
    });
    /*@source p0ne.look-and-feel.ls */
    /**
     * plug_p0ne modules to add styles.
     * This needs to be kept in sync with plug_pony.css
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.look-and-feel ~~~~~~~");
    module('p0neStylesheet', {
      setup: function(arg$){
        var loadStyle;
        loadStyle = arg$.loadStyle;
        loadStyle(p0ne.host + "/css/plug_p0ne.css?v=" + p0ne.version);
      }
    });
    /*
    window.moduleStyle = (name, d) !->
        options =
            settings: true
            module: !-> @toggle!
        if typeof d == \string
            if isURL(d) # load external CSS
                options.setup = ({loadStyle}) !->
                    loadStyle d
            else if d.0 == "." # toggle class
                options.setup = !->
                    $body .addClass d
                options.disable = !->
                    $body .removeClass d
        else if typeof d == \function
            options.setup = d
        module name, options
    */
    /*####################################
    #            FIMPLUG THEME           #
    ####################################*/
    module('fimplugTheme', {
      displayName: "Brinkie's fimplug Theme",
      settings: 'look&feel',
      disabled: true,
      setup: function(arg$){
        var loadStyle;
        loadStyle = arg$.loadStyle;
        loadStyle(p0ne.host + "/css/fimplug.css?v=" + p0ne.version);
      }
    });
    /*####################################
    #          ANIMATED DIALOGS          #
    ####################################*/
    module('animatedUI', {
      require: ['Dialog'],
      setup: function(arg$){
        var addListener, replace;
        addListener = arg$.addListener, replace = arg$.replace;
        $('.dialog').addClass('opaque');
        replace(Dialog.prototype, 'render', function(){
          return function(){
            var this$ = this;
            this.show();
            sleep(0, function(){
              this$.$el.addClass('opaque');
            });
            return this;
          };
        });
        addListener(_$context, 'ShowDialogEvent:show', function(d){
          var ref$, ref1$, this$ = this;
          if (((ref$ = d.dialog.options) != null ? (ref1$ = ref$.media) != null ? ref1$.format : void 8 : void 8) === 2) {
            sleep(0, function(){
              this$.$el.addClass('opaque');
            });
          }
        });
        replace(Dialog.prototype, 'close', function(close_){
          return function(){
            var ref$, this$ = this;
            if ((ref$ = this.$el) != null) {
              ref$.removeClass('opaque');
            }
            this.animate = $.noop;
            sleep(200, function(){
              close_.call(this$);
            });
            return this;
          };
        });
      }
    });
    /*####################################
    #         PLAYLIST ICON VIEW         #
    ####################################*/
    module('playlistIconView', {
      displayName: "Playlist Grid View",
      settings: 'look&feel',
      settingsSimple: true,
      help: 'Shows songs in the playlist and history panel in an icon view instead of the default list view.',
      optional: ['PlaylistItemList', 'pl'],
      setup: function(arg$, playlistIconView){
        var addListener, replace, replaceListener, CELL_HEIGHT, CELL_WIDTH, i$, ref$, len$, x, $hovered, $mediaPanel, this$ = this;
        addListener = arg$.addListener, replace = arg$.replace, replaceListener = arg$.replaceListener;
        $body.addClass('playlist-icon-view');
        if (typeof PlaylistItemList == 'undefined' || PlaylistItemList === null) {
          chatWarn("this module couldn't fully load, it might not act 100% as expected. If you have problems, you might want to disable this.", playlistIconView.displayName);
          return;
        }
        CELL_HEIGHT = 185;
        CELL_WIDTH = 160;
        replace(PlaylistItemList.prototype, 'onResize', function(){
          return function(layout){
            var newCellsPerRow, newVisibleRows;
            this.constructor.__super__.onResize.call(this, layout);
            newCellsPerRow = ~~((this.$el.width() - 10) / CELL_WIDTH);
            newVisibleRows = Math.ceil(2 + this.$el.height() / CELL_HEIGHT) * newCellsPerRow;
            if (newVisibleRows !== this.visibleRows || newCellsPerRow !== this.cellsPerRow) {
              this.visibleRows = newVisibleRows;
              this.cellsPerRow = newCellsPerRow;
              delete this.currentRow;
              this.onScroll();
            }
          };
        });
        replace(PlaylistItemList.prototype, 'onScroll', function(oS){
          return function(){
            var top, ref$, lastRow, ref1$, i$, e, row;
            if (this.scrollPane) {
              top = (ref$ = ~~(this.scrollPane.scrollTop() / CELL_HEIGHT) - 1) > 0 ? ref$ : 0;
              this.firstRow = top * this.cellsPerRow;
              lastRow = (ref$ = this.firstRow + this.visibleRows) < (ref1$ = this.collection.length) ? ref$ : ref1$;
              if (this.currentRow !== this.firstRow) {
                this.currentRow = this.firstRow;
                this.$firstRow.height(top * CELL_HEIGHT);
                this.$lastRow.height(~~((this.collection.length - lastRow) / this.cellsPerRow) * CELL_HEIGHT);
                this.$container.empty().append(this.$firstRow);
                for (i$ = this.firstRow; i$ <= lastRow; ++i$) {
                  e = i$;
                  if (row = this.rows[e]) {
                    this.$container.append(row.$el);
                    row.render();
                  }
                }
                this.$container.append(this.$lastRow);
              }
            }
          };
        });
        replaceListener(_$context, 'anim:playlist:progress', PlaylistItemList, function(){
          return $.noop;
        });
        for (i$ = 0, len$ = (ref$ = _$context._events['anim:playlist:progress'] || []).length; i$ < len$; ++i$) {
          x = ref$[i$];
          if (x.ctx.id === 'playlist-menu') {
            _$context._events['anim:playlist:progress'] = [x];
            break;
          }
        }
        if (pl != null && ((ref$ = pl.list) != null && ref$.rows)) {
          pl.show(new pl.header.constructor(), new pl.list.constructor());
          pl.list.render();
          /*# onResize hook
          replace pl.list, \resizeBind, !-> return _.bind pl.list, \onResize
          for e, i in Layout._events.resize when e.callback == pl.list.resizeBind
              replace e, \callback, !-> return pl.list.resizeBind
          
          # onScroll hook
          pl.list.$el
              .off \jsp-scroll-y, pl.list.scrollBind
              .on \jsp-scroll-y, replace(pl.list, \scrollBind, !~> return pl.list~onScroll)
              #pl.list.onResize! if pl.list.$el
          
          # to force rerender
          delete pl.list.currentRow
          pl.list.onResize Layout.getSize!
          pl.list.onScroll?!*/
        } else {
          console.warn("no pl");
        }
        $hovered = $();
        $mediaPanel = $('#media-panel');
        addListener($mediaPanel, 'mouseover', '.row', function(){
          $hovered.removeClass('hover');
          $hovered = $(this);
          if (!$hovered.hasClass('selected')) {
            $hovered.addClass('hover');
          }
        });
        addListener($mediaPanel, 'mouseout', '.hovered', function(){
          $hovered.removeClass('hover');
        });
        replace(PlaylistItemList.prototype, 'onDragUpdate', function(){
          return function(e){
            var n, r, i, s, o;
            this.constructor.__super__.onDragUpdate.call(this, e);
            n = this.scrollPane.scrollTop();
            if (this.currentDragRow && this.currentDragRow.$el) {
              r = 0;
              i = this.currentDragRow.options.index;
              if (!this.lockFirstItem || i > 0) {
                this.targetDropIndex = i;
                s = this.currentDragRow.$el.offset().left;
                if (this.mouseX >= s + this.currentDragRow.$el.width() / 2) {
                  this.$el.addClass('p0ne-drop-right');
                  this.targetDropIndex = i === this.lastClickedIndex - 1
                    ? this.lastClickedIndex
                    : this.targetDropIndex = i + 1;
                } else {
                  this.$el.removeClass('p0ne-drop-right');
                  this.targetDropIndex = i === this.lastClickedIndex + 1
                    ? this.lastClickedIndex
                    : this.targetDropIndex = i;
                }
              } else if (i === 0) {
                this.targetDropIndex = 1;
              }
            }
            o = this.onCheckListScroll();
          };
        });
      },
      disableLate: function(){
        var ref$;
        $body.removeClass('playlist-icon-view');
        if (pl != null && ((ref$ = pl.list) != null && ref$.rows)) {
          pl.show(new pl.header.constructor(), new pl.list.constructor());
        }
        /*
        #= load all songs at once =
        replace PlaylistItemList::, \onScroll, !-> return $.noop
        replace PlaylistItemList::, \drawList, !-> return !->
            @@@__super__.drawList .call this
            if this.collection.length == 1
                this.$el.addClass \only-one
            else
                this.$el.removeClass \only-one
            for row in pl.rows
              row.$el.appendTo pl.$container
              row.render!
        */
        /*
        #= icon to toggle playlistIconView =
        replace MediaPanel::, \show, (s_) !-> return !->
            s_ ...
            @header.$el .append do
                $create '<div class="button playlist-view-button"><i class="icon icon-playlist"></i></div>'
                    .on \click, playlistIconView
        */
      }
    });
    /*####################################
    #          VIDEO PLACEHOLDER         #
    ####################################*/
    module('videoPlaceholderImage', {
      displayName: "Video Placeholder Thumbnail",
      settings: 'look&feel',
      help: 'Shows a thumbnail in place of the video, if you snooze the video or turn off the stream.\n\nThis is useful for knowing WHAT is playing, even when don\'t want to watch it.',
      screenshot: 'https://i.imgur.com/TMHVsrN.gif',
      setup: function(arg$){
        var addListener, $room, $playbackImg;
        addListener = arg$.addListener;
        $room = $('#room');
        $playbackImg = $('#playback-container');
        addListener(API, 'advance p0ne:reconnected room:joined', updatePic);
        updatePic({
          media: API.getMedia()
        });
        function updatePic(d){
          var media;
          if (d) {
            media = d.media;
          } else {
            media = API.getMedia();
          }
          if (!media) {
            return $playbackImg.css({
              backgroundColor: 'transparent',
              backgroundImage: 'none'
            });
          } else if (media.format === 1) {
            return $playbackImg.css({
              backgroundColor: '#000',
              backgroundImage: "url(https://i.ytimg.com/vi/" + media.cid + "/0.jpg)"
            });
          } else {
            return $playbackImg.css({
              backgroundColor: '#000',
              backgroundImage: "url(" + media.image + ")"
            });
          }
        }
      },
      disable: function(){
        $('#playback-container').css({
          backgroundColor: 'transparent',
          backgroundImage: 'none'
        });
      }
    });
    /*####################################
    #             LEGACY CHAT            #
    ####################################*/
    module('legacyChat', {
      displayName: "Smaller Chat",
      settings: 'chat',
      help: 'Shows the chat in the old format, before badges were added to it in December 2014.\nMakes the messages smaller, so more fit on the screen',
      disabled: true,
      setup: function(arg$){
        var addListener, $cb, this$ = this;
        addListener = arg$.addListener;
        $body.addClass('legacy-chat');
        $cb = $('#chat-button');
        addListener($cb, 'dblclick', function(e){
          this$.toggle();
          e.preventDefault();
        });
        addListener(chatDomEvents, 'dblclick', '.popout .icon-chat', function(e){
          this$.toggle();
          e.preventDefault();
        });
      },
      disable: function(){
        var dblclick2mention;
        $body.removeClass('legacy-chat');
        dblclick2mention = p0ne.modules.dblclick2mention;
        if (dblclick2mention && dblclick2mention.disabled) {
          chatWarn("while " + this.displayName + " is enabled, clicking usernames might not work without " + dblclick2mention.displayName, "plug_p0ne warning");
        }
      }
    });
    /*####################################
    #            LEGACY FOOTER           #
    ####################################*/
    module('legacyFooter', {
      displayName: "Info Footer",
      settings: 'look&feel',
      help: 'Restore the old look of the footer (the thing below the chat) and transform it into a more useful information panel.\nTo get to the settings etc, click anywhere on the panel.',
      setup: function(arg$){
        var addListener, $foo, x$;
        addListener = arg$.addListener;
        $body.addClass('legacy-footer');
        $foo = $('#footer-user');
        addListener($foo.find('.info'), 'click', function(){
          $foo.addClass('menu');
          _.delay(function(){
            return $body.one('click', function(){
              $foo.removeClass('menu');
            });
          });
        });
        x$ = $foo.find('.back span:first');
        if (!/\S/.test(x$.text())) {
          x$.text((typeof Lang != 'undefined' && Lang !== null ? Lang.userMeta.backToCommunity : void 8) || "Back To Community");
        }
      },
      disable: function(){
        $body.removeClass('legacy-footer');
        $('#footer-user').removeClass('menu');
      }
    });
    /*####################################
    #            CHAT DJ ICON            #
    ####################################*/
    module('djIconChat', {
      require: ['chatPlugin'],
      settings: 'look&feel',
      displayName: "Current-DJ-icon in Chat",
      setup: function(arg$){
        var addListener, css, icon;
        addListener = arg$.addListener, css = arg$.css;
        icon = getIcon('icon-current-dj');
        css('djIconChat', "#chat .from-current-dj .timestamp::before { background: " + icon.background + "; }");
        addListener(_$context, 'chat:plugin', function(message){
          var ref$;
          if (message.uid && message.uid === ((ref$ = API.getDJ()) != null ? ref$.id : void 8)) {
            message.addClass('from-current-dj');
          }
        });
      }
    });
    /*####################################
    #          DRAGGABLE DIALOG          #
    ####################################*/
    module('draggableDialog', {
      require: ['Dialog'],
      displayName: 'Draggable Dialog',
      settings: 'look&feel',
      setup: function(arg$){
        var addListener, replace, css, $dialog, startPos, startX, startY, $dialogContainer, lightsout, stopDragging;
        addListener = arg$.addListener, replace = arg$.replace, css = arg$.css;
        css('dialogDragNDrop', '.dialog-frame, .p0ne-lightsout-btn { cursor: pointer; }#dialog-container { width: 0; }#dialog-container.lightsout { width: auto; }#dialog-container.dragging .dialog-frame { cursor: move; }.dialog { position: absolute; }#dialog-container { transition: background .5s ease-out; }#dialog-container.dragging { background: rgba(0,0,0, 0); }.p0ne-lightsout-btn {top: 10px;left: 10px;opacity: .5;}');
        $dialogContainer = $('#dialog-container');
        addListener($dialogContainer, 'mousedown', '.dialog-frame', function(e){
          var pos;
          $body.on('mousemove', mousemove).on('mouseup', mouseup);
          $dialog = $(this).closest('.dialog').addClass('dragging');
          pos = $dialog.position();
          $dialog.css({
            position: 'absolute'
          });
          startX = e.clientX - pos.left;
          startY = e.clientY - pos.top;
        });
        /* add lights-out button to dialogs */
        lightsout = true;
        replace(Dialog.prototype, 'getHeader', function(){
          return function(title){
            var x$;
            x$ = $("<div class=dialog-frame><span class=title>" + title + "</span><i class='icon icon-" + (lightsout ? '' : 'un') + "locked p0ne-lightsout-btn'></i><i class='icon icon-dialog-close'></i></div>");
            x$.find('.icon-dialog-close').on('click', bind$(this, 'close'));
            return x$;
          };
        });
        $('.dialog-frame:first').append("<i class='icon icon-" + (lightsout ? '' : 'un') + "locked p0ne-lightsout-btn'></i>");
        addListener(_$context, 'ShowDialogEvent:show', function(d){
          var pos;
          $dialog = $dialogContainer.find('.dialog').css({
            position: 'static'
          });
          $dialogContainer.addClass('lightsout');
          if (pos = $dialog.position()) {
            pos.position = 'absolute';
            $dialog.css(pos);
          }
          if (!lightsout) {
            $dialogContainer.removeClass('lightsout');
          }
        });
        addListener($dialogContainer, 'mousedown', '.p0ne-lightsout-btn', function(e){
          if (lightsout) {
            $dialogContainer.removeClass('lightsout');
            $(this).removeClass('icon-locked').addClass('icon-unlocked');
          } else {
            $dialogContainer.addClass('lightsout');
            $(this).addClass('icon-locked').removeClass('icon-unlocked');
          }
          lightsout = !lightsout;
        });
        replace(Dialog.prototype, 'close', function(c_){
          return function(){
            console.log("[dialogDragNDrop] closing dialog");
            stopDragging(true);
            c_.apply(this, arguments);
          };
        });
        function mousemove(e){
          $dialog.css({
            left: e.clientX - startX,
            top: e.clientY - startY
          });
          return e.preventDefault();
        }
        function mouseup(e){
          return stopDragging();
        }
        this.stopDragging = stopDragging = function(){
          if ($dialog != null) {
            $dialog.removeClass('dragging');
          }
          $body.off('mousemove', mousemove).off('mouseup', mouseup);
        };
      },
      disable: function(){
        if (typeof this.stopDragging == 'function') {
          this.stopDragging();
        }
        $('#dialog-container .dialog').css({
          position: 'static'
        });
        $('#dialog-container .p0ne-lightsout-btn').remove();
      }
    });
    /*####################################
    #             EMOJI PACK             #
    ####################################*/
    module('emojiPack', {
      displayName: 'Emoji Pack',
      settings: 'look&feel',
      help: 'Replace all emojis with the one from Google (for Android Lollipop) or Twitter.\n\nEmojis are are the little images that show up for example when you write ":eggplant:" in the chat. <span class="emoji emoji-1f346"></span>',
      screenshot: 'https://i.imgur.com/Ef94Csn.png',
      _settings: {
        pack: 'apple'
      },
      appleIcons: [],
      setup: function(arg$, emojiPack, module_){
        var l, $span, i$, ref$, len$, className;
        l = 0;
        $span = $('<span class=emoji>').appendTo($body);
        for (i$ = 0, len$ = (ref$ = ['emoji-1f604', 'emoji-1f60d', 'emoji-1f44b', 'emoji-1f494']).length; i$ < len$; ++i$) {
          className = ref$[i$];
          $span.addClass(className);
          emojiPack.appleIcons[l++] = $span.css('background');
          $span.removeClass(className);
        }
        $span.remove();
        if (this._settings.pack !== 'apple') {
          p0neCSS.loadStyle(p0ne.host + "/css/" + this._settings.pack + ".emoji.css");
        }
      },
      settingsExtra: function($el){
        var emojiPack, resetTimer, appleURL, $form, $sampleEmojis, i$, len$, i, emoji;
        emojiPack = this;
        appleURL = getIcon("", true).url;
        $form = $("<form style='font-size: 15px'><label><input type=radio name=emojipack value=google> Google<span class=p0ne-settings-emoji-pack-sample><img class=emoji src='//ssl.gstatic.com/chat/emoji/5/emoji_u1f604.png' /><img class=emoji src='//ssl.gstatic.com/chat/emoji/5/emoji_u1f60d.png' /><img class=emoji src='//ssl.gstatic.com/chat/emoji/5/emoji_u1f44b.png' /><img class=emoji src='//ssl.gstatic.com/chat/emoji/5/emoji_u1f494.png' /></span></label><br><label><input type=radio name=emojipack value=twitter> Twitter<span class=p0ne-settings-emoji-pack-sample><img class=emoji src='//twemoji.maxcdn.com/16x16/1f604.png' /><img class=emoji src='//twemoji.maxcdn.com/16x16/1f60d.png' /><img class=emoji src='//twemoji.maxcdn.com/16x16/1f44b.png' /><img class=emoji src='//twemoji.maxcdn.com/16x16/1f494.png' /></span></label><br><label><input type=radio name=emojipack value=emojione> Emoji One<span class=p0ne-settings-emoji-pack-sample><img class=emoji src='//cdn.jsdelivr.net/emojione/assets/png/1F604.png?v=1.2.4' /><img class=emoji src='//cdn.jsdelivr.net/emojione/assets/png/1F60D.png?v=1.2.4' /><img class=emoji src='//cdn.jsdelivr.net/emojione/assets/png/1F44B.png?v=1.2.4' /><img class=emoji src='//cdn.jsdelivr.net/emojione/assets/png/1F494.png?v=1.2.4' /></span></label><br><label><input type=radio name=emojipack value=apple> Apple (default)<span class=p0ne-settings-emoji-pack-sample><span class=emoji></span><span class=emoji></span><span class=emoji></span><span class=emoji></span></span></label></form>").on('click', 'input:radio', function(){
          if (this.checked && emojiPack._settings.pack !== this.value) {
            if (emojiPack._settings.pack !== 'apple') {
              p0neCSS.unloadStyle(p0ne.host + "/css/" + emojiPack._settings.pack + ".emoji.css");
            }
            emojiPack._settings.pack = this.value;
            if (this.value !== 'apple') {
              p0neCSS.loadStyle(p0ne.host + "/css/" + emojiPack._settings.pack + ".emoji.css");
            }
          }
        }).appendTo($el);
        $form.find("input[value=" + emojiPack._settings.pack + "]").attr('checked', 'checked');
        $sampleEmojis = $form.find('.p0ne-settings-emoji-pack-sample:last .emoji');
        console.log($sampleEmojis, this.appleIcons);
        for (i$ = 0, len$ = $sampleEmojis.length; i$ < len$; ++i$) {
          i = i$;
          emoji = $sampleEmojis[i$];
          $(emoji).css({
            background: this.appleIcons[i]
          });
        }
        $el.css({
          paddingLeft: 15
        });
      },
      disable: function(){
        if (this._settings.pack !== 'apple') {
          p0neCSS.unloadStyle(p0ne.host + "/css/" + this._settings.pack + ".emoji.css");
        }
      }
    });
    /*####################################
    #         CUSTOM BACKGROUND          #
    ####################################*/
    module('customBackground', {
      displayName: 'Custom Background',
      settings: 'look&feel',
      settingsSimple: true,
      help: 'This module lets you change the background image of plug.dj\n\ne.g. a nice collection of background images can be found here <a href="https://imgur.com/a/8RIiu" target=_blank>https://imgur.com/a/8RIiu</a>',
      _settings: {
        background: "https://i.imgur.com/k9zVa92.png",
        booth: "https://i.imgur.com/tzlDl3L.png",
        scalable: false
      },
      disabled: true,
      setup: function(arg$){
        this.css = arg$.css;
        this.updateCSS();
      },
      updateCSS: function(){
        if (isURL(this._settings.background)) {
          if (this._settings.scalable) {
            this.css('customBackground', "#app { background: url(" + this._settings.background + ") fixed center center / cover !important; }\n\n.room-background { display: none !important; }");
          } else {
            this.css('customBackground', "#app { background: transparent !important }\n\n#app .app-right { background: #0a0a0a !important; }\n#app #avatars-container::before { content: \"\" !important; }\n#app .room-background { background-image: url(" + this._settings.background + ") !important; display: block !important; }\n\n.torch { display: none !important; }");
          }
        } else {
          css('customBackground', "");
        }
      },
      settingsExtra: function($el){
        var customBackground, $input;
        customBackground = this;
        $input = $("<input class=p0ne-settings-input>").val(this._settings.background).on('input', function(){
          customBackground._settings.background = this.value;
          customBackground.updateCSS();
        }).on('focus', function(){
          var ref$;
          if ((ref$ = p0ne.modules.p0neSettings) != null) {
            ref$.$ppW.css({
              opacity: 0.7
            });
          }
        }).on('blur', function(){
          var ref$;
          if ((ref$ = p0ne.modules.p0neSettings) != null) {
            ref$.$ppW.css({
              opacity: ""
            });
          }
        }).appendTo($el);
      }
    });
    /*####################################
    #               CENSOR               #
    ####################################*/
    module('censor', {
      displayName: "Censor",
      settings: 'dev',
      help: 'blurs some information like playlist names, counts, EP and Plug Notes.\nGreat for taking screenshots',
      disabled: true,
      setup: function(arg$){
        var css;
        css = arg$.css;
        $body.addClass('censored');
        css('@font-face {font-family: "ThePrintedWord";src: url("http://letterror.com/wp-content/themes/nextltr/css/fonts/ThePrintedWord.eot");src: url("http://letterror.com/wp-content/themes/nextltr/css/fonts/ThePrintedWord.eot?") format("embedded-opentype"),url("http://letterror.com/wp-content/themes/nextltr/css/fonts/ThePrintedWord.woff") format("woff"),url("http://letterror.com/wp-content/themes/nextltr/css/fonts/ThePrintedWord.svg") format("svg"),url("http://letterror.com/wp-content/themes/nextltr/css/fonts/ThePrintedWord.otf") format("opentype");font-style: normal;font-weight: 400;font-stretch: normal;}');
      },
      disable: function(){
        $body.removeClass('censored');
      }
    });
    /*@source p0ne.room-theme.ls */
    /**
     * Room Settings module for plug_p0ne
     * made to be compatible with plugCubes Room Settings
     * so room hosts don't have to bother with mutliple formats
     * that also means, that a lot of inspiration came from and credits go to the PlugCubed team ♥
     *
     * for more information, see https://issue.plugcubed.net/wiki/Plug3%3ARS
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
    */
    console.log("~~~~~~~ p0ne.room-theme ~~~~~~~");
    /*####################################
    #            ROOM SETTINGS           #
    ####################################*/
    module('roomSettings', {
      require: ['room'],
      optional: ['_$context', 'socketListeners'],
      persistent: ['_data', '_room'],
      module: new DataEmitter('roomSettings'),
      _room: 'dashboard',
      setup: function(arg$){
        var addListener, addCommand;
        addListener = arg$.addListener, addCommand = arg$.addCommand;
        this._update();
        addListener(API, 'socket:roomDescriptionUpdate', this._update, this);
        if (typeof _$context != 'undefined' && _$context !== null) {
          addListener(_$context, 'room:joining', this.clear, this);
          addListener(_$context, 'room:joined', this._update, this);
        }
        addCommand('roomsettings', {
          description: "reloads the p³ compatible Room Settings",
          callback: bind$(this, '_update')
        });
      },
      _update: function(){
        var roomslug, roomDescription, url, this$ = this;
        roomslug = getRoomSlug();
        if (this._data && roomslug === this._room) {
          return;
        }
        if (!(roomDescription = room.get('description'))) {
          console.warn("[p0ne] no p³ compatible Room Settings found");
        } else if (url = /@p3=(.*)/i.exec(roomDescription)) {
          console.log("[p0ne] p³ compatible Room Settings found", url[1]);
          $.getJSON(proxify(url[1])).then(function(data){
            console.log(getTime() + " [p0ne] loaded p³ compatible Room Settings");
            this$._room = roomslug;
            this$.set(data);
          }).fail(function(){
            chatWarn("cannot load Room Settings. run /roomsettings to try loading them again", "p0ne");
          });
        }
      }
    });
    /*####################################
    #             ROOM THEME             #
    ####################################*/
    module('roomTheme', {
      displayName: "Room Theme",
      require: ['roomSettings'],
      optional: ['roomLoader'],
      settings: 'look&feel',
      settingsSimple: true,
      help: 'Applies the room theme, if this room has one.\nRoom Settings and thus a Room Theme can be added by (co-) hosts of the room.',
      setup: function(arg$){
        var addListener, replace, css, loadStyle, this$ = this;
        addListener = arg$.addListener, replace = arg$.replace, css = arg$.css, loadStyle = arg$.loadStyle;
        this.$playbackBackground = $('#playback .background img');
        this.playbackBackgroundVanilla = this.$playbackBackground.attr('src');
        addListener(roomSettings, 'data', this.applyTheme = function(d){
          var cc, styles, role, ref$, color, colorMap, k, selector, rule, attrs, v, i$, len$, ref1$, name, url, x$, key, text, base, endKey;
          console.log(getTime() + " [roomTheme] loading theme");
          this$.clear(d.images.background, false);
          this$._data = d;
          cc = (typeof customColors != 'undefined' && customColors !== null ? customColors.colors : void 8) || {};
          styles = "";
          /*== colors ==*/
          if (d.colors) {
            styles += "\n/*== colors ==*/\n";
            for (role in ref$ = d.colors.chat) {
              color = ref$[role];
              if (isColor(color)) {
                if (role === 'rdj' || role === 'residentdj') {
                  role = 'dj';
                  d.colors.chat.dj = color;
                }
                styles += "/* " + role + " => " + color + " */\n#user-lists .icon-chat-" + role + " + .name,\n.from-" + role + " .from, #waitlist .icon-chat-" + role + " + span,\n#user-rollover .icon-chat-" + role + " + span, .p0ne-name." + role + " {\n        color: " + color + " !important;\n}\n";
              }
            }
            colorMap = {
              background: '.room-background',
              header: '.app-header',
              footer: '#footer'
            };
            for (k in colorMap) {
              selector = colorMap[k];
              if (isColor(d.colors[k])) {
                styles += selector + " { background-color: " + d.colors[k] + " !important }\n";
              }
            }
          }
          /*== CSS ==*/
          if (d.css) {
            styles += "\n/*== custom CSS ==*/\n";
            for (rule in ref$ = d.css.rule) {
              attrs = ref$[rule];
              styles += rule + " {";
              for (k in attrs) {
                v = attrs[k];
                styles += "\n\t" + k + ": " + v;
                if (!/;\s*$/.test(v)) {
                  styles += ";";
                }
              }
              styles += "\n}\n";
            }
            for (i$ = 0, len$ = (ref$ = d.css.fonts || []).length; i$ < len$; ++i$) {
              ref1$ = ref$[i$], name = ref1$.name, url = ref1$.url;
              if (name && url) {
                if ($.isArray(url)) {
                  url = [].join.call(url, ", ");
                }
                styles += "@font-face {\n    font-family: '" + name + "';\n    src: '" + url + "';\n}\n";
              }
            }
            for (i$ = 0, len$ = (ref$ = d.css['import'] || []).length; i$ < len$; ++i$) {
              url = ref$[i$];
              loadStyle(url);
            }
          }
          /*== images ==*/
          if (d.images) {
            styles += "\n/*== images ==*/\n";
            /* custom p0ne stuff */
            if (isURL(d.images.backgroundScalable)) {
              styles += "#app { background: url(" + d.images.background + ") fixed center center / cover }\n.room-background { display: none }\n\n.torch { display: none !important; }\n";
              /* original plug³ stuff */
            } else if (isURL(d.images.background)) {
              styles += ".room-background { background-image: url(" + d.images.background + ") !important; }\n\n.torch { display: none !important; }\n";
            }
            if (isURL(d.images.playback) && (typeof roomLoader != 'undefined' && roomLoader !== null) && (typeof Layout != 'undefined' && Layout !== null)) {
              x$ = new Image;
              x$.onload = function(){
                this$.$playbackBackground.attr('src', d.images.playback);
                replace(roomLoader, 'frameHeight', function(){
                  return x$.height - 10;
                });
                replace(roomLoader, 'frameWidth', function(){
                  return x$.width - 18;
                });
                roomLoader.onVideoResize(Layout.getSize());
                console.log(getTime() + " [roomTheme] loaded playback frame");
              };
              x$.onerror = function(){
                console.error(getTime() + " [roomTheme] failed to load playback frame");
              };
              x$.src = d.images.playback;
              replace(roomLoader, 'src', function(){
                return d.images.playback;
              });
            }
            if (isURL(d.images.booth)) {
              styles += "/* custom booth */\n#avatars-container::before {\n    background-image: url(" + d.images.booth + ");\n}\n";
            }
            for (role in ref$ = d.images.icons) {
              url = ref$[role];
              styles += ".icon-chat-" + role + " {\n    background-image: url(" + url + ");\n    background-position: 0 0;\n}\n";
              if (role === 'cohost') {
                styles += ".from-cohost .icon-chat-host { /* cohost icon fix */\n    background-image: url(" + url + ");\n    background-position: 0 0;\n}\n";
              }
            }
          }
          /*== text ==*/
          if (d.text) {
            for (key in ref$ = d.text.plugDJ) {
              text = ref$[key];
              base = Lang;
              key = key.split('.');
              endKey = key.pop();
              for (i$ = 0, len$ = key.length; i$ < len$; ++i$) {
                key = key[i$];
                if (!(base = base[key])) {
                  break;
                }
              }
              if (base) {
                replace(base, endKey, fn$);
              }
            }
          }
          css('roomTheme', styles);
          this$.styles = styles;
          function fn$(){
            return text;
          }
        });
        addListener(roomSettings, 'cleared', this.clear, this);
      },
      clear: function(resetBackground, skipDisables){
        var i$, ref$, len$, ref1$, target, attr, style, url;
        console.log(getTime() + " [roomTheme] clearing RoomTheme");
        if (!skipDisables) {
          for (i$ = 0, len$ = (ref$ = this._cbs.replacements || []).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], target = ref1$[0], attr = ref1$[1];
            target[attr] = target[attr + "_"];
          }
          for (style in this._cbs.css) {
            p0neCSS.css(style, "/* disabled */");
          }
          for (url in this._cbs.loadedStyles) {
            p0neCSS.unloadStyle(url);
          }
          delete this._cbs.replacements, delete this._cbs.css, delete this._cbs.loadedStyles;
        }
        this.currentRoom = null;
        if (resetBackground && this.$playbackBackground) {
          this.$playbackBackground.one('load', function(){
            if (typeof Layout != 'undefined' && Layout !== null) {
              if (typeof roomLoader != 'undefined' && roomLoader !== null) {
                roomLoader.onVideoResize(Layout.getSize());
              }
            }
          }).attr('src', this.playbackBackgroundVanilla);
        }
      },
      disable: function(){
        this.clear(true, true);
        this._data = {};
      }
    });
    /*@source p0ne.customcolors.ls */
    /**
     * Custom Colors module for plug_p0ne
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
    */
    console.log("~~~~~~~ p0ne.customcolors.picker ~~~~~~~");
    if (!window.staff) {
      staff = {
        loading: $.Deferred()
      };
      ajax('GET', 'staff', function(d){
        var l, i$, len$, u;
        l = staff.loading;
        staff = {};
        for (i$ = 0, len$ = d.length; i$ < len$; ++i$) {
          u = d[i$];
          if (u.username) {
            staff[u.id] = {
              role: u.role,
              gRole: u.gRole,
              sub: u.sub,
              username: u.username,
              badge: u.badge
            };
          }
        }
        l.resolve();
      });
    }
    /*####################################
    #           CUSTOM  COLORS           #
    ####################################*/
    module('customColors', {
      displayName: "☢ Custom Colours",
      settings: 'look&feel',
      settingsSimple: true,
      help: "Change colours of usernames, depending on their role.\n\nNote: some aggressive Room Themes might override custom colour settings from this module.",
      CLEAR_USER_CACHE: 14 * 24 .h,
      _settings: {
        rolesOrder: ['admin', 'ambassador', 'host', 'cohost', 'manager', 'bouncer', 'dj', 'subscriber', 'you', 'friend', 'regular'],
        global: {
          users: {},
          roles: {}
        },
        perRoom: {}
        /*  <slug>:
                userRole: {}
                    <uid>: 0
                users: {}, roles: {}
        */,
        users: {}
        /*  <uid>:
                username: "…"
                defaultBadge: "…"
                gRole: 0
                roles: <[ … … ]> # e.g. friend, subscriber, BA
                lastUsed: new Date(…)
            */
      },
      roles: {
        /*<role>:
            color: "…"
            icon: "…"
            perRoom: false
            test: !-> …
            css: "…" # cache
        */
        you: {
          color: '#FFDD6F',
          test: function(it){
            return it.id === userID;
          }
        },
        regular: {
          color: '#777F92',
          icon: false,
          test: function(it){
            return it.role === 0;
          }
        },
        friend: {
          color: '#777F92',
          test: function(it){
            return it.friend;
          }
        },
        subscriber: {
          color: '#C59840',
          icon: 'icon-chat-subscriber',
          test: function(it){
            return it.sub;
          }
        },
        dj: {
          color: '#AC76FF',
          icon: 'icon-chat-dj',
          perRoom: true,
          test: function(it){
            return it.role === 1;
          }
        },
        bouncer: {
          color: '#AC76FF',
          icon: 'icon-chat-bouncer',
          perRoom: true,
          test: function(it){
            return it.role === 2;
          }
        },
        manager: {
          color: '#AC76FF',
          icon: 'icon-chat-manager',
          perRoom: true,
          test: function(it){
            return it.role === 3;
          }
        },
        cohost: {
          color: '#AC76FF',
          icon: 'icon-chat-host',
          perRoom: true,
          test: function(it){
            return it.role === 4;
          }
        },
        host: {
          color: '#AC76FF',
          icon: 'icon-chat-host',
          perRoom: true,
          test: function(it){
            return it.role === 5;
          }
        },
        ambassador: {
          color: '#89BE6C',
          icon: 'icon-chat-ambassador',
          test: function(u){
            var ref$;
            return 0 < (ref$ = u.gRole) && ref$ < 5;
          }
        },
        admin: {
          color: '#42A5DC',
          icon: 'icon-chat-admin',
          test: function(it){
            return it.gRole === 5;
          }
        }
      },
      users: {}
      /*    <uid>:
              css: "…" # cache
          */,
      scopes: {},
      scopeOrderRole: ['globalCustomRole', 'roomThemeRole', 'vanilla'],
      scopeOrderUser: ['globalCustomUser', 'roomThemeUser'],
      setup: function(arg$){
        var role, ref$, style, uid, d, u, this$ = this;
        this.css = arg$.css, this.addListener = arg$.addListener;
        this.users = {};
        this.scopes.vanilla = this.roles;
        this.scopes.globalCustomRole = this._settings.global.roles;
        this.scopes.globalCustomUser = this._settings.global.users;
        this.addListener(_$context, 'room:joined', function(){
          var slug, ref$;
          slug = getRoomSlug();
          this$.room = (ref$ = this$._settings.perRoom)[slug] || (ref$[slug] = {
            userRole: {},
            users: {},
            roles: {}
          });
          this$.scopes.roomThemeRole = {};
          return this$.scopes.roomThemeUser = {};
        })();
        for (role in ref$ = this.roles) {
          style = ref$[role];
          this.roles[role].css = this.calcCSSRole(role);
        }
        for (uid in this.scopes.globalCustomUser) {
          this.users[uid] = {
            css: this.calcCSSUser(uid)
          };
        }
        this.updateCSS();
        d = Date.now() - this.CLEAR_USER_CACHE;
        for (uid in ref$ = this._settings.users) {
          u = ref$[uid];
          if (!this.users[uid] && u.lastUsed < d) {
            console.log("[customColors] removing " + u.id + " (" + u.username + ") from cache");
            delete this._settings.users[uid];
          }
        }
      },
      settingsPanel: function($wrapper){
        var this$ = this;
        $wrapper.text("loading…");
        loadModule('customColorsPicker', p0ne.host + "/scripts/p0ne.customcolors.picker.js?v=" + p0ne.version).then(function(ccp){
          console.log("[ccp]", ccp);
          ccp.disable().enable();
        });
      },
      updateCSS: function(){
        var ccp, cpKey, styles, key, ref$, data;
        ccp = p0ne.modules.customColorsPicker;
        if (ccp && !ccp.disabled) {
          cpKey = ccp.key + "";
        }
        styles = "";
        for (key in ref$ = this.roles) {
          data = ref$[key];
          if (key !== cpKey) {
            styles += data.css;
          }
        }
        for (key in ref$ = this.users) {
          data = ref$[key];
          if (key !== cpKey) {
            styles += data.css;
          }
        }
        this.css('customColors', styles);
      },
      calcCSSRole: function(roleName, style){
        var styles, role, font, icon;
        style || (style = this.getRoleStyle(roleName, true));
        styles = "/*= " + roleName + " =*/";
        role = this.roles[roleName];
        if (style.color || style.font) {
          font = style.font || {
            b: true
          };
          if (role.icon) {
            styles += "#app #user-lists ." + role.icon + " + .name,#app #waitlist ." + role.icon + " + span,#app #user-rollover ." + role.icon + " + span,";
          }
          if (roleName !== 'regular') {
            styles += "#app .p0ne-name." + roleName + ",";
          }
          styles += "#app #chat .from-" + roleName + " .un {color: " + style.color + ";" + (!font.b ? 'font-weight: normal;' : '') + "" + (font.i ? 'font-style: italic;' : '') + "" + (font.u ? 'text-decoration: underline;' : '') + "}";
        }
        if (style.icon) {
          if (role.icon && style.icon !== role.icon) {
            if (typeof style.icon === 'string') {
              icon = getIcon(style.icon, true);
            } else {
              icon = style.icon;
            }
            styles += "#app #user-lists ." + role.icon + ",#app #waitlist ." + role.icon + ",#app #user-rollover ." + role.icon + ",.p0ne-name ." + role.icon + ",#chat .from-" + roleName + " ." + role.icon + " {background: url(" + icon.url + ") " + (-icon.x) + "px " + (-icon.y) + "px}";
          }
        }
        return styles + "";
      },
      calcCSSUser: function(uid, style){
        var styles, color, font, bdg;
        style || (style = this.getUserStyle(uid));
        styles = "/*= " + uid + " (" + this._settings.users[uid].username + ") =*/";
        if (style.color) {
          color = "color: " + style.color + ";";
        }
        if (style.font) {
          font = "" + (!style.font.b ? 'font-weight: normal;' : '') + "" + (style.font.i ? 'font-style: italic;' : '') + "" + (style.font.u ? 'text-decoration: underline;' : '') + "";
        }
        if (color || font) {
          styles += "#app #chat .fromID-" + uid + " .un,#app .p0ne-uid-" + uid + " .p0ne-name .name {" + (color || '') + "" + (font || '') + "}";
        }
        if (style.icon) {
          styles += ".p0ne-uid-" + uid + " .icon:first-of-type,#chat .fromID-" + uid + " .icon:last-of-type {background: url(" + style.icon.url + ") " + (-style.icon.x) + "px " + (-style.icon.y) + "px}";
        }
        if (bdg = style.badge) {
          styles += ".p0ne-uid-" + uid + " .bdg,.fromID-" + uid + " .bdg {background: url(" + bdg.url + ") " + -30 * bdg.x / bdg.w + "px " + -30 * bdg.y / bdg.h + "px / " + (bdg.srcW * 30 / bdg.w || 30) + "px " + (bdg.srcH * 30 / bdg.h || 30) + "px}";
        }
        return styles + "\n";
      },
      getRoleStyle: function(roleName, includeVanilla){
        var res, scopes, i$, len$, scopeName, k, ref$, v;
        res = {};
        if (includeVanilla) {
          scopes = this.scopeOrderRole;
        } else {
          scopes = this.scopeOrderRole.slice(0, this.scopeOrderRole.length - 1);
        }
        for (i$ = 0, len$ = scopes.length; i$ < len$; ++i$) {
          scopeName = scopes[i$];
          for (k in ref$ = this.scopes[scopeName][roleName]) {
            v = ref$[k];
            if (!(k in res)) {
              res[k] = v;
            }
          }
        }
        return res;
      },
      getUserStyle: function(uid, includeVanilla){
        var res, i$, ref$, len$, scopeName, k, ref1$, v, roleName;
        res = {};
        for (i$ = 0, len$ = (ref$ = this.scopeOrderUser).length; i$ < len$; ++i$) {
          scopeName = ref$[i$];
          for (k in ref1$ = this.scopes[scopeName][uid]) {
            v = ref1$[k];
            if (!(k in res)) {
              res[k] = v;
            }
          }
        }
        if (includeVanilla) {
          for (i$ = 0, len$ = (ref$ = this.getRoles(uid)).length; i$ < len$; ++i$) {
            roleName = ref$[i$];
            for (k in ref1$ = this.getRoleStyle(roleName, true)) {
              v = ref1$[k];
              if (!(k in res)) {
                res[k] = v;
              }
            }
          }
          res.badge || (res.badge = ((ref$ = getUser(uid)) != null ? ref$.badge : void 8) || ((ref1$ = this._settings.users[uid]) != null ? ref1$.defaultBadge : void 8));
          res.font || (res.font = {
            b: true,
            i: false,
            u: false
          });
        }
        return res;
      },
      getRoles: function(uid, user){
        var that, i$, ref$, len$, role, roomRole, ref1$, results$ = [];
        if (that = getUser(uid)) {
          for (i$ = 0, len$ = (ref$ = this._settings.rolesOrder).length; i$ < len$; ++i$) {
            role = ref$[i$];
            if (this.roles[role].test(that)) {
              results$.push(role);
            }
          }
          return results$;
        } else if (this._settings.users[uid]) {
          if (that = this.room.userRole[uid] || ((ref$ = staff[uid]) != null ? ref$.role : void 8)) {
            roomRole = getRank({
              role: that
            }, true);
          }
          for (i$ = 0, len$ = (ref1$ = this._settings.rolesOrder).length; i$ < len$; ++i$) {
            role = ref1$[i$];
            if (in$(role, this._settings.users[uid].roles) || role === roomRole) {
              results$.push(role);
            }
          }
          return results$;
        } else {
          return [];
        }
      }
    });
    /*@source p0ne.song-notif.ls */
    /**
     * get fancy song notifications in the chat (with preview thumbnail, description, buttons, …)
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.song-notif ~~~~~~~");
    /*####################################
    #             SONG NOTIF             #
    ####################################*/
    module('songNotif', {
      require: ['chatDomEvents'],
      optional: ['_$context', 'chat', 'users', 'database', 'auxiliaries', 'app', 'popMenu'],
      settings: 'base',
      settingsSimple: true,
      displayName: 'Chat Song Notifications',
      help: 'Shows notifications for playing songs in the chat.\nBesides the songs\' name, it also features a thumbnail and some extra buttons.\n\nBy clicking on the song\'s or author\'s name, a search on plug.dj for that name will be started, to easily find similar tracks.\n\nBy hovering the notification and clicking "description" the songs description will be loaded.\nYou can click anywhere on it to close it again.',
      persistent: ['lastMedia', '$div'],
      setup: function(arg$, arg1$, module_){
        var addListener, $create, addCommand, css, that, $description, this$ = this;
        addListener = arg$.addListener, $create = arg$.$create, this.$createPersistent = arg$.$createPersistent, addCommand = arg$.addCommand, css = arg$.css;
        this.$lastNotif = $();
        this.$div || (this.$div = get$cms().find('.p0ne-song-notif:last'));
        addListener(API, 'advance', bind$(this, 'callback'));
        if (_$context) {
          addListener(_$context, 'room:joined', function(){
            this$.callback({
              media: API.getMedia(),
              dj: API.getDJ()
            });
          });
        }
        addListener(API, 'modSkip', function(modUsername){
          var that, modID;
          console.info("[API.modSkip]", modUsername);
          if (that = getUser(modUsername)) {
            modID = "data-uid='" + that.id + "'";
          } else {
            modID = "";
          }
          this$.$lastNotif.find('.timestamp').after($("<div class='song-skipped un' " + modID + ">").text(modUsername));
        });
        loadStyle(p0ne.host + "/css/p0ne.notif.css?v=" + p0ne.version);
        if (that = API.getMedia()) {
          that.image = httpsify(that.image);
          this.callback({
            media: that,
            dj: API.getDJ()
          });
        }
        addListener(_$context, 'RestrictedSearchEvent:search', function(){
          snooze();
        });
        if (typeof popMenu != 'undefined' && popMenu !== null) {
          addListener(chatDomEvents, 'click', '.song-add', function(){
            var $el, $notif, id, cid, format, msgOffset, obj;
            $el = $(this);
            $notif = $el.closest('.p0ne-song-notif');
            id = $notif.data('id');
            cid = $notif.data('cid');
            format = $notif.data('format');
            console.log("[add from notif]", $notif, id, format, cid);
            msgOffset = $notif.offset();
            $el.offset = function(){
              return {
                left: msgOffset.left + 17,
                top: msgOffset.top + 18
              };
            };
            obj = {
              id: id,
              format: format,
              cid: cid
            };
            obj.get = function(name){
              return this[name];
            };
            obj.media = obj;
            popMenu.isShowing = false;
            popMenu.show($el, [obj]);
          });
        } else {
          css('songNotificationsAdd', '.song-add {display:none}');
        }
        addListener(chatDomEvents, 'click', '.song-author', function(){
          mediaSearch(this.textContent);
        });
        $description = $();
        addListener(chatDomEvents, 'click', '.song-description-btn', function(e){
          var $notif, cid, format, that;
          try {
            if ($description) {
              hideDescription();
            }
            $description = $(this);
            $notif = $description.closest('.p0ne-song-notif');
            cid = $notif.data('cid');
            format = $notif.data('format');
            console.log("[song-notif] showing description", cid, $notif);
            if (that = $description.data('description')) {
              showDescription($notif, that);
            } else {
              console.log("looking up", {
                cid: cid,
                format: format
              }, mediaLookup({
                cid: cid,
                format: format
              }, {
                success: function(data){
                  var text;
                  text = formatPlainText(data.description);
                  $description.data('description', text);
                  showDescription($notif, text);
                },
                fail: function(){
                  $description.text("Failed to load").addClass('.song-description-failed');
                }
              }).timeout(200, function(){
                $description.text("Description loading…").addClass('loading');
              }));
            }
          } catch (e$) {
            e = e$;
            console.error("[song-notif]", e);
          }
        });
        addListener(chatDomEvents, 'click', '.song-description', function(e){
          if (!e.target.href) {
            hideDescription();
          }
        });
        function showDescription($notif, text){
          var h, $cm, ch, offsetTop, ref$;
          $notif.addClass('song-notif-with-description').append($description.removeClass('song-description-btn loading').css({
            opacity: 0,
            position: 'absolute'
          }).addClass('song-description').html(text + " <i class='icon icon-clear-input'></i>"));
          h = $description.height();
          $description.css({
            height: 0,
            position: 'static'
          }).animate({
            opacity: 1,
            height: h
          }, function(){
            $description.css({
              height: 'auto'
            });
          });
          $cm = get$cm();
          ch = $cm.height();
          offsetTop = ((ref$ = $notif.offset()) != null ? ref$.top : void 8) - 100;
          if (offsetTop + h > ch) {
            return $cm.animate({
              scrollTop: $cm.scrollTop() + Math.min(offsetTop + h - ch + 100, offsetTop)
            });
          }
        }
        function hideDescription(){
          var $notif, offsetTop, ref$, $cm;
          if (!$description) {
            return;
          }
          console.log("[song-notif] closing description", $description);
          $notif = $description.closest('.p0ne-song-notif').removeClass('song-notif-with-description');
          $description.animate({
            opacity: 0,
            height: 0
          }, function(){
            $(this).css({
              opacity: '',
              height: 'auto'
            }).removeClass('song-description text').addClass('song-description-btn').text("Description").appendTo($notif.find('.song-notif-next'));
          });
          $description = null;
          offsetTop = ((ref$ = $notif.offset()) != null ? ref$.top : void 8) - 100;
          if (offsetTop < 0) {
            $cm = get$cm();
            return $cm.animate({
              scrollTop: $cm.scrollTop() + offsetTop - 100
            });
          }
        }
        this.showDescription = showDescription;
        this.hideDescription = hideDescription;
        addCommand('songinfo', {
          description: "forces a song notification to be shown, even if the module is disabled",
          callback: function(){
            var that, ref$;
            if (that = ((ref$ = window.songNotif) != null ? ref$.callback : void 8) && API.getMedia()) {
              that.image = httpsify(that.image);
              window.songNotif.callback({
                media: that,
                dj: API.getDJ()
              });
            }
          }
        });
      },
      callback: function(d){
        var media, score, ref$, html, author, title, mediaURL, image, duration, this$ = this;
        media = d.media;
        if ((media != null ? media.id : void 8) !== this.lastMedia) {
          if (this.$div && (score = (ref$ = d.lastPlay) != null ? ref$.score : void 8)) {
            /*@security HTML injection shouldn't be an issue, unless the score attributes are oddly manipulated */
            this.$div.removeClass('song-current').find('.song-stats').html("<div class=score><div class='item positive'><i class='icon icon-history-positive'></i> " + score.positive + "</div><div class='item grabs'><i class='icon icon-history-grabs'></i> " + score.grabs + "</div><div class='item negative'><i class='icon icon-history-negative'></i> " + score.negative + "</div><div class='item listeners'><i class='icon icon-history-listeners'></i> " + ((typeof users != 'undefined' && users !== null ? users.length : void 8) || API.getUsers().length) + "</div></div>");
            this.lastMedia = null;
            this.$lastNotif = this.$div;
          }
        }
        if (!media) {
          return;
        }
        this.lastMedia = media.id;
        if (typeof chat != 'undefined' && chat !== null) {
          chat.lastType = 'p0ne-song-notif';
        }
        this.$div = this.$createPersistent("<div class='update p0ne-song-notif song-current' data-id='" + media.id + "' data-cid='" + media.cid + "' data-format='" + media.format + "'>");
        html = "";
        author = htmlUnescape(media.author);
        title = htmlUnescape(media.title);
        if (media.format === 1) {
          mediaURL = "http://youtube.com/watch?v=" + media.cid;
        } else {
          mediaURL = "https://soundcloud.com/search?q=" + encodeURIComponent(author + ' - ' + title);
        }
        image = httpsify(media.image);
        duration = mediaTime(media.duration);
        (media.format === 1
          ? console.logImg(image, 120, 90)
          : console.logImg(image, 100, 100)).then(function(){
          console.log(getTime() + " [DJ_ADVANCE] " + d.dj.username + " plays '" + author + " - " + title + "' (" + duration + ")", d);
        });
        html += "<div class='song-thumb-wrapper'><img class='song-thumb' src='" + image + "' /><span class='song-duration'>" + duration + "</span><div class='song-add btn'><i class='icon icon-add'></i></div><a class='song-open btn' href='" + mediaURL + "' target='_blank'><i class='icon icon-chat-popout'></i></a><!-- <div class='song-download btn right'><i class='icon icon-###'></i></div> --></div>" + getTimestamp() + "<div class='song-stats'></div><div class='song-dj'></div><b class='song-title'></b><span class='song-author'></span><div class='song-description-btn'>Description</div>";
        this.$div.html(html);
        this.$div.find('.song-title').text(title).prop('title', title);
        this.$div.find('.song-author').text(author);
        this.$div.find('.song-dj').html(formatUserHTML(d.dj, true, {
          flag: true
        }));
        appendChat(this.$div);
        if (media.format === 2) {
          this.$div.addClass('loading');
          mediaLookup(media).then(function(d){
            var that;
            this$.$div.removeClass('loading').data('description', d.description).find('.song-open').attr('href', d.url);
            if (d.download) {
              this$.$div.addClass('downloadable').find('.song-download').attr('href', d.download).attr('title', formatMB(d.downloadSize / 1000000) + " " + ((that = d.downloadFormat) ? '(.' + that + ')' : ''));
            }
          });
        }
      },
      disable: function(){
        if (typeof this.hideDescription == 'function') {
          this.hideDescription();
        }
      }
    });
    window.Notification || (window.Notification = window.webkitNotification);
    module('songNotifPopup', {
      displayName: 'Desktop Song Notifications',
      settings: 'base',
      disabled: true,
      help: 'Shows a small popup notifications on song changes.',
      screenshot: 'https://i.imgur.com/wCrDhvb.png',
      require: ['Notification'],
      setup: function(arg$){
        var addListener, lastNotif;
        addListener = arg$.addListener;
        Notification.requestPermission();
        lastNotif = {
          close: $.noop
        };
        addListener(API, 'advance', function(d){
          lastNotif.close();
          if (d.media) {
            if (!document.hasFocus()) {
              lastNotif = new Notification(d.media.author + " - " + d.media.title, {
                icon: d.media.image,
                body: "played by: " + d.dj.username
              });
              lastNotif.onclick = closeNotif;
            } else {
              lastNotif.close();
            }
          }
        });
        addListener($window, 'focus', closeNotif);
        function closeNotif(){
          lastNotif.close();
        }
      }
    });
    /*@source p0ne.song-info.ls */
    /**
     * plug_p0ne songInfo
     * adds a dropdown with the currently playing song's description when clicking on the now-playing-bar (in the top-center of the page)
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.song-info ~~~~~~~");
    /*####################################
    #              SONG INFO             #
    ####################################*/
    module('songInfo', {
      optional: ['_$context']
      /*settings: \base
      displayName: 'Song-Info Dropdown'
      help: '''
          A panel with the song's description and links to the artist and song.
          Click on the now-playing-bar (in the top-center of the page) to open it.
      '''*/,
      setup: function(arg$){
        var addListener, $create, css, this$ = this;
        addListener = arg$.addListener, $create = arg$.$create, css = arg$.css;
        this.$create = $create;
        css('songInfo', '#now-playing-bar {cursor: pointer;}');
        this.$el = $create('<div>').addClass('p0ne-song-info').appendTo('body');
        this.loadBind = bind$(this, 'load');
        addListener($('#now-playing-bar'), 'click', function(e){
          var $target, media;
          $target = $(e.target);
          if ($target.closest('#history-button').length || $target.closest('#volume').length) {
            return;
          }
          if (!this$.visible) {
            media = API.getMedia();
            if (!media) {
              this$.$el.html("Cannot load information if No song playing!");
            } else if (this$.lastMediaID === media.id) {
              API.once('advance', this$.loadBind);
            } else {
              this$.$el.html("loading…");
              this$.load({
                media: media
              });
            }
            this$.$el.addClass('expanded');
          } else {
            this$.$el.removeClass('expanded');
            API.off('advance', this$.loadBind);
          }
          this$.visible = !this$.visible;
        });
        if (!_$context) {
          return;
        }
        addListener(_$context, 'show:user show:history show:dashboard dashboard:disable', function(){
          if (this$.visible) {
            this$.visible = false;
            this$.$el.removeClass('expanded');
            API.off('advance', this$.loadBind);
          }
        });
      },
      load: function(arg$, isRetry){
        var media, this$ = this;
        media = arg$.media;
        console.log("[song-info]", media);
        if (this.lastMediaID === media.id) {
          this.showInfo(media);
        } else {
          this.lastMediaID = media.id;
          this.mediaData = null;
          mediaLookup(media, {
            fail: function(err){
              console.error("[song-info]", err);
              if (isRetry) {
                this$.$el.html("error loading, retrying…");
                load({
                  media: media
                }, true);
              } else {
                this$.$el.html("Couldn't load song info, sorry =(");
              }
            },
            success: function(mediaData){
              this$.mediaData = mediaData;
              console.log("[song-info] got data", this$.mediaData);
              this$.showInfo(media);
            }
          });
          API.once('advance', this.loadBind);
        }
      },
      showInfo: function(media){
        var d, $meta, $parts;
        if (this.lastMediaID !== media.id || this.disabled) {
          return;
        }
        d = this.mediaData;
        this.$el.html("");
        $meta = this.$create('<div>').addClass('p0ne-song-info-meta').appendTo(this.$el);
        $parts = {};
        if (media.format === 1) {
          $meta.addClass('youtube');
        } else {
          $meta.addClass('soundcloud');
        }
        $('<span>').addClass('p0ne-song-info-author').appendTo($meta).click(function(){
          mediaSearch(media.author);
        }).attr('title', "search for '" + media.author + "'").text(media.author);
        $('<span>').addClass('p0ne-song-info-title').appendTo($meta).click(function(){
          mediaSearch(media.title);
        }).attr('title', "search for '" + media.title + "'").text(media.title);
        $('<br>').appendTo($meta);
        $('<a>').addClass('p0ne-song-info-uploader').appendTo($meta).attr('href', d.uploader.url).attr('target', '_blank').attr('title', "open channel of '" + d.uploader.name + "'").text(d.uploader.name);
        $('<a>').addClass('p0ne-song-info-upload-title').appendTo($meta).attr('href', d.url).attr('target', '_blank').attr('title', (media.format === 1 ? 'open video on YouTube' : 'open Song on SoundCloud') + "").text(d.title);
        $('<br>').appendTo($meta);
        $('<span>').addClass('p0ne-song-info-date').appendTo($meta).text(getDateTime(new Date(d.uploadDate)));
        $('<span>').addClass('p0ne-song-info-duration').appendTo($meta).text("duration " + mediaTime(+d.duration));
        if (media.format === 1 && d.restriction) {
          if (d.restriction.allowed) {
            $('<span>').addClass('p0ne-song-info-blocked').appendTo(this.$el).text("exclusively for " + humanList(d.restriction.allowed) + (d.restriction.allowed.length > 100 ? '(' + d.restriction.allowed.length + '/249)' : ''));
          }
          if (d.restriction.blocked) {
            $('<span>').addClass('p0ne-song-info-blocked').appendTo(this.$el).text("blocked in " + humanList(d.restriction.blocked) + (d.restriction.blocked.length > 100 ? '(' + d.restriction.blocked.length + '/249)' : ''));
          }
        }
        $('<div>').addClass('p0ne-song-info-description').appendTo(this.$el).html(formatPlainText(d.description));
      },
      disable: function(){
        var ref$;
        if ((ref$ = this.$el) != null) {
          ref$.remove();
        }
      }
    });
    /*@source p0ne.avatars.ls */
    /**
     * plug_p0ne Custom Avatars
     * adds custom avatars to plug.dj when connected to a plug_p0ne Custom Avatar Server (ppCAS)
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     *
     * Developer's note: if you create your own custom avatar script or use a modified version of this,
     * you are hereby granted permission connect to this one's default avatar server.
     * However, please drop me an e-mail so I can keep an overview of things.
     * I remain the right to revoke this right anytime.
     */
    console.log("~~~~~~~ p0ne.avatars ~~~~~~~");
    /* THIS IS A TESTING VERSION! SOME THINGS ARE NOT IMPLEMENTED YET! */
    /* (this includes things mentioned in the "notes" section below) */
    /*
    Notes for Socket Servers:
    - server-side:
        - push avatars using something like `socket.trigger('addAvatar', …)`
        - remember, you can offer specific avatars that are for moderators only
        - for people without a role, please do NOT allow avatars that might be confused with staff avatars (e.g. the (old) admin avatars)
            => to avoid confusion
        - dynamically loading avatars is possible
            - e.g. allow users customizing avatars and add them with addAvatar()
                with unique IDs and a URL to a PHP site that generates the avatar
            - WARNING: I HIGHLY discourage from allowing users to set their own images as avatars
                There's ALWAYS "this one guy" who abuses it.
                And most people don't want a bunch of dancing dicks on their screen
    - client-side (custom scripts)
        - when listening to userJoins, please use API.on(API.USER_JOIN, …) to avoid conflicts
        - add avatars using addAvatar(…)
        - do not access p0ne._avatars directly, do avoid conflicts and bugs!
        - if you however STILL manually change something, you might need to do updateAvatarStore() to update it
    */
    if (!window.SockJS) {
      window.Socket = window.WebSocket;
      require.config({
        paths: {
          sockjs: p0ne.host + "/scripts/sockjs"
        }
      });
    }
    console.time("[p0ne custom avatars] loaded SockJS");
    require(['sockjs'], function(SockJS){
      var i$, ref$, ref1$, len$, ev;
      console.timeEnd("[p0ne custom avatars] loaded SockJS");
      if (!window.p0ne) {
        requireHelper('users', function(it){
          var ref$, ref1$;
          return ((ref$ = it.models) != null ? (ref1$ = ref$[0]) != null ? ref1$.attributes.avatarID : void 8 : void 8) && !('isTheUserPlaying' in it) && !('lastFilter' in it);
        });
        window.userID || (window.userID = API.getUser().id);
        if (typeof users != 'undefined' && users !== null) {
          window.user_ || (window.user_ = users.get(userID));
        }
        window.sleep || (window.sleep = function(delay, fn){
          return setTimeout(fn, delay);
        });
        requireHelper('InventoryDropdown', function(it){
          return it.selected;
        });
        requireHelper('avatarAuxiliaries', function(it){
          return it.getAvatarUrl;
        });
        requireHelper('Avatar', function(it){
          return it.AUDIENCE;
        });
        for (i$ = 0, len$ = (ref$ = (typeof user_ != 'undefined' && user_ !== null ? (ref1$ = user_._events) != null ? ref1$['change:avatarID'] : void 8 : void 8) || []).length; i$ < len$; ++i$) {
          ev = ref$[i$];
          if (ev.ctx.comparator === 'id') {
            window.myAvatars = ev.ctx;
            break;
          }
        }
        if (requireHelper('InventoryAvatarPage', function(a){
          var ref$;
          return ((ref$ = a.prototype) != null ? ref$.className : void 8) === 'avatars' && a.prototype.eventName;
        })) {
          window.InventoryDropdown = new InventoryAvatarPage().dropDown.constructor;
        }
      }
      window.Lang = require('lang/Lang');
      window.Cells = requireAll(function(m){
        var ref$;
        return ((ref$ = m.prototype) != null ? ref$.className : void 8) === 'cell' && m.prototype.getBlinkFrame;
      });
      /*####################################
      #           CUSTOM AVATARS           #
      ####################################*/
      user.avatarID = API.getUser().avatarID;
      module('customAvatars', {
        require: ['users', 'Lang', 'avatarAuxiliaries', 'Avatar', 'myAvatars', 'InventoryDropdown'],
        optional: ['user_', '_$context'],
        displayName: 'Custom Avatars',
        settings: 'base',
        settingsSimple: true,
        disabled: true,
        help: 'This adds a few custom avatars to plug.dj\n\nYou can select them like any other avatar, by clicking on your username (below the chat) and then clicking "My Stuff".\nClick on the Dropdown field in the top-left to select another category.\n\nEveryone who uses plug_p0ne sees you with your custom avatar.',
        persistent: ['socket'],
        _settings: {
          vanillaAvatarID: user.avatarID,
          avatarID: user.avatarID
        },
        DEFAULT_SERVER: 'https://ppcas.p0ne.com/_',
        setup: function(arg$, customAvatars){
          var addListener, revert, css, addCommand, avatarID, getAvatarUrl_, _internal_addAvatar, $vanillaAvatarCell, i$, ref$, len$, Cell, urlParser, this$ = this;
          addListener = arg$.addListener, this.replace = arg$.replace, revert = arg$.revert, css = arg$.css, addCommand = arg$.addCommand;
          console.info("[p0ne custom avatars] initializing");
          p0ne._avatars = {};
          avatarID = API.getUser().avatarID;
          if (this.hasNewAvatar = this._settings.vanillaAvatarID && this._settings.vanillaAvatarID !== avatarID) {
            this._settings.vanillaAvatarID = avatarID;
          }
          replace(avatarAuxiliaries, 'getAvatarUrl', function(gAU_){
            return function(avatarID, type){
              var ref$;
              return ((ref$ = p0ne._avatars[avatarID]) != null ? ref$[type] : void 8) || gAU_(avatarID, type);
            };
          });
          getAvatarUrl_ = avatarAuxiliaries.getAvatarUrl_;
          _internal_addAvatar = function(d){
            var avatarID, avatar, base_url;
            avatarID = d.avatarID;
            /*if p0ne._avatars[avatarID]
                console.info "[p0ne custom avatars] updating '#avatarID'", d
            else if not d.isVanilla
                console.info "[p0ne custom avatars] adding '#avatarID'", d*/
            avatar = {
              inInventory: false,
              category: d.category || 'p0ne',
              thumbOffsetTop: d.thumbOffsetTop,
              thumbOffsetLeft: d.thumbOffsetLeft,
              isVanilla: !!d.isVanilla,
              permissions: d.permissions || 0
            };
            if (d.isVanilla) {
              avatar[""] = getAvatarUrl_(avatarID, "");
              avatar.dj = getAvatarUrl_(avatarID, 'dj');
              avatar.b = getAvatarUrl_(avatarID, 'b');
            } else {
              base_url = d.base_url || "";
              avatar[""] = base_url + (d.anim || avatarID + '.png');
              avatar.dj = base_url + (d.dj || avatarID + 'dj.png');
              avatar.b = base_url + (d.b || avatarID + 'b.png');
            }
            p0ne._avatars[avatarID] = avatar;
            if (!(avatar.category in Lang.userAvatars)) {
              Lang.userAvatars[avatar.category] = avatar.category;
            }
            delete Avatar.IMAGES[avatarID + ""];
            delete Avatar.IMAGES[avatarID + "dj"];
            delete Avatar.IMAGES[avatarID + "b"];
            if (!customAvatars.updateAvatarStore.loading) {
              customAvatars.updateAvatarStore.loading = true;
              requestAnimationFrame(function(){
                customAvatars.updateAvatarStore();
                customAvatars.updateAvatarStore.loading = false;
              });
            }
          };
          this.addAvatar = function(avatarID, d){
            var avatar;
            if (typeof d === 'object') {
              avatar = d;
              d.avatarID = avatarID;
            } else if (typeof avatarID === 'object') {
              avatar = avatarID;
            } else {
              throw new TypeError("invalid avatar data passed to addAvatar(avatarID*, data)");
            }
            d.isVanilla = false;
            return _internal_addAvatar(d);
          };
          this.removeAvatar = function(avatarID, replace){
            var i$, ref$, len$, u, vaID;
            for (i$ = 0, len$ = (ref$ = users.models).length; i$ < len$; ++i$) {
              u = ref$[i$];
              if (u.get('avatarID') === avatarID && (vaID = u.get('vanillaAvatarID'))) {
                u.set('avatarID', vaID);
              }
            }
            delete p0ne._avatars[avatarID];
          };
          this.changeAvatar = function(uid, avatarID){
            var u, avatar, ref$;
            if (!(u = users.get(uid)) || !(avatar = p0ne._avatars[avatarID]) && !(avatarID = u.get('vanillaAvatarID'))) {
              console.warn("[p0ne custom avatars] can't load user or avatar: '" + uid + "', '" + avatarID + "'");
              return;
            }
            if (!avatar.permissions || API.hasPermissions(uid, avatar.permissions)) {
              if (!u.get('vanillaAvatarID')) {
                u.set('vanillaAvatarID', u.get('avatarID'));
              }
              u.set('avatarID', avatarID);
            } else {
              console.warn("user with ID " + uid + " doesn't have permissions for avatar '" + avatarID + "'");
            }
            if (uid === userID) {
              if ((ref$ = p0ne._avatars[avatarID]) != null && ref$.isVanilla) {
                this$._settings.vanillaAvatarID = avatarID;
              }
              this$._settings.avatarID = avatarID;
            }
          };
          this.updateAvatarStore = function(){
            var styles, avatarIDs, l, avatarID, ref$, avi, vanilla, categories, ref1$, key$, category, avis, i$, len$;
            styles = "";
            avatarIDs = [];
            l = 0;
            for (avatarID in ref$ = p0ne._avatars) {
              avi = ref$[avatarID];
              if (!avi.isVanilla) {
                avatarIDs[l++] = avatarID;
                styles += ".avi-" + avatarID + " {background-image: url('" + avi[''] + "');background-position: " + (avi.thumbOffsetLeft || 0) + "px " + (avi.thumbOffsetTop || 0) + "px";
                styles += "}\n";
              }
            }
            if (l) {
              css('p0ne_avatars', ".avi {background-repeat: no-repeat;}\n.thumb.small .avi-" + avatarIDs.join(', .thumb.small .avi-') + " {background-size: 1393px; /* = 836/15*24 thumbsWidth / thumbsCount * animCount*/}\n.thumb.medium .avi-" + avatarIDs.join(', .thumb.medium .avi-') + " {background-size: 1784px; /* = 1115/15*24 thumbsWidth / thumbsCount * animCount*/}\n" + styles + "");
            }
            vanilla = [];
            l = 0;
            categories = {};
            for (avatarID in ref$ = p0ne._avatars) {
              avi = ref$[avatarID];
              if (avi.inInventory || !avi.isVanilla) {
                if (avi.isVanilla) {
                  vanilla[l++] = new Avatar({
                    id: avatarID,
                    category: avi.category,
                    type: 'avatar'
                  });
                } else {
                  (ref1$ = categories[key$ = avi.category] || (categories[key$] = []))[ref1$.length] = avatarID;
                }
              }
            }
            myAvatars.models = [];
            l = 0;
            for (category in categories) {
              avis = categories[category];
              for (i$ = 0, len$ = avis.length; i$ < len$; ++i$) {
                avatarID = avis[i$];
                myAvatars.models[l++] = new Avatar({
                  id: avatarID,
                  category: category,
                  type: 'avatar'
                });
              }
            }
            myAvatars.models = myAvatars.models.concat(vanilla);
            myAvatars.length = myAvatars.models.length;
            myAvatars.trigger('reset', false);
            console.log(getTime() + " [p0ne custom avatars] avatar inventory updated");
            return true;
          };
          addListener(myAvatars, 'reset', function(vanillaTrigger){
            if (vanillaTrigger) {
              this$.updateAvatarStore();
            }
          });
          replace(InventoryDropdown.prototype, 'draw', function(d_){
            return function(){
              var html, categories, curAvatarID, i$, ref$, len$, avi, curCategory, category;
              html = "";
              categories = {};
              curAvatarID = API.getUser().avatarID;
              for (i$ = 0, len$ = (ref$ = myAvatars.models).length; i$ < len$; ++i$) {
                avi = ref$[i$];
                categories[avi.get('category')] = true;
                if (avi.id === curAvatarID) {
                  curCategory = avi.get('category');
                }
              }
              curCategory || (curCategory = (ref$ = myAvatars.models[0]) != null ? ref$.get('category') : void 8);
              for (category in categories) {
                html += "<div class=row data-value='" + category + "'><span>" + Lang.userAvatars[category] + "</span></div>";
              }
              this.$el.html("<dl class=dropdown><dt><span></span><i class='icon icon-arrow-down-grey'></i><i class='icon icon-arrow-up-grey'></i></dt><dd>" + html + "</dd></dl>").on('click', 'dt', bind$(this, 'onBaseClick')).on('click', '.row', bind$(this, 'onRowClick'));
              if (!categories[InventoryDropdown.selected]) {
                InventoryDropdown.selected = curCategory;
              }
              this.select(InventoryDropdown.selected);
              this.$el.show();
            };
          });
          Lang.userAvatars.p0ne = "Custom Avatars";
          /*for {id:avatarID, attributes:{category}} in AvatarList.models
              _internal_addAvatar do
                  avatarID: avatarID
                  isVanilla: true
                  category: category
                  #category: avatarID.replace /\d+$/, ''
                  #category: avatarID.substr(0,avatarID.length-2) damn you "tastycat"
          console.log "[p0ne custom avatars] added internal avatars", p0ne._avatars
          */
          for (i$ = 0, len$ = (ref$ = window.Cells).length; i$ < len$; ++i$) {
            Cell = ref$[i$];
            replace(Cell.prototype, 'render', fn$);
            replace(Cell.prototype, 'onClick', fn1$);
          }
          addListener(user_, 'change:vanillaAvatarID', function(user_, newAvatarID){
            var view, ref$, i$, ref1$, len$, cell;
            if ($vanillaAvatarCell != null) {
              $vanillaAvatarCell.remove();
            }
            if (view = app != null ? (ref$ = app.user.view) != null ? ref$.view : void 8 : void 8) {
              for (i$ = 0, len$ = (ref1$ = view.cells || []).length; i$ < len$; ++i$) {
                cell = ref1$[i$];
                if (cell.model.id === newAvatarID) {
                  $vanillaAvatarCell = $("<div class=p0ne-vanilla-avatar-highlight>your vanilla avatar</div>").appendTo(cell.$el.find('.top'));
                  break;
                }
              }
            }
          });
          user_.set('vanillaAvatarID', this._settings.vanillaAvatarID);
          $.ajax({
            url: '/_/store/inventory/avatars',
            success: function(d){
              var i$, ref$, len$, avatar;
              for (i$ = 0, len$ = (ref$ = d.data).length; i$ < len$; ++i$) {
                avatar = ref$[i$];
                if (!p0ne._avatars[avatar.id]) {
                  _internal_addAvatar({
                    avatarID: avatar.id,
                    isVanilla: true,
                    category: avatar.category
                  });
                }
                p0ne._avatars[avatar.id].inInventory = true;
              }
              this$.updateAvatarStore();
            }
          });
          if ((typeof _$context != 'undefined' && _$context !== null) && (typeof user_ != 'undefined' && user_ !== null)) {
            addListener(_$context, 'ack', function(){
              replace(user_, 'set', function(s_){
                return function(obj, val){
                  if (obj.avatarID && obj.avatarID === this.get('vanillaAvatarID')) {
                    delete obj.avatarID;
                  }
                  return s_.call(this, obj, val);
                };
              });
            });
            addListener(_$context, 'UserEvent:friends', function(){
              revert(user_, 'set');
            });
          }
          /*####################################
          #         ppCAS Integration          #
          ####################################*/
          this.oldBlurb = API.getUser().blurb;
          this.blurbIsChanged = false;
          urlParser = document.createElement('a');
          addCommand('ppcas', {
            description: 'changes the plug_p0ne Custom Avatar Server ("ppCAS")',
            callback: function(str){
              var server, ref$, forceReconnect;
              server = $.trim(str.substr(6));
              if (server === "<url>") {
                chatWarn("hahaha, no. You have to replace '<url>' with an actual URL of a ppCAS server, otherwise it won't work.", "p0ne avatars");
                return;
              } else if (server === 'default') {
                server = this$.DEFAULT_SERVER;
              } else if (server === 'reconnect') {
                server = ((ref$ = this$.socket) != null ? ref$.url : void 8) || this$.DEFAULT_SERVER;
                forceReconnect = true;
              } else if (server.length === 0) {
                chatWarn("Use `/ppCAS <url>` to connect to a plug_p0ne Custom Avatar Server. Use `/ppCAS default` to connect to the default server again. or `/ppCAS reconnect` to force-reconnect to the current server", "p0ne avatars");
                return;
              }
              urlParser.href = server;
              if (urlParser.host !== location.host) {
                console.log(getTime() + " [p0ne custom avatars] connecting to", server);
                this$.connect(server, forceReconnect);
              } else {
                console.warn(getTime() + " [p0ne custom avatars] invalid ppCAS server");
              }
            }
          });
          this.connect(this.DEFAULT_SERVER);
          function fn$(r_){
            return function(){
              r_.call(this);
              if (customAvatars._settings.avatarID !== customAvatars._settings.vanillaAvatarID && customAvatars._settings.vanillaAvatarID === this.model.get('id')) {
                $vanillaAvatarCell = $("<div class=p0ne-vanilla-avatar-highlight>your vanilla avatar</div>").appendTo(this.$el.find('.top'));
              }
            };
          }
          function fn1$(oC_){
            return function(){
              var avatarID, ref$, ref1$;
              avatarID = this.model.get('id');
              if (!p0ne._avatars[avatarID] || p0ne._avatars[avatarID].inInventory) {
                oC_.apply(this, arguments);
                user_.set('vanillaAvatarID', customAvatars._settings.vanillaAvatarID = avatarID);
                if ((ref$ = customAvatars.socket) != null) {
                  ref$.emit('changeAvatarID', null);
                }
              } else {
                customAvatars.changeAvatar(userID, avatarID);
                if ((ref1$ = customAvatars.socket) != null) {
                  ref1$.emit('changeAvatarID', avatarID);
                }
                this.onSelected();
              }
            };
          }
        },
        connectAttemps: 1,
        connect: function(url, reconnecting, reconnectWarning){
          var reconnect, close_, user, oldBlurb, newBlurb, this$ = this;
          if (!reconnecting && this.socket) {
            if (url === this.socket.url && this.socket.readyState === 1) {
              return;
            }
            this.socket.close();
          }
          console.log("[p0ne custom avatars] using socket as ppCAS avatar server");
          reconnect = true;
          _$context.trigger('ppCAS:connecting');
          API.trigger('ppCAS:connecting');
          this.socket = new SockJS(url);
          this.socket.url = url;
          this.socket.on = this.socket.addEventListener;
          this.socket.off = this.socket.removeEventListener;
          this.socket.once = function(type, callback){
            this.on(type, function(){
              this.off(type, callback);
              callback.apply(this, arguments);
            });
          };
          this.socket.emit = function(type){
            var data;
            data = slice$.call(arguments, 1);
            console.log(getTime() + " [ppCAS] > [" + type + "]", data);
            this.send(JSON.stringify({
              type: type,
              data: data
            }));
          };
          this.socket.trigger = function(type, args){
            var listeners, i$, len$, fn;
            if (typeof args !== 'object' || !(args != null && args.length)) {
              args = [args];
            }
            listeners = this._listeners[type];
            if (listeners) {
              for (i$ = 0, len$ = listeners.length; i$ < len$; ++i$) {
                fn = listeners[i$];
                fn.apply(this, args);
              }
            } else {
              console.error(getTime() + " [ppCAS] unknown event '" + type + "'");
            }
          };
          this.socket.onmessage = function(arg$){
            var message, ref$, type, data, e;
            message = arg$.data;
            try {
              ref$ = JSON.parse(message), type = ref$.type, data = ref$.data;
              console.log(getTime() + " [ppCAS] < [" + type + "]", data);
            } catch (e$) {
              e = e$;
              console.warn(getTime() + " [ppCAS] invalid message received", message, e);
              return;
            }
            this$.socket.trigger(type, data);
          };
          close_ = this.socket.close;
          this.socket.close = function(){
            this.trigger('close');
            close_.apply(this, arguments);
          };
          user = API.getUser();
          oldBlurb = user.blurb || "";
          newBlurb = oldBlurb.replace(/🐎\w{6}/g, '');
          if (oldBlurb !== newBlurb) {
            this.changeBlurb(newBlurb, {
              success: function(){
                console.info(getTime() + " [ppCAS] removed old authToken from user blurb");
              }
            });
          }
          this.socket.on('authToken', function(authToken){
            var user, newBlurb;
            user = API.getUser();
            this$.oldBlurb = user.blurb || "";
            if (!user.blurb) {
              newBlurb = authToken;
            } else if (user.blurb.length >= 72) {
              newBlurb = user.blurb.substr(0, 71) + "… 🐎" + authToken;
            } else {
              newBlurb = user.blurb + " 🐎" + authToken;
            }
            this$.blurbIsChanged = true;
            this$.changeBlurb(newBlurb, {
              success: function(){
                this$.blurbIsChanged = false;
                this$.socket.emit('auth', userID);
              },
              error: function(){
                console.error(getTime() + " [ppCAS] failed to authenticate by changing the blurb.");
                this$.changeBlurb(this$.oldBlurb, {
                  success: function(){
                    console.info(getTime() + " [ppCAS] blurb reset.");
                  }
                });
              }
            });
          });
          this.socket.on('authAccepted', function(){
            this$.connectAttemps = 0;
            reconnecting = false;
            this$.changeBlurb(this$.oldBlurb, {
              success: function(){
                this$.blurbIsChanged = false;
              },
              error: function(){
                chatWarn("failed to authenticate to avatar server, maybe plug.dj is down or changed it's API?", "p0ne avatars");
                this$.changeBlurb(this$.oldBlurb, {
                  error: function(){
                    console.error(getTime() + " [ppCAS] failed to reset the blurb.");
                  }
                });
              }
            });
          });
          this.socket.on('authDenied', function(){
            console.warn(getTime() + " [ppCAS] authDenied");
            chatWarn("authentification failed", "p0ne avatars");
            this$.changeBlurb(this$.oldBlurb, {
              success: function(){
                this$.blurbIsChanged = false;
              },
              error: function(){
                this$.changeBlurb(this$.oldBlurb, {
                  error: function(){
                    console.error(getTime() + " [ppCAS] failed to reset the blurb.");
                  }
                });
              }
            });
            chatWarn("Failed to authenticate with user id '" + userID + "'", "p0ne avatars");
          });
          this.socket.on('avatars', function(avatars){
            var user, avatarID, avatar;
            user = API.getUser();
            this$.socket.avatars = avatars;
            for (avatarID in avatars) {
              avatar = avatars[avatarID];
              this$.addAvatar(avatarID, avatar);
            }
            if (this$._settings.avatarID in avatars) {
              this$.changeAvatar(userID, this$._settings.avatarID);
              this$.socket.emit('changeAvatarID', this$._settings.avatarID);
            }
            /*else if not @hasNewAvatar and @_settings.avatarID of avatars
                @socket.emit \changeAvatarID, @_settings.avatarID*/
            if (this$.socket.users) {
              requestAnimationFrame(initUsers);
            }
          });
          this.socket.on('users', function(users){
            this$.socket.users = users;
            if (this$.socket.avatars) {
              requestAnimationFrame(initUsers);
            }
          });
          function initUsers(avatarID){
            var userID, ref$;
            for (userID in ref$ = this$.socket.users) {
              avatarID = ref$[userID];
              this$.changeAvatar(userID, avatarID);
            }
            if (reconnecting) {
              chatWarn("reconnected", "p0ne avatars");
            }
            _$context.trigger('ppCAS:connected');
            return API.trigger('ppCAS:connected');
          }
          this.socket.on('changeAvatarID', function(userID, avatarID){
            console.log(getTime() + " [ppCAS] change other's avatar:", userID, avatarID);
            this$.changeAvatar(userID, avatarID);
          });
          this.socket.on('disconnect', function(userID){
            console.log(getTime() + " [ppCAS] user disconnected:", userID);
            this$.changeAvatarID(userID, avatarID);
          });
          this.socket.on('disconnected', function(reason){
            this$.socket.trigger('close', reason);
          });
          this.socket.onclose = function(e){
            var timeout;
            reconnect = false;
            console.warn(getTime() + " [ppCAS] DISCONNECTED", e);
            _$context.trigger('ppCAS:disconnected');
            API.trigger('ppCAS:disconnected');
            /*if e.wasClean
                reconnect := false
            else*/
            if (reconnect && !this$.disabled) {
              if (this$.connectAttemps < 90) {
                timeout = ~~((5000 + Math.random() * 5000) * this$.connectAttemps * this$.connectAttemps);
              } else {
                timeout = 15 .min;
              }
              console.info(getTime() + " [ppCAS] reconnecting in " + humanTime(timeout) + " (" + xth(this$.connectAttemps) + " attempt)");
              this$.reconnectTimer = sleep(timeout, function(){
                console.log(getTime() + " [ppCAS] reconnecting…");
                this$.connectAttemps++;
                this$.connect(url, true, this$.connectAttemps === 1);
                _$context.trigger('ppCAS:connecting');
                API.trigger('ppCAS:connecting');
              });
            }
          };
        },
        changeBlurb: function(newBlurb, options){
          options == null && (options = {});
          $.ajax({
            method: 'PUT',
            url: '/_/profile/blurb',
            contentType: 'application/json',
            data: JSON.stringify({
              blurb: newBlurb
            }),
            success: options.success,
            error: options.error
          });
        },
        disable: function(){
          var ref$, avatarID, ref1$, avi, i$, user, that;
          if (this.blurbIsChanged) {
            this.changeBlurb(this.oldBlurb);
          }
          if ((ref$ = this.socket) != null) {
            ref$.close();
          }
          clearTimeout(this.reconnectTimer);
          for (avatarID in ref1$ = p0ne._avatars) {
            avi = ref1$[avatarID];
            avi.inInventory = false;
          }
          this.updateAvatarStore();
          for (i$ in ref1$ = users.models) {
            user = ref1$[i$];
            if (that = user.get('vanillaAvatarID')) {
              user.set('avatarID', that);
            }
          }
        }
      });
      module('ppCASStatusRing', {
        settings: 'dev',
        help: 'shows whether or not you are connected to the ppCAS (plug_p0ne Custom Avatar Server) by drawing a ring around your avatar in the footer (below the chat).\ngreen: connected\norange: connecting\nred: disconnected',
        setup: function(arg$){
          var addListener, ref$, this$ = this;
          addListener = arg$.addListener;
          this.$footerAvi = $('#footer-user .thumb');
          addListener(API, 'ppCAS:connected', function(){
            this$.$footerAvi.css({
              borderColor: 'limegreen'
            });
          });
          addListener(API, 'ppCAS:connecting', function(){
            this$.$footerAvi.css({
              borderColor: 'orange'
            });
          });
          addListener(API, 'ppCAS:disconnected', function(){
            this$.$footerAvi.css({
              borderColor: 'red'
            });
          });
          switch ((ref$ = customAvatars.socket) != null && ref$.readyState) {
          case 0:
            this.$footerAvi.css({
              borderColor: 'orange'
            });
            break;
          case 1:
            this.$footerAvi.css({
              borderColor: 'limegreen'
            });
            break;
          default:
            this.$footerAvi.css({
              borderColor: 'red'
            });
          }
        },
        disable: function(){
          if (this.$footerAvi) {
            this.$footerAvi.css({
              borderColor: ''
            });
          }
          $('.p0ne-vanilla-avatar-highlight').remove();
        }
      });
    });
    /*@source p0ne.settings.ls */
    /**
     * Settings pane for plug_p0ne
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.settings ~~~~~~~");
    /*####################################
    #              SETTINGS              #
    ####################################*/
    module('p0neSettings', {
      _settings: {
        open: false,
        openGroup: 'base',
        expert: false,
        largeSettingsPanel: true
      },
      setup: function(arg$, p0neSettings, oldModule){
        var $create, addListener, $ppM, $ppI, $ppW, $ppS, $ppP, i$, ref$, module, ref1$, panelIconTimeout, this$ = this;
        $create = arg$.$create, addListener = arg$.addListener;
        $ppM = $create("<div id=p0ne-menu>").insertAfter('#app-menu');
        $ppI = $("<div class=p0ne-icon>p<div class=p0ne-icon-sub>0</div></div>").appendTo($ppM);
        $ppW = this.$ppW = $("<div class=p0ne-settings-wrapper>").appendTo($ppM);
        $ppS = $("<div class='p0ne-settings noselect'>").appendTo($ppW);
        $ppP = $("<div class=p0ne-settings-popup>").appendTo($ppM).hide();
        this.$vip = $("<div class=p0ne-settings-vip>").appendTo($ppS);
        this.$vip.items = this.$vip;
        this.$ppInfo = $("<div class=p0ne-settings-footer><div class=p0ne-icon>p<div class=p0ne-icon-sub>0</div></div><div class=p0ne-settings-version>v" + p0ne.version + "</div><div class=p0ne-settings-help-btn>help</div></div>").on('click', '.p0ne-settings-help-btn', function(){
          var ref$;
          if ((ref$ = p0ne.modules.p0neHelp) != null) {
            ref$.enable();
          }
        }).appendTo($ppS);
        /*@$expertToggle = @$ppInfo .find \.p0ne-settings-expert-toggle
            .click @~expertToggle*/
        for (i$ in ref$ = p0ne.modules) {
          module = ref$[i$];
          if (!module.loading) {
            this.addModule(module);
            if ((ref1$ = module._$settingsPanel) != null) {
              ref1$.wrapper.appendTo($ppM);
            }
            if (!module.disabled) {
              this.loadSettingsExtra(true, module);
            }
          }
        }
        this._settings.open = !this._settings.open;
        this._settings.largeSettingsPanel = !this._settings.largeSettingsPanel;
        $ppI.click(function(){
          if (this$.toggleMenu()) {
            if (this$._settings.largeSettingsPanel = !this$._settings.largeSettingsPanel) {
              $ppW.addClass('p0ne-settings-large p0ne-settings-expert');
              $ppI.children().text('2');
              $ppP.appendTo($ppW);
              if (!this$._settings.openGroup) {
                p0neSettings.openGroup('base');
              }
            } else {
              $ppW.removeClass('p0ne-settings-large');
              $ppI.children().text('0');
              $ppP.appendTo($ppM);
            }
          }
        }).click();
        $ppW.addClass('p0ne-settings-expert');
        $ppW.on('click', '.p0ne-settings-summary', throttle(200, function(e){
          var group;
          group = $(this).parent().data('group');
          if (p0neSettings._settings.openGroup !== group) {
            p0neSettings.openGroup(group);
          } else if (!p0neSettings._settings.largeSettingsPanel) {
            p0neSettings.closeGroup(group);
          }
          e.preventDefault();
        }));
        $ppW.on('click', '.checkbox', throttle(200, function(){
          var $this, enable, $el, module;
          $this = $(this);
          enable = this.checked;
          $el = $this.closest('.p0ne-settings-item');
          module = $el.data('module');
          if (typeof module === 'string') {
            module = window[module] || {};
          }
          if (enable) {
            module.enable();
          } else {
            module.disable();
          }
        }));
        panelIconTimeout = 0;
        $ppW.on('click', '.p0ne-settings-panel-icon', function(e){
          var $this, module, ref$, ref1$, offsetLeft;
          e.stopImmediatePropagation();
          e.preventDefault();
          if (panelIconTimeout) {
            return;
          }
          panelIconTimeout = sleep(200, function(){
            return panelIconTimeout = 0;
          });
          $this = $(this);
          module = $this.closest('.p0ne-settings-item').data('module');
          console.log("[p0ne-settings-panel-icon] clicked", panelIconTimeout, !!module._$settingsPanel, (ref$ = module._$settingsPanel) != null ? ref$.open : void 8, (ref1$ = module._$settingsPanel) != null ? ref1$.wrapper : void 8);
          if (!module._$settingsPanel) {
            module._$settingsPanel = {
              open: false,
              wrapper: $('<div class=p0ne-settings-panel-wrapper>').appendTo($ppM),
              $el: $("<div class='p0ne-settings-panel p0ne-settings-panel-" + module.moduleName.toLowerCase() + "'>")
            };
            module._$settingsPanel.$el.appendTo(module._$settingsPanel.wrapper);
            module.settingsPanel(module._$settingsPanel.$el, module);
          }
          offsetLeft = $ppW.width();
          if (module._$settingsPanel.open) {
            module._$settingsPanel.wrapper.animate({
              left: offsetLeft - module._$settingsPanel.$el.width()
            }, function(){
              return module._$settingsPanel.wrapper.hide();
            });
            module._$settingsPanel.open = false;
            $this.find('.icon').removeClass('icon-settings-white').addClass('icon-settings-grey');
          } else {
            module._$settingsPanel.wrapper.show().css({
              left: offsetLeft - module._$settingsPanel.$el.width()
            }).animate({
              left: offsetLeft
            });
            module._$settingsPanel.open = true;
            $this.find('.icon').addClass('icon-settings-white').removeClass('icon-settings-grey');
          }
        });
        $ppW.on('mouseover', '.p0ne-settings-item, .p0ne-settings-extra', function(e){
          var $module, module, l, maxT, h, t, tt, ref$, diff;
          if (p0neSettings._settings.largeSettingsPanel || $(e.target).is('.p0ne-settings-help')) {
            $module = $(this);
            module = $module.data('module');
            if (!module.help && !module.screenshot) {
              return;
            }
            $ppP.html("<div class=p0ne-settings-popup-triangle></div><h3>" + module.displayName + "</h3>" + (module.help || '') + "" + (!module.screenshot
              ? ''
              : '<img src=' + module.screenshot + '>') + "");
            l = $ppW.width();
            maxT = $ppM.height();
            h = $ppP.height();
            t = $module.offset().top - 50;
            tt = (ref$ = t - h / 2) > 0 ? ref$ : 0;
            diff = tt - (maxT - h - 30);
            if (diff > 0) {
              t += diff + 10 - tt;
              tt -= diff;
            } else if (tt !== 0) {
              t = '50%';
            }
            $ppP.css({
              top: tt,
              left: l
            });
            if (p0neSettings._settings.largeSettingsPanel) {
              $ppP.show();
            } else {
              $ppP.stop().fadeIn();
            }
            $ppP.find('.p0ne-settings-popup-triangle').css({
              top: 14 > t ? 14 : t
            });
          }
        });
        $ppM.on('mouseout', '.p0ne-settings-has-more, .p0ne-settings-popup', function(){
          if (p0neSettings._settings.largeSettingsPanel) {
            $ppP.hide();
          } else {
            $ppP.stop().fadeOut();
          }
        });
        $ppP.on('mouseover', function(){
          if (p0neSettings._settings.largeSettingsPanel) {
            $ppP.show();
          } else {
            $ppP.stop().fadeIn();
          }
        });
        addListener(API, 'p0ne:moduleLoaded', function(module){
          this$.addModule(module);
        });
        addListener(API, 'p0ne:moduleEnabled', function(module, isUpdate){
          var ref$;
          if ((ref$ = module._$settings) != null) {
            ref$.addClass('p0ne-settings-item-enabled').find('.checkbox')[0].checked = true;
          }
          if (!isUpdate) {
            this$.loadSettingsExtra(true, module);
          }
        });
        addListener(API, 'p0ne:moduleUpdated', function(module, module_){
          var ref$, ref1$, ref2$;
          if ((ref$ = module_._$settingsExtra) != null) {
            ref$.remove();
          }
          if ((ref1$ = module_._$settingsPanel) != null) {
            ref1$.remove();
          }
          delete module_._$settingsPanel;
          if (module.settings) {
            this$.addModule(module, module_);
          }
          if ((ref2$ = module_._$settings) != null) {
            ref2$.remove();
          }
          /* # i think this is a highly neglectable edge case
          if module.help != module_.help and module._$settings?.is \:hover
              # force update .p0ne-settings-popup (which displays the module.help)
              module._$settings .mouseover!*/
        });
        addListener(API, 'p0ne:moduleDisabled', function(module_){
          var ref$, ref1$;
          if (module_._$settings) {
            module_._$settings.removeClass('p0ne-settings-item-enabled').find('.checkbox:first').attr('checked', false);
            if ((ref$ = module_._$settingsExtra) != null) {
              ref$.stop().slideUp(function(){
                module_._$settingsExtra.remove();
              });
            }
            if ((ref1$ = module_._$settingsPanel) != null) {
              ref1$.wrapper.remove();
            }
            delete module_._$settingsPanel;
          }
        });
        addListener($body, 'click', '#app-menu', function(){
          this$.toggleMenu(false);
        });
        if (typeof _$context != 'undefined' && _$context !== null) {
          addListener(_$context, 'show:user show:history show:dashboard dashboard:disable', function(){
            this$.toggleMenu(false);
          });
        }
        addListener($body, 'click', '#plugcubed', function(){
          this$.toggleMenu(false);
        });
        _.defer(function(){
          var d, scrollLeftMax;
          d = $('<div>').css({
            height: 100,
            width: 100,
            overflow: 'auto'
          }).append($('<div>').css({
            height: 102,
            width: 100
          })).appendTo('body');
          if ('scrollLeftMax' in d[0]) {
            scrollLeftMax = d[0].scrollLeftMax;
          } else {
            d[0].scrollLeft = Number.POSITIVE_INFINITY;
            scrollLeftMax = d[0].scrollLeft;
          }
          if (scrollLeftMax !== 0) {
            $ppW.css({
              paddingRight: scrollLeftMax
            });
          }
          d.remove();
        });
      },
      toggleExpert: function(state){
        this.$expertToggle.text((state != null
          ? state
          : state = this._settings.expert) ? "show less options" : "show all options");
        $ppW.toggleClass('p0ne-settings-expert', state);
        this._settings.expert = state;
      },
      toggleMenu: function(state){
        var i$, ref$, module, ref1$;
        if (state != null
          ? state
          : state = !this._settings.open) {
          this.$ppW.css({
            maxHeight: '100%'
          });
        } else {
          this.$ppW.css({
            maxHeight: 0
          });
          for (i$ in ref$ = p0ne.modules) {
            module = ref$[i$];
            if ((ref1$ = module._$settingsPanel) != null && ref1$.open) {
              module._$settingsPanel.wrapper.animate({
                left: this.$ppW.width() - module._$settingsPanel.$el.width()
              }, fn$);
              module._$settingsPanel.open = false;
            }
          }
        }
        return this._settings.open = state;
        function fn$(){
          return $(this).hide();
        }
      },
      groups: {},
      groupEmpty: {},
      moderationGroup: $(),
      openGroup: function(group){
        var $s, this$ = this;
        if (this._settings.openGroup) {
          this.closeGroup(this._settings.openGroup);
        }
        this._settings.openGroup = group;
        $s = this.groups[group].removeClass('closed').addClass('open');
        if (this._settings.largeSettingsPanel) {
          $s.css({
            height: 'auto'
          });
        } else {
          requestAnimationFrame(function(){
            $s.css({
              height: $s[0].scrollHeight
            });
            sleep(500, function(){
              if (this$._settings.openGroup === group) {
                $s.css({
                  height: 'auto'
                });
              }
            });
          });
        }
      },
      closeGroup: function(group){
        var $s, this$ = this;
        this._settings.openGroup = false;
        $s = this.groups[group].removeClass('open');
        if (this._settings.largeSettingsPanel) {
          $s.css({
            height: 30
          }).addClass('closed');
        } else {
          $s.css({
            height: $s[0].scrollHeight
          });
          requestAnimationFrame(function(){
            $s.css({
              height: 30
            });
            sleep(500, function(){
              if (this$._settings.openGroup !== group) {
                $s.addClass('closed');
              }
            });
          });
        }
      },
      addModule: function(module, module_){
        var itemClasses, icons, i$, ref$, len$, k, $s;
        if (module.settings) {
          itemClasses = 'p0ne-settings-item';
          icons = "";
          for (i$ = 0, len$ = (ref$ = ['help', 'screenshot']).length; i$ < len$; ++i$) {
            k = ref$[i$];
            if (module[k]) {
              icons += "<div class=p0ne-settings-" + k + "></div>";
            }
          }
          if (module.settingsPanel) {
            icons += "<div class=p0ne-settings-panel-icon><i class='icon icon-settings-white'></i></div>";
          }
          if (icons.length) {
            icons = "<div class=p0ne-settings-icons>" + icons + "</div>";
            itemClasses += ' p0ne-settings-has-more';
          }
          if (module.settingsExtra) {
            itemClasses += ' p0ne-settings-has-extra';
          }
          if (!module.disabled) {
            itemClasses += ' p0ne-settings-item-enabled';
          }
          if (!module.settingsSimple) {
            itemClasses += ' p0ne-settings-item-expert';
          }
          if (module.settingsVip) {
            $s = this.$vip;
            itemClasses += ' p0ne-settings-is-vip';
          } else if (!($s = this.groups[module.settings])) {
            $s = this.groups[module.settings] = $('<div class=p0ne-settings-group>').data('group', module.settings).append($('<div class=p0ne-settings-summary>').text(module.settings)).insertBefore(this.$ppInfo);
            $s.items = $('<div class=p0ne-settings-items>').appendTo($s);
            if (module.settings === 'moderation') {
              $s.addClass('p0ne-settings-group-moderation');
            }
            if (this._settings.openGroup === module.settings) {
              this.openGroup(module.settings);
            } else {
              $s.addClass('closed').css({
                height: 30
              });
            }
          }
          if (!module.settingsVip && !this.groupEmpty[module.settings] && (this.groupEmpty[module.settings] = module.settingsSimple)) {
            $s.addClass('p0ne-settings-has-simple');
          }
          module._$settings = $("<label class='" + itemClasses + "'><input type=checkbox class=checkbox " + (module.disabled ? '' : 'checked') + " /><div class=togglebox></div>" + module.displayName + "" + icons + "</label>").data('module', module);
          if (module_ != null && ((ref$ = module_._$settings) != null && ref$.parent().parent().is($s))) {
            module._$settings.addClass('updated').insertAfter(module_._$settings);
            sleep(2000, function(){
              module._$settings.removeClass('updated');
            });
          } else {
            module._$settings.appendTo($s.items);
          }
        }
      },
      loadSettingsExtra: function(autofocus, module){
        var $group, err, ref$;
        try {
          if (module.settingsExtra) {
            module.settingsExtra(module._$settingsExtra = $("<div class=p0ne-settings-extra>").data('module', module).insertAfter(module._$settings));
            $group = this.groups[module.settings];
            if (autofocus && this._settings.openGroup === module.settings) {
              module._$settingsExtra.css({
                height: 0
              });
              requestAnimationFrame(function(){
                module._$settingsExtra.css({
                  height: module._$settingsExtra[0].scrollHeight
                });
                sleep(250, function(){
                  module._$settingsExtra.css({
                    height: 'auto'
                  });
                });
              });
              module._$settingsExtra.find('input').focus();
            }
          }
        } catch (e$) {
          err = e$;
          console.error("[" + module.moduleName + "] error while processing settingsExtra", err.stack);
          if ((ref$ = module._$settingsExtra) != null) {
            ref$.remove();
          }
        }
      }
    });
    /*@source p0ne.moderate.ls */
    /**
     * plug_p0ne modules to help moderators do their job
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.moderate ~~~~~~~");
    /*####################################
    #       BASE MODERATION MODULE       #
    ####################################*/
    module('enableModeratorModules', {
      require: ['user_'],
      setup: function(arg$){
        var addListener, prevRole;
        addListener = arg$.addListener;
        prevRole = user_.get('role');
        if (user.isStaff) {
          $body.addClass('user-is-staff');
        }
        addListener(user_, 'change:role', function(user_, newRole){
          var i$, ref$, m;
          console.log("[p0ne] change:role from " + prevRole + " to " + newRole);
          if (newRole > 1 && prevRole < 2) {
            console.info("[p0ne] enabling moderator modules");
            for (i$ in ref$ = p0ne.modules) {
              m = ref$[i$];
              if (m.modDisabled) {
                console.log("[p0ne moderator] enabling", m.moduleName);
                m.enable();
                m.modDisabled = false;
              }
            }
            $body.addClass('user-is-staff');
            user_.isStaff = true;
          } else if (newRole < 2 && prevRole > 1) {
            console.info("[p0ne] disabling moderator modules");
            for (i$ in ref$ = p0ne.modules) {
              m = ref$[i$];
              if (m.moderator && !m.disabled) {
                console.log("[p0ne moderator] disabling", m.moduleName);
                m.modDisabled = true;
                m.disable();
              }
            }
            $body.removeClass('user-is-staff');
            user_.isStaff = false;
          }
          prevRole = newRole;
        });
      },
      disable: function(){
        $body.removeClass('user-is-staff');
      }
    });
    /*####################################
    #       WARN ON HISTORY PLAYS        #
    ####################################*/
    module('warnOnHistory', {
      displayName: 'Warn on History',
      moderator: true,
      settings: 'moderation',
      settingsSimple: true,
      setup: function(arg$){
        var addListener, this$ = this;
        addListener = arg$.addListener;
        addListener(API, 'advance', function(d){
          var hist, inHistory, skipped, i$, len$, i, m, lastPlayI, lastPlay, msg;
          if (d.media) {
            hist = API.getHistory();
            inHistory = 0;
            skipped = 0;
            for (i$ = 0, len$ = hist.length; i$ < len$; ++i$) {
              i = i$;
              m = hist[i$];
              if (m.media.cid === d.media.cid && i !== 0) {
                lastPlayI || (lastPlayI = i);
                lastPlay || (lastPlay = m);
                inHistory++;
                if (m.skipped) {
                  skipped++;
                }
              }
            }
            if (inHistory) {
              msg = "";
              if (inHistory > 1) {
                msg += inHistory + "x ";
              }
              msg += "(" + (lastPlayI + 1) + "/" + (hist.length - 1) + ") ";
              if (skipped === inHistory) {
                msg += "but was skipped last time ";
              }
              if (skipped > 1) {
                msg += "it was skipped " + skipped + "/" + inHistory + " times ";
              }
              chatWarn(msg, 'Song is in History');
              API.trigger('p0ne:songInHistory');
            }
          }
        });
      }
    });
    /*####################################
    #      DISABLE MESSAGE DELETE        #
    ####################################*/
    module('disableChatDelete', {
      require: ['_$context', 'user_', 'chat'],
      optional: ['socketListeners'],
      moderator: true,
      displayName: 'Show deleted messages',
      settings: 'moderation',
      settingsSimple: true,
      setup: function(arg$){
        var replace_$Listener, addListener, $createPersistent, css, lastDeletedCid;
        replace_$Listener = arg$.replace_$Listener, addListener = arg$.addListener, $createPersistent = arg$.$createPersistent, css = arg$.css;
        $body.addClass('p0ne-showDeletedMessages');
        lastDeletedCid = null;
        addListener(_$context, 'socket:chatDelete', function(arg$){
          var p, c, mi, ref$;
          p = arg$.p, c = p.c, mi = p.mi;
          markAsDeleted(c, ((ref$ = users.get(mi)) != null ? ref$.get('username') : void 8) || mi);
          lastDeletedCid = c;
        });
        replace_$Listener('chat:delete', chat, function(){
          return function(cid){
            if (cid !== lastDeletedCid) {
              markAsDeleted(cid);
            }
          };
        });
        function markAsDeleted(cid, moderator){
          var ref$, $msg, isLast, t, uid, ref1$, ref2$, d, $cm;
          if ((typeof chat != 'undefined' && chat !== null) && ((ref$ = chat.lastText) != null && ref$.hasClass("cid-" + cid))) {
            $msg = chat.lastText.parent().parent();
            isLast = true;
          } else {
            $msg = getChat(cid);
          }
          console.log("[Chat Delete]", cid, $msg.text());
          t = getISOTime();
          try {
            uid = (ref1$ = cid.split('-')) != null ? ref1$[0] : void 8;
            if (cid === uid || !((ref2$ = getUser(uid)) != null && ref2$.gRole)) {
              $msg.addClass('deleted');
            }
            d = $createPersistent(getTimestamp()).addClass('delete-timestamp').removeClass('timestamp').appendTo($msg);
            d.text("deleted " + (moderator ? 'by ' + moderator : '') + " " + d.text());
            $cm = get$cm();
            $cm.scrollTop($cm.scrollTop() + d.height());
            $msg.find('.delete-button').remove();
            $msg.find('.p0ne-img').each(function(){
              var $a;
              $a = $(this).parent();
              $a.html($a.attr('href'));
            });
            if (isLast) {
              return chat.lastType = 'p0ne-deleted';
            }
          } catch (e$) {}
        }
      },
      disable: function(){
        $body.removeClass('p0ne-showDeletedMessages');
      }
    });
    /*####################################
    #         DELETE OWN MESSAGES        #
    ####################################*/
    module('chatDeleteOwnMessages', {
      moderator: true,
      settingsSimple: true,
      setup: function(arg$){
        var addListener;
        addListener = arg$.addListener;
        get$cm().find("fromID-" + userID).addClass('deletable').append($('<div class="delete-button">Delete</div>').click(delCb));
        addListener(API, 'chat', function(message){
          var cid, uid;
          cid = message.cid, uid = message.uid;
          if (uid === userID) {
            getChat(cid).addClass('deletable').append($('<div class="delete-button">Delete</div>').click(delCb));
          }
        });
        function delCb(){
          return API.moderateDeleteChat(
          $(this).closest('.cm').data('cid'));
        }
      }
    });
    /*####################################
    #            WARN ON MEHER           #
    ####################################*/
    module('warnOnMehers', {
      users: {},
      moderator: true,
      displayName: 'Warn on Mehers',
      settings: 'moderation',
      settingsSimple: true,
      _settings: {
        instantWarn: false,
        maxMehs: 3
      },
      setup: function(arg$, arg1$, m_){
        var addListener, users, current, lastAdvance, this$ = this;
        addListener = arg$.addListener;
        if (m_) {
          this.users = m_.users;
        }
        users = this.users;
        current = {};
        addListener(API, 'voteUpdate', function(d){
          current[d.user.id] = d.vote;
          if (d.vote === -1 && d.user.uid !== userID) {
            console.log("%c" + formatUser(d.user, true) + " meh'd this song", 'color: #ff5a5a');
            if (this$._settings.instantWarn) {
              chatWarnSmall('p0ne-meh-warning', formatUserHTML(d.user, true) + " meh'd this song!", true);
            }
          }
        });
        lastAdvance = 0;
        addListener(API, 'advance', function(d){
          var cid, ref$, v, troll, i$, len$, ref1$;
          d = Date.now();
          for (cid in ref$ = current) {
            v = ref$[cid];
            if (v === -1) {
              users[cid] || (users[cid] = 0);
              if (++users[cid] > this$._settings.maxMehs && (troll = getUser(cid))) {
                chatWarnSmall('p0ne-meh-warning', formatUserHTML(troll) + " meh'd the past " + plural(users[cid], 'song') + "!", true);
              }
            } else if (d > lastAdvance + 10000) {
              delete users[cid];
            }
          }
          if (d > lastAdvance + 10000) {
            for (i$ = 0, len$ = (ref$ = API.getUsers()).length; i$ < len$; ++i$) {
              cid = ref$[i$].cid;
              if (!current[cid] && ((ref1$ = d.lastPlay) != null ? ref1$.dj.id : void 8) !== cid) {
                delete users[cid];
              }
            }
          }
          current = {};
          lastAdvance = d;
        });
      },
      settingsExtra: function($el){
        var warnOnMehers, resetTimer, $warning;
        warnOnMehers = this;
        $("<form><label><input type=radio name=max-mehs value=on " + (this._settings.instantWarn ? 'checked' : '') + "> alert instantly</label><br><label><input type=radio name=max-mehs value=off " + (this._settings.instantWarn ? '' : 'checked') + "> alert after <input type=number value='" + this._settings.maxMehs + "' class='p0ne-settings-input max-mehs'> consequitive mehs</label></form>").append($warning = $('<div class=warning>')).on('click', 'input:radio', function(){
          if (this.checked) {
            warnOnMehers._settings.instantWarn = this.value === 'on';
            console.log(getTime() + " [warnOnMehers] updated instantWarn to " + warnOnMehers._settings.instantWarn);
          }
        }).on('input', '.max-mehs', function(){
          var val, this$ = this;
          val = ~~this.value;
          if (val > 1) {
            warnOnMehers._settings.maxMehs = val;
            if (resetTimer) {
              $warning.fadeOut();
              clearTimeout(resetTimer);
              resetTimer = 0;
            }
            if (warnOnMehers._settings.instantWarn) {
              $(this).parent().click();
            }
            console.log(getTime() + " [warnOnMehers] updated maxMehs to " + val);
          } else {
            $warning.fadeIn().text("please enter a valid number >1");
            resetTimer = sleep(2 .min, function(){
              this$.value = warnOnMehers._settings.maxMehs;
              resetTimer = 0;
            });
            console.warn(getTime() + " [warnOnMehers] invalid input for maxMehs", this.value);
          }
        }).appendTo($el);
        $el.css({
          paddingLeft: 15
        });
      }
    });
    /*####################################
    #              AFK TIMER             #
    ####################################*/
    module('afkTimer', {
      require: ['RoomUserRow', 'WaitlistRow'],
      optional: ['socketListeners', 'app', 'userList', '_$context'],
      moderator: true,
      settings: 'moderation',
      settingsSimple: true,
      displayName: "Show Idle Time",
      help: 'This module shows how long users have been inactive in the User- and Waitlist-Panel.\n"Being active"',
      _settings: {
        lastActivity: {},
        highlightOver: 43 .min
      },
      setup: function(arg$, arg1$, m_){
        var addListener, $create, replace, settings, start, lastActivity, ref$, i$, ref1$, len$, user, key$, $waitlistBtn, $afkCount, chatHidden, lastAfkCount, updateAfkCount, d, noActivityYet, fn, Constr;
        addListener = arg$.addListener, $create = arg$.$create, replace = arg$.replace;
        settings = this._settings;
        start = Date.now();
        if (m_) {
          console.log("m_ =", m_);
          this.start = m_.start;
          lastActivity = m_._settings.lastActivity || {};
        } else {
          console.log("args", arguments);
          this.start = start;
          if (((ref$ = this._settings.lastActivity) != null ? ref$[0] : void 8) + 60000 > Date.now()) {
            lastActivity = this._settings.lastActivity;
          } else {
            lastActivity = {};
          }
        }
        this.lastActivity = lastActivity;
        for (i$ = 0, len$ = (ref1$ = API.getUsers()).length; i$ < len$; ++i$) {
          user = ref1$[i$];
          lastActivity[key$ = user.id] || (lastActivity[key$] = start);
        }
        start = this.start;
        $waitlistBtn = $('#waitlist-button').append($afkCount = $create('<div class=p0ne-toolbar-count>'));
        addListener(API, 'socket:skip socket:grab', function(id){
          updateUser(id);
        });
        addListener(API, 'userJoin socket:nameChanged', function(u){
          updateUser(u.id);
        });
        addListener(API, 'chat', function(u){
          if (!/\[afk\]/i.test(u.message)) {
            updateUser(u.uid);
          }
        });
        addListener(API, 'socket:gifted', function(e){
          updateUser(e.s);
        });
        addListener(API, 'socket:modAddDJ socket:modBan socket:modMoveDJ socket:modRemoveDJ socket:modSkip socket:modStaff', function(u){
          updateUser(u.mi);
        });
        addListener(API, 'userLeave', function(u){
          delete lastActivity[u.id];
        });
        chatHidden = get$cm().parent().css('display') === 'none';
        if ((typeof _$context != 'undefined' && _$context !== null) && (app != null || (typeof userList != 'undefined' && userList !== null))) {
          addListener(_$context, 'show:users show:waitlist', function(){
            chatHidden = true;
          });
          addListener(_$context, 'show:chat', function(){
            chatHidden = false;
          });
        }
        lastAfkCount = 0;
        this.timer = repeat(60000, updateAfkCount = function(){
          var afkCount, d, usersToCheck, that, i$, len$, u;
          if (chatHidden) {
            forceRerender();
          } else {
            afkCount = 0;
            d = Date.now();
            usersToCheck = API.getWaitList();
            if (that = API.getDJ()) {
              usersToCheck[usersToCheck.length] = that;
            }
            for (i$ = 0, len$ = usersToCheck.length; i$ < len$; ++i$) {
              u = usersToCheck[i$];
              if (d - lastActivity[u.id] > settings.highlightOver) {
                afkCount++;
              }
            }
            if (afkCount !== lastAfkCount) {
              if (afkCount) {
                $afkCount.text(afkCount);
              } else {
                $afkCount.clear();
              }
              lastAfkCount = afkCount;
            }
          }
        });
        updateAfkCount();
        d = 0;
        for (i$ = 0, len$ = (ref1$ = [RoomUserRow, WaitlistRow]).length; i$ < len$; ++i$) {
          fn = i$;
          Constr = ref1$[i$];
          replace(Constr.prototype, 'render', fn$);
        }
        function updateUser(uid){
          var i$, ref$, ref1$, len$, r, results$ = [];
          if (Date.now() - lastActivity[uid] > settings.highlightOver) {
            updateAfkCount();
          }
          lastActivity[0] = lastActivity[uid] = Date.now();
          for (i$ = 0, len$ = (ref$ = (typeof userList != 'undefined' && userList !== null ? (ref1$ = userList.listView) != null ? ref1$.rows : void 8 : void 8) || (app != null ? app.room.waitlist.rows : void 8)).length; i$ < len$; ++i$) {
            r = ref$[i$];
            if (r.model.id === uid) {
              results$.push(r.render(true));
            }
          }
          return results$;
        }
        function forceRerender(){
          var i$, ref$, ref1$, len$, r, results$ = [];
          for (i$ = 0, len$ = (ref$ = (app != null ? app.room.waitlist.rows : void 8) || (typeof userList != 'undefined' && userList !== null ? (ref1$ = userList.listView) != null ? ref1$.rows : void 8 : void 8) || []).length; i$ < len$; ++i$) {
            r = ref$[i$];
            results$.push(r.render(false));
          }
          return results$;
        }
        forceRerender();
        function fn$(r_){
          return function(isUpdate){
            var ago, time, noActivityYet;
            r_.apply(this, arguments);
            if (!d) {
              d = Date.now();
              requestAnimationFrame(function(){
                d = 0;
                noActivityYet = null;
              });
            }
            ago = d - lastActivity[this.model.id];
            if (lastActivity[this.model.id] <= start) {
              if (ago < 120000) {
                time = noActivityYet || (noActivityYet = "? ");
              } else {
                time = noActivityYet || (noActivityYet = ">" + humanTime(ago, true));
              }
            } else if (ago < 60000) {
              time = "<1m";
            } else if (ago < 120000) {
              time = "<2m";
            } else {
              time = humanTime(ago, true);
            }
            if (this.$afk) {
              this.$afk.removeClass('p0ne-last-activity-warn');
            } else {
              this.$afk = $('<span class=p0ne-last-activity>').appendTo(this.$el);
            }
            this.$afk.text(time);
            if (ago > settings.highlightOver) {
              this.$afk.addClass('p0ne-last-activity-warn');
            }
            if (isUpdate) {
              this.$afk.p0neFx('blink');
            }
          };
        }
      },
      disable: function(){
        clearInterval(this.timer);
        $('#waitlist-button').removeClass('p0ne-toolbar-highlight');
      },
      disableLate: function(){
        var i$, ref$, ref1$, len$, r;
        for (i$ = 0, len$ = (ref$ = (app != null ? app.room.waitlist.rows : void 8) || (typeof userList != 'undefined' && userList !== null ? (ref1$ = userList.listView) != null ? ref1$.rows : void 8 : void 8) || []).length; i$ < len$; ++i$) {
          r = ref$[i$];
          r.render();
        }
      }
    });
    /*####################################
    #           FORCE SKIP BTN           #
    ####################################*/
    module('forceSkipButton', {
      moderator: true,
      setup: function(arg$, m){
        var $create;
        $create = arg$.$create;
        this.$btn = $create('<div class=p0ne-skip-btn><i class="icon icon-skip"></i></div>').insertAfter('#playlist-panel').click(bind$(this, 'onClick'));
      },
      onClick: API.moderateForceSkip
    });
    /*@source p0ne.userHistory.ls */
    /**
     * small module to show a user's song history on plug.dj
     * fetches the song history from the user's /@/profile page
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
    */
    console.log("~~~~~~~ p0ne.userHistory ~~~~~~~");
    /*####################################
    #            USER HISTORY            #
    ####################################*/
    module('userHistory', {
      require: ['userRollover', 'RoomHistory', 'backbone'],
      help: 'Shows another user\'s song history when clicking on their username in the user-rollover.\n\nDue to technical restrictions, only Youtube songs can be shown.',
      setup: function(arg$){
        var addListener, replace, css;
        addListener = arg$.addListener, replace = arg$.replace, css = arg$.css;
        css('userHistory', '#user-rollover .username { cursor: pointer }');
        addListener($('body'), 'click', '#user-rollover .username', function(){
          var user, userID, username, userlevel, userslug;
          $('#history-button.selected').click();
          user = userRollover.user;
          userID = user.id;
          username = user.get('username');
          userlevel = user.get('level');
          userslug = user.get('slug');
          if (userlevel < 5) {
            userRollover.$level.text(userlevel + " (user-history requires >4!)");
            return;
          }
          console.log(getTime() + " [userHistory] loading " + username + "'s history");
          if (!userslug) {
            getUserData(userID).then(function(d){
              user.set('slug', d.slug);
              loadUserHistory(user);
            });
          } else {
            loadUserHistory(user);
          }
        });
        function loadUserHistory(user){
          return $.get("https://plug.dj/@/" + user.get('slug')).fail(function(){
            console.error("! couldn't load user's history");
          }).then(function(d){
            var songs;
            userRollover.cleanup();
            songs = new backbone.Collection();
            d.replace(/<div class="row">\s*<img src="(.*)"\/>\s*<div class="meta">\s*<span class="author">(.*?)<\/span>\s*<span class="name">(.*?)<\/span>[\s\S]*?positive"><\/i><span>(\d+)<\/span>[\s\S]*?grabs"><\/i><span>(\d+)<\/span>[\s\S]*?negative"><\/i><span>(\d+)<\/span>[\s\S]*?listeners"><\/i><span>(\d+)<\/span>/g, function(arg$, img, author, roomName, positive, grabs, negative, listeners){
              var cid, ref$, title;
              if (cid = /\/vi\/(.{11})\//.exec(img)) {
                cid = cid[1];
                ref$ = author.split(" - "), title = ref$[0], author = ref$[1];
                songs.add(new backbone.Model({
                  user: {
                    id: user.id,
                    username: "in " + roomName
                  },
                  room: {
                    name: roomName
                  },
                  score: {
                    positive: positive,
                    grabs: grabs,
                    negative: negative,
                    listeners: listeners,
                    skipped: 0
                  },
                  media: new backbone.Model({
                    format: 1,
                    cid: cid,
                    author: author,
                    title: title,
                    image: httpsify(img)
                  })
                }));
              }
            });
            console.info(getTime() + " [userHistory] loaded history for " + user.get('username'), songs);
            out$.songs = songs;
            out$.d = d;
            replace(RoomHistory.prototype, 'collection', function(){
              return songs;
            });
            _$context.trigger('show:history');
            requestAnimationFrame(function(){
              RoomHistory.prototype.collection = RoomHistory.prototype.collection_;
              console.log(getTime() + " [userHistory] restoring room's proper history");
            });
          });
        }
      }
    });
    /*@source p0ne.help.ls */
    /**
     * Tutorial and help GUI for plug_p0ne
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.help ~~~~~~~");
    module('p0neHelp', {
      optional: ['currentMedia'],
      require: ['automute', 'p0neSettings'],
      setup: function(aux){
        var $create, loadStyle, automute, i, steps, p0neSettings, $ppW, $ppI, $pp0, $hdButton, $snoozeBtn, $bar, $songInfo, $footerUser, $footerInfo, $el, $pSettingsClosed, $pSettingsOpen, $pSongInfoClosed, $pSongInfoOpen, DUMMY_VIDEO, screens, $screen, $screens, $navDots, $nextBtn, $steps, blinkingInterval, $blinkingEl, listeners, this$ = this;
        $create = aux.$create, loadStyle = aux.loadStyle;
        loadStyle(p0ne.host + "/css/walkthrough.css");
        automute = p0ne.modules.automute;
        steps = {};
        this.screenClose = $.noop;
        p0neSettings = p0ne.modules.p0neSettings;
        automute = p0ne.modules.automute;
        $ppW = p0neSettings.$ppW;
        $ppI = $ppW.parent().find('.p0ne-icon:first');
        $pp0 = $ppI.find('.p0ne-icon-sub');
        $hdButton = $('#playback .hd');
        $snoozeBtn = $('#playback .snooze');
        $bar = $('#now-playing-bar');
        $songInfo = $('.p0ne-song-info');
        $footerUser = $('#footer-user');
        $footerInfo = $footerUser.find('.info');
        $el = $create("<div class=wt-cover></div><div class='container wt-p0' id=walkthrough><div class='step fade-in wt-p0-welcome' data-screen=welcome><h2>Welcome to</h2><div class=wt-p0-title><div class=wt-p0-title-p>p</div><div class=wt-p0-title-lug_p>lug_p</div><div class='wt-p0-0 wt-p0-title-0'>0</div><div class=wt-p0-title-ne>ne</div></div><button class='wt-p0-next continue'>&nbsp;</button></div><div class='step fade-in wt-p0-settings' data-screen=settings><h1>Settings</h1><p>To open/close the plug_p0ne settings, click the <div class=p0ne-icon>p<div class=p0ne-icon-sub>0</div></div> icon in the top left</p><p class=wt-p0-settings-closed>click the icon now!</p><p class=wt-p0-settings-open>Good job! Let's move on.</p><button class='wt-p0-back'>back</button><button class=wt-p0-next>skip</button></div><div class='step fade-in wt-p0-dblclick2mention' data-screen=dblclick2mention><h1>dblclick2mention</h1><p>One of most often used p0 features is the so called \"DblClick username to Mention\".<br>Just <b>double click</b> their name to <em>@mention</em> them. This is great to quickly greet friends, for example.<br><small>(it works on username in chat, join notifications and just about EVERYWHERE)</small></p><img src='http://i.imgur.com/e5JVTqU.gif' alt='screenrecording of dblclick2mention' width=350 height=185 /><button class='wt-p0-back'>back</button><button class='wt-p0-next continue'>next</button></div><div class='step fade-in wt-p0-stream-settings' data-screen=stream-settings><h1>Stream Settings</h1><p>plug_p0ne adds a new audio-only mode to videos and let's you quickly switch between<br><i class='icon icon-stream-video'></i> Video<br><i class='icon icon-stream-audio'></i> Audio-Only<br><i class='icon icon-stream-off'></i> Stream-Off (no video/sound)</p><p>You can click the icons in the top-middle to change between the modes.</p><button class='wt-p0-back'>back</button><button class='wt-p0-next continue'>next</button></div><div class='step fade-in wt-p0-automute' data-screen=automute><h1>Automute</h1><p>You can also <b>automute</b> songs you really dislike. This way, they will automatically get muted whenever they are played.</p><p>To add a song to automute, do the following:<ol class=wt-p0-steps><li>Click on <b class=snooze-btn><i class='icon icon-stream-off'></i> Snooze</b> to snooze the current song (stop the video/song)</li><li>When snoozed, the snooze button will turn into an automute -add or -remove button</li></ol></p><p>Let's try it out!<br>(don't worry, we can undo it right away)</p><button class='wt-p0-back'>back</button><button class=wt-p0-next>skip</button></div><div class='step fade-in wt-p0-automute2' data-screen=automute2><h1>Automute</h1><p>Removing songs from the automute list is also easy:<ol class=wt-p0-steps><li>open the settings panel. (<div class=p0ne-icon>p<div class=p0ne-icon-sub>0</div></div>)</li><li>open the group \"" + automute.settings + "\"</li><li>click on the <i class='icon icon-settings-white'></i>icon next to \"automute\"</li><li>move your mouse over any song in the list and click the <i class='icon icon-clear-input'></i> icon on the song you want to remove from the list</li></ol></p><button class='wt-p0-back'>back</button><button class=wt-p0-next>skip</button></div><div class='step fade-in wt-p0-songinfo' data-screen=songinfo><h1>Song-Info</h1><p>Want to find out more about the current song?</p><p class=wt-p0-songinfo-closed>Click the song title above!</p><div class=wt-p0-songinfo-open>In the top middle you can see two rows.<img src='//i.imgur.com/clwk2QL.png' alt='top row shows author - title as seen on plug.dj, second row shows channel name and upload title as seen on Youtube/Soundcloud' width=338 height=66 /><ul><li>Click on the author or title to search for them on plug.dj.</li><li>Click on the channel or song name to open them in a new tab.</li></ul></div><button class='wt-p0-back'>back</button><button class='wt-p0-next continue'>next</button></div><div class='step fade-in wt-p0-info-footer' data-screen=info-footer><h1>Info Footer</h1><p>One last thing, plug_p0ne replaces the footer (the section below the chat) with something more useful.<br>To get to the Settings, the Shop or your Inventory, simply click anywhere on the footer.</p><p>The Info Footer only will work for logged in users, though.</p><button class='wt-p0-back'>back</button><button class='wt-p0-next continue'>next</button></div><div class='step fade-in wt-p0-end' data-screen=end><h1>END!</h1><p>Alright that's it!<br>Hopefully you'll have some fun with plug_p0ne!</p><p>Just play around with the settings to find some more great features. :3</p><button class='wt-p0-back'>back</button><button class='wt-p0-next continue'>finish</button></div><div class=nav><i class=selected></i> <i></i> <i></i> <i></i> <i></i> <i></i> <i></i> <i></i> <i></i><button class='wt-p0-skip'>skip walkthrough</button</div></div>").on('click', '.wt-p0-button', function(){
          var $this;
          $this = $(this);
          $this.trigger("button-" + $this.index() + " button-" + $this.text());
        }).on('click', '.wt-p0-skip', function(){
          this$.disable();
          return false;
        }).on('click', '.wt-p0-next', function(){
          nextScreen(i + 1);
        }).on('click', '.wt-p0-back', function(){
          nextScreen(i - 1);
        }).on('click', '.nav i', function(){
          nextScreen($(this).index());
        }).appendTo($app);
        $app.addClass('is-wt-p0');
        $pSettingsClosed = $el.find('.wt-p0-settings-closed');
        $pSettingsOpen = $el.find('.wt-p0-settings-open');
        $pSongInfoClosed = $el.find('.wt-p0-songinfo-closed');
        $pSongInfoOpen = $el.find('.wt-p0-songinfo-open');
        DUMMY_VIDEO = {
          cid: 'wZZ7oFKsKzY',
          format: 1,
          author: "plug_p0ne test",
          title: "Nyan Cat 1h",
          duration: 36001,
          image: "https://i.ytimg.com/vi/wZZ7oFKsKzY/default.jpg"
        };
        screens = [
          function(){
            var $nextBtn_;
            $screen.removeClass('revealed');
            $nextBtn_ = $nextBtn;
            p0neSettings.toggleMenu(false);
            sleep(2000, function(){
              $screen.addClass('revealed');
              sleep(3000, function(){
                if (i === 0) {
                  $nextBtn_.text("next");
                }
              });
            });
          }, function(){
            addListener($ppI, 'click', function(){
              if (!p0neSettings._settings.open) {
                $pSettingsClosed.show();
                $pSettingsOpen.hide();
                $screen.css({
                  left: '',
                  top: ''
                });
                blinking($ppI);
              } else {
                blinking();
                $pSettingsClosed.hide();
                $pSettingsOpen.show();
                if ($pp0.text() === '2') {
                  $screen.css({
                    left: 160,
                    top: 100
                  });
                } else {
                  $screen.css({
                    left: $ppW.width() + 60,
                    top: ''
                  });
                }
                blinking($nextBtn);
                accomplished();
              }
            })();
            this$.screenClose = function(){
              p0neSettings.toggleMenu(false);
            };
          }, function(){
            var $playback;
            $playback = $('#playback');
            blinking($hdButton);
          }, function(){
            var $playback;
            $playback = $('#playback');
            blinking($hdButton);
          }, function(){
            var m;
            if (typeof currentMedia != 'undefined' && currentMedia !== null) {
              addListener(API, 'advance', function(){
                if (!(m = currentMedia.get('media'))) {
                  currentMedia.set(new Backbone.Model(DUMMY_VIDEO));
                } else {
                  step(isSnoozed() ? 2 : 1);
                }
              })();
            }
            addListener(API, 'p0ne:changeMode', function(m){
              step(m === 'off' ? 2 : 1);
            })();
            if (isSnoozed()) {
              step(2);
            }
            addListener($snoozeBtn, 'click', function(){
              console.log("smooze [sic]", automute.songlist[API.getMedia().cid]);
              if (automute.songlist[API.getMedia().cid]) {
                accomplished();
              }
            })();
            blinking($snoozeBtn);
            this$.screenClose = function(){
              if (m) {
                currentMedia.set('media', m);
              }
            };
          }, function(){
            var $spI, $summary, cb1, cb2, settingsPanel, cb3;
            $spI = automute._$settings.find('.p0ne-settings-panel-icon .icon');
            $summary = p0neSettings.groups[automute.settings].find('.p0ne-settings-summary');
            blinking($ppI);
            addListener($ppI, 'click', cb1 = function(){
              if (!p0neSettings._settings.open) {
                step(1);
                $screen.css({
                  left: "",
                  top: ''
                });
              } else {
                step(2);
                if ($pp0.text() === '2') {
                  $screen.css({
                    left: 160,
                    top: 150
                  });
                } else {
                  $screen.css({
                    left: $ppW.width() + 20,
                    top: ''
                  });
                }
                blinking($summary);
                cb2();
              }
            });
            addListener($summary, 'click', cb2 = function(){
              requestAnimationFrame(function(){
                if (p0neSettings._settings.openGroup !== automute.settings) {
                  step(2);
                  $spI.css({
                    boxShadow: '',
                    borderRadius: ''
                  });
                  blinking($summary);
                } else {
                  step(3);
                  if ($pp0.text() === '2') {
                    $screen.css({
                      left: 580
                    });
                  }
                  blinking();
                  $spI.css({
                    boxShadow: '0 0 25px white',
                    borderRadius: '50%'
                  });
                  cb3();
                }
              });
            });
            addListener(automute._$settings, 'click', '.p0ne-settings-panel-icon', cb3 = function(){
              requestAnimationFrame(function(){
                var ref$, k, yet$;
                if (!((ref$ = automute._$settingsPanel) != null && ref$.open)) {
                  step(3);
                  $spI.css({
                    boxShadow: '0 0 25px white',
                    borderRadius: '50%'
                  });
                  if ($pp0.text() === '2') {
                    $screen.css({
                      left: 580
                    });
                  }
                } else {
                  step(4);
                  $spI.css({
                    boxShadow: '',
                    borderRadius: ''
                  });
                  for (k in yet$ = true, automute.songlist) {
                    yet$ = false;
                    break;
                  } if (yet$) {
                    automute.songlist[DUMMY_VIDEO.cid] = DUMMY_VIDEO;
                    automute.createRow(DUMMY_VIDEO.cid);
                  }
                  if ($pp0.text() === '2') {
                    $screen.css({
                      left: 100
                    });
                  } else {
                    $screen.css({
                      left: $ppW.width() + 520
                    });
                  }
                  if (automute._$settingsPanel && settingsPanel !== automute._$settingsPanel.wrapper) {
                    if (settingsPanel) {
                      settingsPanel.off('click', '.song-remove', accomplished);
                    }
                    settingsPanel = automute._$settingsPanel.wrapper;
                    addListener(settingsPanel, 'click', '.icon-clear-input', accomplished);
                  }
                  blinking();
                }
              });
            });
            cb1();
            this$.screenClose = function(){
              if ($spI != null) {
                $spI.css({
                  boxShadow: '',
                  borderRadius: ''
                });
              }
              p0neSettings.toggleMenu(false);
              if (automute.songlist[DUMMY_VIDEO.cid]) {
                delete automute.songlist[DUMMY_VIDEO.cid];
                automute.rows[DUMMY_VIDEO.cid].remove();
              }
            };
          }, function(){
            addListener($bar, 'click', function(){
              var b;
              if (b = $songInfo.hasClass('expanded')) {
                blinking($bar);
                $screen.css({
                  top: 220
                });
                $pSongInfoClosed.hide();
                $pSongInfoOpen.show();
                accomplished();
              } else {
                blinking($songInfo.find('.p0ne-song-info-meta'));
                $screen.css({
                  top: ""
                });
                $pSongInfoClosed.show();
                $pSongInfoOpen.hide();
              }
            })();
            this$.screenClose = function(){
              if ($songInfo.hasClass('expanded')) {
                $bar.click();
              }
              p0neSettings.toggleMenu(false);
              $('#playlist-button .icon-arrow-down').click();
            };
          }, function(){
            var cb;
            addListener($footerInfo, 'click', cb = function(){
              $screen.css({
                right: 20
              });
              $body.one('click', function(){
                $screen.css({
                  right: -330
                });
              });
            });
            if ($footerUser.hasClass('menu')) {
              cb();
            }
          }, function(){}, this.disable
        ];
        /**  other interesting things to show:
         * avoid history-play
         * song-notif
         * user-history
         *
         * moderator-only stuff
         *      - AFK Timer
         */
        $screen = $();
        $screens = $el.find('.step');
        $navDots = $el.find('.nav i');
        $el.find('.wt-p0-steps li:first').addClass('selected');
        $el.find('.snooze-btn').css({
          background: $app.find('#playback .snooze').css('background')
        }).click(function(){
          alert("No you doozie!\nclick the REAL snooze button above ;)");
        });
        aux.addListener($ppI, 'click', function(){
          $app.removeClass("wt-p0-settings-mode-0 wt-p0-settings-mode-1 wt-p0-settings-mode-2").addClass("wt-p0-settings-mode-" + $pp0.text());
        });
        function nextScreen(num){
          var i$, ref$, len$, ref1$, target, args;
          this$.screenClose();
          $navDots.eq(i).removeClass('selected');
          blinking();
          for (i$ = 0, len$ = (ref$ = listeners).length; i$ < len$; ++i$) {
            ref1$ = ref$[i$], target = ref1$[0], args = ref1$[1];
            target.off.apply(target, args);
          }
          i = num;
          $screen = $screens.eq(i);
          $nextBtn = $screen.find('.wt-p0-next');
          $steps = $screen.find('.wt-p0-steps li');
          $navDots.eq(i).addClass('selected');
          $app.removeClass("wt-p0-screen-" + this$.screenClass).addClass("wt-p0-screen-" + (this$.screenClass = $screen.data('screen')));
          steps[i] || (steps[i] = 1);
          this$.screenClose = $.noop;
          screens[i]();
        }
        function step(num){
          $screen.removeClass("wt-p0-step-" + steps[i]).addClass("wt-p0-step-" + num);
          $steps.eq(steps[i] - 1).removeClass('selected');
          $steps.eq(num - 1).addClass('selected');
          steps[i] = num;
        }
        function accomplished(){
          $steps.eq(steps[i] - 1).removeClass('selected');
          $nextBtn.text("continue").addClass('continue');
        }
        function blinking($el){
          clearInterval(blinkingInterval);
          if ($blinkingEl = $el) {
            blinkingInterval = setInterval(blinkingCB, 3000);
          }
        }
        function blinkingCB(){
          $blinkingEl.p0neFx('blink');
        }
        listeners = [];
        function addListener(target){
          var args;
          args = slice$.call(arguments, 1);
          target.on.apply(target, args);
          listeners[listeners.length] = [target, args];
          return args[args.length - 1];
        }
        nextScreen(0);
      },
      disable: function(){
        $app.removeClass("is-wt-p0 wt-p0-settings-mode-0 wt-p0-settings-mode-1 wt-p0-settings-mode-2 wt-p0-screen-" + this.screenClass);
        this.screenClose();
      }
    });
    /*@source p0ne.dev.ls */
    /**
     * plug_p0ne dev
     * a set of plug_p0ne modules for usage in the console
     * They are not used by any other module
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.dev ~~~~~~~");
    /*####################################
    #        FIX CONSOLE SPAMMING        #
    ####################################*/
    module('fixConsoleSpamming', {
      setup: function(arg$){
        /* this fixes a bug in plug.dj. Version 1.2.6.6390 (2015-02-15)
         * which spams the console with console.info(undefined)
         * everytime the socket receives a message.
         * On WebKit browsers it's ignored, on others (e.g. Firefox)
         * it will create many empty messages in the console
         * (https://i.imgur.com/VBzw2ek.png screenshot from Firefox' Web Console)
        */
        var replace;
        replace = arg$.replace;
        replace(console, 'info', function(info_){
          return function(){
            if (arguments.length) {
              info_.apply(this, arguments);
            }
          };
        });
      }
    });
    /*####################################
    #      SANDBOX BACKBONE EVENTS       #
    ####################################*/
    module('sandboxBackboneEvents', {
      optional: ['_$context'],
      setup: function(arg$){
        var replace, slice, i$, ref$, len$, name;
        replace = arg$.replace;
        slice = Array.prototype.slice;
        replace(Backbone.Events, 'trigger', function(){
          return function(type){
            var args, a, b, c, events, l, i, ev, e;
            if (this._events) {
              args = slice.call(arguments, 1);
              a = args[0], b = args[1], c = args[2];
              for (;;) {
                if ((events = this._events[type]) && (l = events.length)) {
                  i = -1;
                  while (i < l) {
                    try {
                      switch (args.length) {
                      case 0:
                        while (++i < l) {
                          (ev = events[i]).callback.call(ev.ctx);
                        }
                        break;
                      case 1:
                        while (++i < l) {
                          (ev = events[i]).callback.call(ev.ctx, a);
                        }
                        break;
                      case 2:
                        while (++i < l) {
                          (ev = events[i]).callback.call(ev.ctx, a, b);
                        }
                        break;
                      case 3:
                        while (++i < l) {
                          (ev = events[i]).callback.call(ev.ctx, a, b, c);
                        }
                        break;
                      default:
                        while (++i < l) {
                          (ev = events[i]).callback.apply(ev.ctx, args);
                        }
                      }
                    } catch (e$) {
                      e = e$;
                      console.error("[" + (this._name || 'unnamed EventEmitter') + "] Error while triggering '" + type + "' [" + i + "]", this, args, e.stack);
                    }
                  }
                }
                if (type === 'all') {
                  return this;
                }
                args.unshift(type);
                a = args[0], b = args[1], c = args[2];
                type = 'all';
              }
            }
          };
        });
        for (i$ = 0, len$ = (ref$ = ['API', '_$context', 'Layout']).length; i$ < len$; ++i$) {
          name = ref$[i$];
          if (window[name]) {
            replace(window[name], '_name', fn$);
            replace(window[name], 'trigger', fn1$);
          }
        }
        function fn$(){
          return name;
        }
        function fn1$(){
          return Backbone.Events.trigger;
        }
      }
    });
    /*####################################
    #           LOG EVERYTHING           #
    ####################################*/
    module('logEventsToConsole', {
      optional: ['_$context', 'socketListeners'],
      displayName: "Log Events to Console",
      settings: 'dev',
      help: 'This will log events to the JavaScript console.\nThis is mainly for programmers. If you are none, keep this disabled for better performance.\n\nBy default this will leave out some events to avoid completly spamming the console.\nYou can force-enable logging ALL events by running `logEventsToConsole.logAll = true`',
      disabledByDefault: true,
      logAll: false,
      setup: function(arg$){
        var addListener, logEventsToConsole, ctx, chatEvnt;
        addListener = arg$.addListener;
        logEventsToConsole = this;
        if (typeof _$context != 'undefined' && _$context !== null) {
          ctx = _$context;
          chatEvnt = 'chat:receive';
        } else {
          ctx = API;
          chatEvnt = 'chat';
        }
        addListener('early', ctx, chatEvnt, function(data){
          var message, name;
          message = cleanMessage(data.originalMessage || data.message).replace(/%/g, "%");
          if (data.un) {
            name = collapseWhitespace(
            data.un.replace(/\u202e/g, '\\u202e'));
            name = stripHTML(
            repeatString$(" ", 24 - name.length) + name);
            if (data.type === 'emote') {
              console.log(getTime() + " [CHAT] %c" + name + ": %c" + message, "font-weight: bold", "font-style: italic");
            } else {
              console.log(getTime() + " [CHAT] %c" + name + ": %c" + message, "font-weight: bold", "");
            }
          } else if (data.type.has('system')) {
            console.info(getTime() + " [CHAT] [system] %c" + message, "font-size: 1.2em; color: red; font-weight: bold");
          } else {
            console.log(getTime() + " [CHAT] %c" + message, 'color: #36F');
          }
        });
        addListener(API, 'userJoin', function(user){
          console.log(getTime() + " + [JOIN]", user.id, formatUser(user, true), user);
        });
        addListener(API, 'userLeave', function(user){
          var name;
          name = htmlUnescape(user.username).replace(/\u202e/g, '\\u202e');
          console.log(getTime() + " - [LEAVE]", user.id, formatUser(user, true), user);
        });
        if (!window._$context) {
          return;
        }
        addListener(_$context, 'all', function(){
          return function(type, args){
            var group;
            group = type.substr(0, type.indexOf(":"));
            if ((group !== 'socket' && group !== 'tooltip' && group !== 'djButton' && group !== 'chat' && group !== 'sio' && group !== 'playback' && group !== 'playlist' && group !== 'notify' && group !== 'drag' && group !== 'audience' && group !== 'anim' && group !== 'HistorySyncEvent' && group !== 'user' && group !== 'ShowUserRolloverEvent') && (type !== 'ChatFacadeEvent:muteUpdate' && type !== 'PlayMediaEvent:play' && type !== 'userPlaying:update' && type !== 'context:update') || logEventsToConsole.logAll) {
              console.log(getTime() + " [" + type + "]", args);
            } else if (group === 'socket' && (type !== 'socket:chat' && type !== 'socket:vote' && type !== 'socket:grab' && type !== 'socket:earn')) {
              console.log(getTime() + " [" + type + "]", args);
            }
          };
        });
        addListener(_$context, 'PlayMediaEvent:play', function(data){
          console.log(getTime() + " [SongInfo]", "playlist: " + data.playlistID, "historyID: " + data.historyID);
        });
      }
    });
    /*####################################
    #            LOG GRABBERS            #
    ####################################*/
    module('logGrabbers', {
      require: ['grabEvent'],
      setup: function(arg$){
        var addListener, replace, grabbers, hasGrabber;
        addListener = arg$.addListener, replace = arg$.replace;
        grabbers = {};
        hasGrabber = false;
        addListener(API, 'p0ne:vote:grab', function(u){
          console.info(getTime() + " [logGrabbers] " + formatUser(u, user.isStaff) + " grabbed this song");
          grabbers[u.id] = u.username;
          hasGrabber = true;
        });
        addListener(API, 'advance', function(){
          var name;
          if (grabbers) {
            console.log("[logGrabbers] the last song was grabbed by " + humanList((function(){
              var i$, ref$, results$ = [];
              for (i$ in ref$ = grabbers) {
                name = ref$[i$];
                results$.push(name);
              }
              return results$;
            }())));
            grabbers = {};
          } else {
            hasGrabber = false;
          }
        });
      }
    });
    /*####################################
    #             DEV TOOLS              #
    ####################################*/
    module('InternalAPI', {
      optional: ['users', 'playlists', 'user_', 'app'],
      setup: function(){
        var k, ref$, v;
        for (k in ref$ = API) {
          v = ref$[k];
          if (!this[k]) {
            this[k] = v;
          } else if (this[k] === 'user') {
            (fn$.call(this, k));
          }
        }
        importAll$(this, Backbone.Events);
        function fn$(k){
          this[k] = function(){
            var ref$;
            getUserInternal((ref$ = API[k]()) != null ? ref$.id : void 8);
          };
        }
      },
      chatLog: API.chatLog,
      getAdmins: function(){
        return typeof users != 'undefined' && users !== null ? users.filter(function(it){
          return it.get('gRole') === 5;
        }) : void 8;
      },
      getAmbassadors: function(){
        return typeof users != 'undefined' && users !== null ? users.filter(function(u){
          var ref$;
          0 < (ref$ = u.get('gRole')) && ref$ < 5;
        }) : void 8;
      },
      getAudience: typeof users != 'undefined' && users !== null ? users.getAudience : void 8,
      getBannedUsers: function(){
        throw Error('unimplemented');
      },
      getDJ: function(){
        var ref$;
        return getUserInternal((ref$ = API.getDJ()) != null ? ref$.id : void 8);
      },
      getHistory: function(){
        return roomHistory;
      },
      getHost: function(){
        var ref$;
        return getUserInternal((ref$ = API.getHost()) != null ? ref$.id : void 8);
      },
      getMedia: function(){
        return typeof currentMedia != 'undefined' && currentMedia !== null ? currentMedia.get('media') : void 8;
      },
      getNextMedia: function(){
        return typeof playlists != 'undefined' && playlists !== null ? playlists.activeMedia[0] : void 8;
      },
      getUser: function(){
        return user_;
      },
      getUsers: function(){
        return users;
      },
      getPlaylist: window.getActivePlaylist,
      getPlaylists: function(){
        return playlists;
      },
      getStaff: function(){
        return typeof users != 'undefined' && users !== null ? users.filter(function(u){
          return u.get('role');
        }) : void 8;
      },
      getWaitList: function(){
        return app != null ? app.room.waitlist : void 8;
      }
    });
    /*####################################
    #           DOWNLOAD LINK            #
    ####################################*/
    module('downloadLink', {
      setup: function(arg$){
        var css, icon;
        css = arg$.css;
        icon = getIcon('icon-arrow-down');
        css('downloadLink', ".p0ne-downloadlink::before {content: ' ';position: absolute;margin-top: -6px;margin-left: -27px;width: 30px;height: 30px;background-position: " + icon.position + ";background-image: " + icon.image + ";}");
      },
      module: function(name, filename, dataOrURL){
        if (!dataOrURL) {
          dataOrURL = filename;
          filename = name;
        }
        if (dataOrURL && !isURL(dataOrURL)) {
          if (typeof dataOrURL !== 'string') {
            dataOrURL = JSON.stringify(dataOrURL);
          }
          dataOrURL = URL.createObjectURL(new Blob([dataOrURL], {
            type: 'text/plain'
          }));
        }
        filename = filename.replace(/[\/\\\?%\*\:\|\"\<\>\.]/g, '');
        return chatWarnSmall('p0ne-downloadlink', "<a href='" + dataOrURL + "' download='" + filename + "'>" + name + "</a>", true);
      }
    });
    /*####################################
    #            AUXILIARIES             #
    ####################################*/
    importAll$(window, {
      roomState: function(){
        ajax('GET', 'rooms/state');
      },
      export_: function(name){
        return function(data){
          console.log("[export] " + name + " =", data);
          window[name] = data;
        };
      },
      searchEvents: function(regx){
        var k;
        if (!(regx instanceof RegExp)) {
          regx = new RegExp(regx, 'i');
        }
        return (function(){
          var results$ = [];
          for (k in typeof _$context != 'undefined' && _$context !== null ? _$context._events : void 8) {
            if (regx.test(k)) {
              results$.push(k);
            }
          }
          return results$;
        }());
      },
      listUsers: function(){
        var res, i$, ref$, len$, u;
        res = "";
        for (i$ = 0, len$ = (ref$ = API.getUsers()).length; i$ < len$; ++i$) {
          u = ref$[i$];
          res += u.id + "\t" + u.username + "\n";
        }
        console.log(res);
      },
      listUsersByAge: function(){
        var a, res, i$, len$, u;
        a = API.getUsers().sort(function(a, b){
          a = +a.joined.replace(/\D/g, '');
          b = +b.joined.replace(/\D/g, '');
          return (a > b && 1) || (a === b && 0) || -1;
        });
        res = "";
        for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
          u = a[i$];
          res += u.joined.replace(/T|\..+/g, ' ') + "\t" + u.username + "\n";
        }
        console.log(res);
      },
      findModule: function(test){
        var res, id, ref$, module;
        if (typeof test === 'string' && window.l) {
          test = l(test);
        }
        res = [];
        for (id in ref$ = require.s.contexts._.defined) {
          module = ref$[id];
          if (module) {
            if (test(module, id)) {
              module.requireID || (module.requireID = id);
              console.log("[findModule]", id, module);
              res[res.length] = module;
            }
          }
        }
        return res;
      },
      requireHelperHelper: function(module){
        /* this function will try to find a nice requireHelper rule for the given plug.dj module
         * the output is a function shorthand in LiveScript */
        var k, v, keys, keysExact, isNotObj, ref$, id, m2, ref1$, ref2$;
        if (typeof module === 'string') {
          module = require(module);
        }
        if (!module) {
          return false;
        }
        for (k in module) {
          v = module[k];
          keys = 0;
          keysExact = 0;
          isNotObj = (ref$ = typeof v) !== 'object' && ref$ !== 'function';
          for (id in ref$ = require.s.contexts._.defined) {
            m2 = ref$[id];
            if (m2 && m2[k] && (k !== 'requireID' && k !== 'cid' && k !== 'id' && k !== 'length')) {
              keys++;
              if (isNotObj && m2[k] === v) {
                keysExact++;
              }
            }
          }
          if (keys === 1) {
            return "(." + k + ")";
          } else if (keysExact === 1) {
            return "(." + k + " == " + JSON.stringify(v) + ")";
          }
        }
        for (k in ref$ = module.prototype) {
          v = ref$[k];
          keys = 0;
          keysExact = 0;
          isNotObj = typeof v !== 'object';
          for (id in ref1$ = require.s.contexts._.defined) {
            m2 = ref1$[id];
            if (m2 && ((ref2$ = m2.prototype) != null && ref2$[k])) {
              keys++;
              if (isNotObj && m2[k] === v) {
                keysExact++;
              }
            }
          }
          if (keys === 1) {
            return "(.::?." + k + ")";
          } else if (keysExact === 1) {
            return "(.::?." + k + " == " + JSON.stringify(v) + ")";
          }
        }
        return false;
      },
      validateUsername: function(username, ignoreWarnings, cb){
        if (typeof ignoreWarnings === 'function') {
          cb = ignoreWarnings;
          ignoreWarnings = false;
        } else if (!cb) {
          cb = function(slug, err){
            console[err && 'error' || 'log']("username '" + username + "': ", err || slug);
          };
        }
        if (!ignoreWarnings) {
          if (username.length < 2) {
            cb(false, "too short");
          } else if (username.length >= 25) {
            cb(false, "too long");
          } else if (username.has("/")) {
            cb(false, "forward slashes are not allowed");
          } else if (username.has("\n")) {
            cb(false, "line breaks are not allowed");
          } else {
            ignoreWarnings = true;
          }
        }
        if (ignoreWarnings) {
          return $.getJSON("https://plug.dj/_/users/validate/" + encodeURIComponent(username), function(d){
            var ref$;
            cb(d && ((ref$ = d.data[0]) != null ? ref$.slug : void 8));
          });
        }
      },
      getRequireArg: function(haystack, needle){
        /* this is a helper function to be used in the console to quickly find a module ID corresponding to a parameter and vice versa in the head of a javascript requirejs.define call
         * e.g. getRequireArg('define( "da676/a5d9e/a7e5a/a3e8f/fa06c", [ "jquery", "underscore", "backbone", "da676/df0c1/fe7d6", "da676/ae6e4/a99ef", "da676/d8c3f/ed854", "da676/cba08/ba3a9", "da676/cba08/ee33b", "da676/cba08/f7bde", "da676/cba08/d0509", "da676/eb13a/b058e/c6c93", "da676/eb13a/b058e/c5cd2", "da676/eb13a/f86ef/bff93", "da676/b0e2b/f053f", "da676/b0e2b/e9c55", "da676/a5d9e/d6ba6/f3211", "hbs!templates/room/header/RoomInfo", "lang/Lang" ], function( e, t, n, r, i, s, o, u, a, f, l, c, h, p, d, v, m, g ) {', 'u') ==> "da676/cba08/ee33b"
        */
        var ref$, a, b, that;
        ref$ = haystack.split("], function("), a = ref$[0], b = ref$[1];
        a = a.substr(a.indexOf('"')).split('", "');
        b = b.substr(0, b.indexOf(')')).split(', ');
        if (that = b[a.indexOf(needle)]) {
          try {
            window[that] = require(needle);
          } catch (e$) {}
          return that;
        } else if (that = a[b.indexOf(needle)]) {
          try {
            window[needle] = require(that);
          } catch (e$) {}
          return that;
        }
      },
      logOnce: function(base, event){
        if (!event) {
          event = base;
          if (-1 !== event.indexOf(':')) {
            base = _$context;
          } else {
            base = API;
          }
        }
        base.once('event', logger(event));
      },
      usernameToSlug: function(un){
        /* note: this is NOT really accurate! */
        var lastCharWasLetter, res, i$, ref$, len$, c, lc;
        lastCharWasLetter = false;
        res = "";
        for (i$ = 0, len$ = (ref$ = htmlEscape(un)).length; i$ < len$; ++i$) {
          c = ref$[i$];
          if ((lc = c.toLowerCase()) !== c.toUpperCase()) {
            if (/\w/.test(lc)) {
              res += c.toLowerCase();
            } else {
              res += "\\u" + pad(lc.charCodeAt(0), 4);
            }
            lastCharWasLetter = true;
          } else if (lastCharWasLetter) {
            res += "-";
            lastCharWasLetter = false;
          }
        }
        if (!lastCharWasLetter) {
          res = res.substr(0, res.length - 1);
        }
        return res;
      },
      reconnectSocket: function(){
        _$context.trigger('force:reconnect');
      },
      ghost: function(){
        return $.get('/');
      },
      getAvatars: function(){
        API.once('p0ne:avatarsloaded', logger('AVATARS'));
        $.get($("script[src^='https://cdn.plug.dj/_/static/js/avatars.']").attr('src')).then(function(d){
          var that;
          if (that = d.match(/manifest.*/)) {
            API.trigger('p0ne:avatarsloaded', JSON.parse(that[0].substr(11, that[0].length - 12)));
          }
        });
      },
      showAllAvatarThumbs: function(){
        var $el, avis, id, ref$, avi, key$, res, i$, str;
        $el = $('#avatar-thumb-test');
        if ($el.length === 0) {
          $el = $('<div id=avatar-thumb-test>').appendTo('body').css({
            position: 'absolute',
            top: 54,
            right: 345,
            width: 400,
            zIndex: 99999999999,
            background: '#222'
          }).click(function(){
            $el.remove();
          });
        }
        avis = {};
        for (id in ref$ = p0ne._avatars) {
          avi = ref$[id];
          if (!avi.isVanilla) {
            avis[key$ = avi.category] || (avis[key$] = "<h4>" + avi.category + "</h4>");
            avis[avi.category] += "<div class='thumb medium' title='" + id + "' style='position: relative; display: inline-block'><div class=background></div><i class='avi avi-" + id + "'></i></div>";
          }
        }
        res = "";
        for (i$ in avis) {
          str = avis[i$];
          res += str;
        }
        $el.html(res);
      },
      parseYTGetVideoInfo: function(d, onlyStripHTML){
        var k, v, ref$, res, i$, ref1$, len$, a, ref2$;
        if (typeof d === 'object') {
          for (k in d) {
            v = d[k];
            d[k] = parseYTGetVideoInfo(v);
          }
          return d;
        } else if (typeof d !== 'string' || d.startsWith("http")) {
          return d;
        } else if (d.startsWith("<!DOCTYPE html>")) {
          d = JSON.parse(((ref$ = d.match(/ytplayer\.config = (\{[\s\S]*?\});/)) != null ? ref$[1] : void 8) || null);
          if (onlyStripHTML) {
            return d;
          } else {
            return parseYTGetVideoInfo(d);
          }
        } else if (d.has(",")) {
          return d.split(",").map(parseYTGetVideoInfo);
        } else if (d.has("&")) {
          res = {};
          for (i$ = 0, len$ = (ref1$ = d.split("&")).length; i$ < len$; ++i$) {
            a = ref1$[i$];
            a = a.split("=");
            if (res[a[0]]) {
              if (!$.isArray(res[a[0]])) {
                res[a[0]] = [res[a[0]]];
              }
              (ref2$ = res[a[0]])[ref2$.length] = parseYTGetVideoInfo(unescape(a[1]));
            } else {
              res[a[0]] = parseYTGetVideoInfo(unescape(a[1]));
            }
          }
          return res;
        } else if (!isNaN(d)) {
          return +d;
        } else if (d === 'True' || d === 'False') {
          return d === 'True';
        } else {
          return d;
        }
      },
      play: function(media){
        /* force plug to play the provided song */
        if (!media) {
          return;
        } else if (typeof media !== 'object') {
          mediaLookup(media).then(play);
        } else {
          if (media.author) {
            media = new Backbone.Model(media);
          }
          currentMedia.set('media', media);
        }
      },
      lssize: function(sizeWhenDecompressed){
        var size, k, ref$, v;
        size = 0;
        for (k in ref$ = localStorage) {
          v = ref$[k];
          if (k !== 'length') {
            if (sizeWhenDecompressed) {
              try {
                v = decompress(v);
              } catch (e$) {}
            }
            size += (v || '').length / 524288;
          }
        }
        return size;
      },
      formatCSS: function(css){
        return css.replace(/(\s*)(?:(\/\*.*?\*\/)|(@media .*?)\{(.*?)\}|(.*?)\{(.*?)\})/g, function(arg$, ws, comment, mQuery, mContent, selector, css){
          ws || (ws = "\n");
          if (comment != null) {
            return ws + "" + comment + "\n";
          } else if (mQuery != null) {
            return ws + "" + mQuery + "\n{\n\t" + formatCSS(mContent).split("\n").join("\n\t") + "\n}";
          } else if (selector != null) {
            return "" + ws + selector.replace(/\s*,\s*/g, ',\n') + " {\n" + css.replace(/;\s*/g, ';\n\t').replace(/^\s*(\w+):\s*/gm, '\t$1: ').replace(/\s*$/, '') + "\n}\n\n";
          }
        });
      }
    });
    if (!window.chrome) {
      $.getScript("https://cdn.p0ne.com/scripts/zclip/jquery.zclip.min.js").then(function(){
        window.copy = function(str, title){
          appendChat($("<button class='cm p0ne-notif'> copy " + (title || '') + "</button>")).zclip({
            path: "https://cdn.p0ne.com/scripts/zclip/ZeroClipboard.swf",
            copy: str
          });
        };
        console.info("[copy polyfill] loaded polyfill for copy() with zclip");
      }).fail(function(){
        console.warn("[copy polyfill] failed to load zclip!");
      });
    }
    /*####################################
    #            RENAME USER             #
    ####################################*/
    module('renameUser', {
      require: ['users'],
      module: function(idOrName, newName){
        var u, i$, ref$, len$, user, id, rup;
        u = users.get(idOrName);
        if (!u) {
          idOrName = idOrName.toLowerCase();
          for (i$ = 0, len$ = (ref$ = users.models).length; i$ < len$; ++i$) {
            user = ref$[i$];
            if (user.attributes.username.toLowerCase() === idOrName) {
              u = user;
              break;
            }
          }
        }
        if (!u) {
          return console.error("[rename user] can't find user with ID or name '" + idOrName + "'");
        }
        u.set('username', newName);
        id = u.id;
        if (!(rup = window.p0ne.renameUserPlugin)) {
          rup = window.p0ne.renameUserPlugin = function(d){
            d.un = rup[d.fid] || d.un;
          };
          if ((ref$ = window.p0ne.chatPlugins) != null) {
            ref$[ref$.length] = rup;
          }
        }
        rup[id] = newName;
      }
    });
    (function(){
      window._$events = {
        _update: function(){
          var k, ref$, v;
          for (k in ref$ = typeof _$context != 'undefined' && _$context !== null ? _$context._events : void 8) {
            v = ref$[k];
            this[k.replace(/:/g, '_')] = v;
          }
        }
      };
      _$events._update();
    })();
    /*####################################
    #            EXPORT DATA             #
    ####################################*/
    module('export_', {
      require: ['downloadLink'],
      exportPlaylists: function(){
        var i$, ref$, len$;
        for (i$ = 0, len$ = (ref$ = playlists).length; i$ < len$; ++i$) {
          (fn$.call(this, ref$[i$]));
        }
        function fn$(pl){
          $.get("/_/playlists/" + pl.id + "/media").then(function(data){
            downloadLink("playlist '" + pl.name + "'", pl.name + ".txt", data);
          });
        }
      }
    });
    /*####################################
    #              COPY CHAT             #
    ####################################*/
    window.copyChat = function(copy){
      var host, res;
      $('#chat-messages img').fixSize();
      host = p0ne.host;
      res = "<!DOCTYPE HTML>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>plug.dj Chatlog " + getTime() + " - " + getRoomSlug() + " (" + API.getUser().rawun + ")</title>\n<!-- basic chat styling -->\n" + $("head link[href^='https://cdn.plug.dj/_/static/css/app']")[0].outerHTML + "\n<link href='https://dl.dropboxusercontent.com/u/4217628/css/fimplugChatlog.css' rel='stylesheet' type='text/css'>";
      res += getCustomCSS(true);
      /*
      res += """\n
          <!-- p0ne song notifications -->
          <link rel='stylesheet' href='#host/css/p0ne.notif.css' type='text/css'>
      """ if window.songNotifications
      
      res += """\n
          <!-- better ponymotes -->
          <link rel='stylesheet' href='#host/css/bpmotes.css' type='text/css'>
          <link rel='stylesheet' href='#host/css/emote-classes.css' type='text/css'>
          <link rel='stylesheet' href='#host/css/combiners-nsfw.css' type='text/css'>
          <link rel='stylesheet' href='#host/css/gif-animotes.css' type='text/css'>
          <link rel='stylesheet' href='#host/css/extracss-pure.css' type='text/css'>
      """ if window.bpm or get$cm! .find \.bpm-emote .length
      
      res += """\n
          <style>
          #{css \yellowMod}
          </style>
      """ if window.yellowMod
      */
      res += "\n\n</head>\n<body id=\"chatlog\">\n" + $('.app-right').html().replace(/https:\/\/api\.plugCubed\.net\/proxy\//g, '').replace(/src="\/\//g, 'src="https://') + "\n</body>";
      copy(res);
    };
    /*
    module \_$contextUpdateEvent, do
        require: <[ _$context ]>
        setup: ({replace}) !->
            for fn in <[ on off onEarly ]>
                replace _$context, fn,  (fn_) !-> return (type, cb, context) !->
                    fn_ ...
                    _$context .trigger \context:update, type, cb, context
                    return this
    */
    /*@source p0ne.ponify.ls */
    /**
     * ponify chat - a script to ponify some words in the chat on plug.dj
     * Text ponification based on http://pterocorn.blogspot.dk/2011/10/ponify.html
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.ponify ~~~~~~~");
    /*####################################
    #            PONIFY CHAT             #
    ####################################*/
    module('ponify', {
      optional: ['emoticons'],
      displayName: 'Ponify Chat',
      settings: 'pony',
      help: 'Ponify the chat! (replace words like "anyone" with "anypony")\nReplaced words will be underlined. Move your cursor over the word to see it\'s original.\n\nIt also replaces some of the emoticons with pony emoticons.',
      disabled: true
      /*== TEXT ==*/,
      map: {
        "anybody": "anypony",
        "anyone": "anypony",
        "ass": "flank",
        "asses": "flanks",
        "boner": "wingboner",
        "boy": "colt",
        "boyfriend": "coltfriend",
        "boyfriends": "coltfriends",
        "boys": "colts",
        "bro fist": "brohoof",
        "bro-fist": "brohoof",
        "butt": "flank",
        "butthurt": "saddle-sore",
        "butts": "flanks",
        "child": "foal",
        "children": "foals",
        "cowboy": "cowpony",
        "cowboys": "cowponies",
        "cowgirl": "cowpony",
        "cowgirls": "cowponies",
        "disappoint": "disappony",
        "disappointed": "disappony",
        "disappointment": "disapponyment",
        "doctor who": "doctor whooves",
        "dr who": "dr whooves",
        "dr. who": "dr. whooves",
        "everybody": "everypony",
        "everyone": "everypony",
        "fap": "clop",
        "faps": "clops",
        "foot": "hoof",
        "feet": "hooves",
        "folks": "foalks",
        "fool": "foal",
        "foolish": "foalish",
        "germany": "germaneigh",
        "gentleman": "gentlecolt",
        "gentlemen": "gentlecolts",
        "girl": "filly",
        "girls": "fillies",
        "girlfriend": "fillyfriend",
        "girlfriends": "fillyfriends",
        "halloween": "nightmare night",
        "hand": "hoof",
        "hands": "hooves",
        "handed": "hoofed",
        "handedly": "hoofedly",
        "handers": "hoofers",
        "handmade": "hoofmade",
        "hey": "hay",
        "high-five": "hoof-five",
        "highfive": "hoof-five",
        "ladies": "fillies",
        "main": "mane",
        "man": "stallion",
        "men": "stallions",
        "manhattan": "manehattan",
        "marathon": "mareathon",
        "miracle": "mareacle",
        "miracles": "mareacles",
        "money": "bits",
        "naysayer": "neighsayer",
        "no one else": "nopony else",
        "no-one else": "nopony else",
        "noone else": "nopony else",
        "nobody": "nopony",
        "nottingham": "trottingham",
        "null": "nullpony",
        "old-timer": "old-trotter",
        "people": "ponies",
        "person": "pony",
        "persons": "ponies",
        "philadelphia": "fillydelphia",
        "somebody": "somepony",
        "someone": "somepony",
        "stalingrad": "stalliongrad",
        "sure as hell": "sure as hay",
        "tattoo": "cutie mark",
        "tattoos": "cutie mark",
        "da heck": "da hay",
        "the heck": "the hay",
        "the hell": "the hay",
        "troll": "parasprite",
        "trolls": "parasprites",
        "trolled": "parasprited",
        "trolling": "paraspriting",
        "trollable": "paraspritable",
        "woman": "mare",
        "women": "mares",
        "confound those dover boys": "confound these ponies"
      },
      ponifyMsg: function(msg){
        var this$ = this;
        msg.message = msg.message.replaceSansHTML(this.regexp, function(_, pronoun, s, possessive, i){
          var w, r, lastUpperCaseLetters, l, ref$, ref1$, i$, o;
          w = this$.map[s.toLowerCase()];
          r = "";
          /*preserve upper/lower case*/
          lastUpperCaseLetters = 0;
          l = (ref$ = s.length) < (ref1$ = w.length) ? ref$ : ref1$;
          for (i$ = 0; i$ < l; ++i$) {
            o = i$;
            if (s[o].toLowerCase() !== s[o]) {
              r += w[o].toUpperCase();
              lastUpperCaseLetters++;
            } else {
              r += w[o];
              lastUpperCaseLetters = 0;
            }
          }
          if (w.length >= s.length && lastUpperCaseLetters >= 3) {
            r += w.substr(l).toUpperCase();
          } else {
            r += w.substr(l);
          }
          r = "<abbr class=ponified title='" + s + "'>" + r + "</abbr>";
          if (pronoun) {
            if ("aeioujyh".has(w[0])) {
              r = "an " + r;
            } else {
              r = "a " + r;
            }
          }
          if (possessive) {
            if ("szx".has(w[w.length - 1])) {
              r += "' ";
            } else {
              r += "'s ";
            }
          }
          console.log("replaced '" + s + "' with '" + r + "'", msg.cid);
          return r;
        });
      }
      /*== EMOTICONS ==*/
      /* images from bronyland.com (reuploaded to imgur to not spam the console with warnings, because bronyland.com doesn't support HTTPS) */,
      autoEmotiponies: {
        '8)': {
          name: 'rainbowdetermined2',
          url: "https://i.imgur.com/WFa3vKA.png"
        },
        ':(': {
          name: 'fluttershysad',
          url: "https://i.imgur.com/6L0bpWd.png"
        },
        ':)': {
          name: 'twilightsmile',
          url: "https://i.imgur.com/LDoxwfg.png"
        },
        ':?': {
          name: 'rainbowhuh',
          url: "https://i.imgur.com/te0Mnih.png"
        },
        ':B': {
          name: 'twistnerd',
          url: "https://i.imgur.com/57VFd38.png"
        },
        ':D': {
          name: 'pinkiehappy',
          url: "https://i.imgur.com/uFwZib6.png"
        },
        ':S': {
          name: 'unsuresweetie',
          url: "https://i.imgur.com/EATu0iu.png"
        },
        ':O': {
          name: 'pinkiegasp',
          url: "https://i.imgur.com/b9G2kaz.png"
        },
        ':X': {
          name: 'fluttershybad',
          url: "https://i.imgur.com/mnJHnsv.png"
        },
        ':|': {
          name: 'ajbemused',
          url: "https://i.imgur.com/8SLymiw.png"
        },
        ';)': {
          name: 'raritywink',
          url: "https://i.imgur.com/9fo7ZW3.png"
        },
        '<3': {
          name: 'heart',
          url: "https://i.imgur.com/aPBXLob.png"
        },
        'B)': {
          name: 'coolphoto',
          url: "https://i.imgur.com/QDgMyIZ.png"
        },
        'D:': {
          name: 'raritydespair',
          url: "https://i.imgur.com/og1FoWN.png"
        }
      },
      emotiponies: {
        aj: "https://i.imgur.com/nnYMw87.png",
        applebloom: "https://i.imgur.com/vAdPBJj.png",
        applejack: "https://i.imgur.com/nnYMw87.png",
        blush: "https://i.imgur.com/IpxwJ5c.png",
        cool: "https://i.imgur.com/WFa3vKA.png",
        cry: "https://i.imgur.com/fkYW4BG.png",
        derp: "https://i.imgur.com/Y00vqcH.png",
        derpy: "https://i.imgur.com/h6GdxHo.png",
        eek: "https://i.imgur.com/mnJHnsv.png",
        evil: "https://i.imgur.com/I8CNeRx.png",
        fluttershy: "https://i.imgur.com/6L0bpWd.png",
        fs: "https://i.imgur.com/6L0bpWd.png",
        idea: "https://i.imgur.com/aitjp1R.png",
        lol: "https://i.imgur.com/XVy41jX.png",
        loveme: "https://i.imgur.com/H81S9x0.png",
        mad: "https://i.imgur.com/taFXcWV.png",
        mrgreen: "https://i.imgur.com/IkInelN.png",
        oops: "https://i.imgur.com/IpxwJ5c.png",
        photofinish: "https://i.imgur.com/QDgMyIZ.png",
        pinkie: "https://i.imgur.com/tpQZaW4.png",
        pinkiepie: "https://i.imgur.com/tpQZaW4.png",
        rage: "https://i.imgur.com/H81S9x0.png",
        rainbowdash: "https://i.imgur.com/xglySrD.png",
        rarity: "https://i.imgur.com/9fo7ZW3.png",
        razz: "https://i.imgur.com/f8SgNBw.png",
        rd: "https://i.imgur.com/xglySrD.png",
        roll: "https://i.imgur.com/JogpKQo.png",
        sad: "https://i.imgur.com/6L0bpWd.png",
        scootaloo: "https://i.imgur.com/9zVXkyg.png",
        shock: "https://i.imgur.com/b9G2kaz.png",
        sweetie: "https://i.imgur.com/EATu0iu.png",
        sweetiebelle: "https://i.imgur.com/EATu0iu.png",
        trixie: "https://i.imgur.com/2QEmT8y.png",
        trixie2: "https://i.imgur.com/HWW2D6b.png",
        trixieleft: "https://i.imgur.com/HWW2D6b.png",
        twi: "https://i.imgur.com/LDoxwfg.png",
        twilight: "https://i.imgur.com/LDoxwfg.png",
        twist: "https://i.imgur.com/57VFd38.png",
        twisted: "https://i.imgur.com/I8CNeRx.png",
        wink: "https://i.imgur.com/9fo7ZW3.png"
      },
      setup: function(arg$){
        var addListener, replace, css, aEM, emote, ref$, ref1$, name, url, m, ponyCSS, reversedMap;
        addListener = arg$.addListener, replace = arg$.replace, css = arg$.css;
        this.regexp = RegExp('\\b(an?\\s+)?(' + Object.keys(this.map).join('|').replace(/\s+/g, '\\s*') + ')(\'s?)?\\b', 'gi');
        addListener(API, 'chat:plugin', bind$(this, 'ponifyMsg'));
        if (typeof emoticons != 'undefined' && emoticons !== null) {
          aEM = importAll$({}, emoticons.autoEmoteMap);
          for (emote in ref$ = this.autoEmotiponies) {
            ref1$ = ref$[emote], name = ref1$.name, url = ref1$.url;
            aEM[emote] = name;
            this.emotiponies[name] = url;
          }
          replace(emoticons, 'autoEmoteMap', function(){
            return aEM;
          });
          m = clone$(emoticons.map);
          ponyCSS = ".ponimoticon { width: 27px; height: 27px }\n.chat-suggestion-item .ponimoticon { margin-left: -5px }\n.emoji-glow { width: auto; height: auto }\n.emoji { position: static; display: inline-block }\n";
          reversedMap = {};
          for (emote in ref$ = this.emotiponies) {
            url = ref$[emote];
            if (reversedMap[url]) {
              m[emote] = reversedMap[url] + " ponimoticon";
            } else {
              reversedMap[url] = emote;
              m[emote] = emote + " ponimoticon";
            }
            ponyCSS += ".emoji-" + emote + " { background: url(" + url + ") }\n";
          }
          css('ponify', ponyCSS);
          replace(emoticons, 'map', function(){
            return m;
          });
          if (typeof emoticons.update == 'function') {
            emoticons.update();
          }
        }
      },
      disable: function(){
        if (typeof emoticons.update == 'function') {
          emoticons.update();
        }
      }
    });
    module('ponifiedLang', {
      require: ['Lang'],
      disabled: true,
      displayName: "Ponified Text",
      settings: 'pony',
      setup: function(arg$){
        var replace, css, replaceMap, regx, i$, ref$, group, k, v, v2;
        replace = arg$.replace, css = arg$.css;
        replaceMap = {
          user: 'pony',
          person: 'pony',
          people: 'ponies',
          People: 'Ponies',
          Nobody: 'Nopony',
          woot: "squee",
          Woot: "Squee",
          Points: "Bits",
          "Resident DJs": 'Horse Famous',
          "Resident DJ": 'Horse Famous',
          Bouncer: 'Royal Guard',
          Manager: 'Royal Guard Captain',
          "Co-Host": 'Alicorn',
          Host: 'Alicorn Princess',
          "Community staff": "Local VIP Ponies",
          staff: 'VIP Pony List'
        };
        regx = RegExp('\\b(' + Object.keys(replaceMap).join('|') + ')(s?|)\\b', 'g');
        console.groupCollapsed("[ponifiedLang] dynamically replacing words");
        for (i$ in ref$ = Lang) {
          group = ref$[i$];
          for (k in group) {
            v = group[k];
            if (k[k.length - 1] !== "_" && v) {
              v2 = v.replace(regx, fn$);
              if (v !== v2) {
                replace(group, k, fn1$);
                console.log("\treplacing '" + v + "' with '" + group[k] + "'");
              }
            }
          }
        }
        console.groupEnd();
        replace(Lang.roles, 'none', function(){
          return "Mudpony";
        });
        replace(Lang.moderation, 'staffDJ', function(){
          return "made %NAME% Horse Famous.";
        });
        replace(Lang.moderation, 'staffBouncer', function(){
          return "hired %NAME% as a Royal Guard.";
        });
        replace(Lang.moderation, 'staffManager', function(){
          return "hired %NAME% as a Royal Guard Captain.";
        });
        replace(Lang.moderation, 'staffCohost', function(){
          return "transformed %NAME% into an Alicorn.";
        });
        replace(Lang.moderation, 'staffHost', function(){
          return "transformed %NAME% into an Alicorn Princess.";
        });
        replace(Lang.permissions, 'dj', function(){
          return "Set Horse Famous Ponies";
        });
        replace(Lang.permissions, 'bouncers', function(){
          return "Hire Royal Guard";
        });
        replace(Lang.permissions, 'managers', function(){
          return "Hire Royal Guard Captains";
        });
        replace(Lang.moderation, 'ban', function(){
          return "sent %NAME% to the moon for a thousand years.";
        });
        replace(Lang.userSettings, 'videoOnly', function(){
          return "Video Only (no dancing horses)";
        });
        replace(Lang.userMeta, 'profileURL', function(){
          return "Hoofbook Profile URL";
        });
        replace(Lang.userFriends, 'profile', function(){
          return "Hoofbook Profile";
        });
        replace(Lang.userList, 'staffTitle', function(){
          return replaceMap.staff;
        });
        replace(Lang.tooltips, 'profile', function(){
          return "Edit your Hoofbook Profile";
        });
        replace(Lang.userSettings, 'nsfw', function(){
          return "Show Clopper Communities (NSFW)";
        });
        replace(Lang.alerts, 'sessionExpired', function(){
          return "Horseapples!";
        });
        replace($('#woot .label')[0], 'textContent', function(){
          return "Squee!";
        });
        replace(Lang.chat, 'help', function(){
          return "<strong>Chat Commands:</strong><br/>/em &nbsp; <em>Emote</em><br/>/me &nbsp; <em>Emote</em><br/>/clear &nbsp; <em>Clear Chat History</em><hr><strong>Bot Commands:</strong><br>!randgame &nbsp; <em>Pony Adventure</em><br/>!power &nbsp; <em>Random Power</em><br/>!hug (@user) &nbsp; <em>hug somepony</em><br/>!1v1 (@user) &nbsp; <em>1v1 somepony</em><br/>!rule <number> &nbsp; <em>List a Rule</em><br/>!songinfo &nbsp; <em>Songstats</em><br/>!dc &nbsp; <em>be put back if you dc'd</em><br/>!eta &nbsp; <em>ETA til you dj</em><br/>!weird &nbsp; <em>Is it weirdday?</em><br/>";
        });
        replace(Lang.search, 'youtube', function(){
          return "Search YouTube for ponies";
        });
        replace(Lang.search, 'soundcloud', function(){
          return "Search SoundCloud for ponies";
        });
        css('ponifiedLang', '#dialog-user-role .role-menu,#dialog-user-role .role-menu .selected {width: 205px;}');
        function fn$(arg$, a, b){
          return replaceMap[a] + b;
        }
        function fn1$(){
          return v2;
        }
      }
    });
    /*@source p0ne.fimplug.ls */
    /**
     * fimplug related modules
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.fimplug ~~~~~~~");
    /*####################################
    #              RULESKIP              #
    ####################################*/
    module('forceSkipButtonRuleskip', {
      displayName: "Ruleskip Button",
      settings: 'pony',
      help: "Makes the Skip button show a ruleskip list instead.\n(you can still instaskip)",
      screenshot: 'https://i.imgur.com/jGwYsn3.png',
      moderator: true,
      setup: function(arg$){
        var addListener, replace, $create, css, $rulelist, visible, fn;
        addListener = arg$.addListener, replace = arg$.replace, $create = arg$.$create, css = arg$.css;
        css('forceSkipButtonRuleskip', '.p0ne-skip-ruleskip {position: absolute;right: 0;bottom: 54px;width: 250px;list-style: none;line-height: 2em;display: none;}.p0ne-skip-ruleskip li {padding: 5px;background: #222;}.p0ne-skip-ruleskip li:hover {background: #444;}');
        visible = false;
        fn = addListener(API, 'p0ne:moduleEnabled', function(m){
          if (m.moduleName === 'forceSkipButton') {
            $rulelist = $create('<ul class=p0ne-skip-ruleskip><li data-rule=insta><b>insta skip</b></li><li data-rule=30><b>!ruleskip 30</b> (WD-only &gt; brony artist)</li><li data-rule=23><b>!ruleskip 23</b> (WD-only &gt; weird)</li><li data-rule=20><b>!ruleskip 20</b> (alts)</li><li data-rule=13><b>!ruleskip 13</b> (NSFW)</li><li  data-rule=6><b>!ruleskip  6</b> (too long)</li><li  data-rule=4><b>!ruleskip  4</b> (history)</li><li  data-rule=3><b>!ruleskip  3</b> (low effort mix)</li><li  data-rule=2><b>!ruleskip  2</b> (loop / slideshow)</li><li  data-rule=1><b>!ruleskip  1</b> (nonpony)</li></ul>').appendTo(m.$btn);
            replace(m, 'onClick', function(){
              return function(e){
                var num;
                if (visible) {
                  if (num = $(e.target).closest('li').data('rule')) {
                    if (num === 'insta') {
                      API.moderateForceSkip();
                    } else {
                      API.sendChat("!ruleskip " + num);
                    }
                  }
                  m.$btn.find('.icon:first').addClass('icon-skip').removeClass('icon-arrow-down');
                  $rulelist.fadeOut();
                  visible = false;
                } else if ($(e.target).is('.p0ne-skip-btn, .p0ne-skip-btn>.icon')) {
                  m.$btn.find('.icon:first').removeClass('icon-skip').addClass('icon-arrow-down');
                  $rulelist.fadeIn();
                  visible = true;
                }
              };
            });
            console.log("[forceSkipButton] 'fimplug !ruleskip list' patch applied");
          }
        });
        addListener('early', window._$context || API, 'advance', function(){
          if (visible) {
            visible = false;
            $rulelist.fadeOut();
            $('.p0ne-skip-btn>.icon:first').addClass('icon-skip').removeClass('icon-arrow-down');
          }
        });
        if (typeof forceSkipButton != 'undefined' && forceSkipButton !== null) {
          fn(forceSkipButton);
        }
      }
    });
    /*####################################
    #              FIMSTATS              #
    ####################################*/
    module('fimstats', {
      settings: 'pony',
      optional: ['_$context', 'app', 'playlists'],
      disabled: true,
      _settings: {
        highlightUnplayed: false
      },
      CACHE_DURATION: 1 .h,
      setup: function(arg$, fimstats){
        var addListener, $create, replace, $el, that, ref$, ref1$, ref2$, $yourNextMedia, this$ = this;
        addListener = arg$.addListener, $create = arg$.$create, replace = arg$.replace;
        css('fimstats', '.p0ne-fimstats {position: absolute;left: 0;right: 345px;bottom: 54px;height: 1em;padding: 5px 0;font-size: .9em;color: #12A9E0;background: rgba(0,0,0, 0.4);text-align: center;z-index: 6;transition: opacity .2s ease-out;}.video-only .p0ne-fimstats {bottom: 116px;padding-top: 0px;background: rgba(0,0,0, 0.8);}.p0ne-fimstats-field {display: block;position: absolute;width: 100%;padding: 0 5px;box-sizing: border-box;}.p0ne-fimstats-last { text-align: left; }.p0ne-fimstats-plays, .p0ne-fimstats-once, .p0ne-fimstats-first-notyet { text-align: center; }.p0ne-fimstats-first { text-align: right; }.p0ne-fimstats-field::before, .p0ne-fimstats-field::after,.p0ne-fimstats-first-time, .p0ne-fimstats-last-time, .p0ne-fimstats-once-time {color: #ddd;}#dialog-container .p0ne-fimstats {position: fixed;bottom: 0;left: 0;right: 345px;background: rgba(0,0,0, 0.8);}#dialog-container .p0ne-fimstats-first-notyet::before { content: "not played yet!"; color: #12A9E0 }.p0ne-fimstats-first-notyet::before { content: "first played just now!"; color: #12A9E0 }.p0ne-fimstats-once::before { content: "once played by: "; }.p0ne-fimstats-last::before { content: "last played by: "; }.p0ne-fimstats-last-time::before,.p0ne-fimstats-first-time::before,.p0ne-fimstats-once-time::before { content: "("; }.p0ne-fimstats-last-time::after,.p0ne-fimstats-first-time::after,.p0ne-fimstats-once-time::after { content: ")"; }.p0ne-fimstats-plays::before { content: "played: "; }.p0ne-fimstats-plays::after { content: " times"; }.p0ne-fimstats-first::before { content: "first played by: "; }.p0ne-fimstats-first-time,.p0ne-fimstats-last-time,.p0ne-fimstats-once-time {font-size: 0.8em;display: inline;position: static;margin-left: 5px;}.p0ne-fimstats-unplayed {color: lime;}');
        $el = $create('<span class=p0ne-fimstats>').appendTo('#room');
        addListener(API, 'advance', this.updateStats = function(d){
          var ref$, id;
          if (d != null && ((ref$ = d.lastPlay) != null && ref$.media)) {
            delete this$.cache[id = d.lastPlay.media.format + ":" + d.lastPlay.media.cid];
          }
          if (d.media) {
            fimstats(d.media).then(function(res){
              $el.html(res.html);
            }).fail(function(err){
              $el.html(err.html);
            });
            if (typeof this$.checkUnplayed == 'function') {
              this$.checkUnplayed(d.dj);
            }
          } else {
            $el.html("");
          }
        });
        if (typeof _$context != 'undefined' && _$context !== null) {
          addListener(_$context, 'ShowDialogEvent:show', function(d){
            _.defer(function(){
              var ref$;
              if ((ref$ = d.dialog.options) != null && ref$.media) {
                console.log("[fimstats]", d.dialog.options.media);
                fimstats(d.dialog.options.media).then(function(d){
                  $('#dialog-preview').after($create('<div class=p0ne-fimstats>').html(d.html));
                });
              }
            });
          });
        }
        if (that = app != null ? (ref$ = app.dialog) != null ? (ref1$ = ref$.dialog) != null ? (ref2$ = ref1$.options) != null ? ref2$.media : void 8 : void 8 : void 8 : void 8) {
          console.log("[fimstats]", that);
          fimstats(that.toJSON()).then(function(d){
            $('#dialog-preview').after($create('<div class=p0ne-fimstats>').html(d.html));
          });
        }
        console.info("[fimstats] prevent p0neSettings overlay", $('#p0ne-menu').css({
          bottom: 54 + 21
        }));
        addListener(API, 'p0ne:moduleEnabled p0ne:moduleUpdated', function(m){
          if (m.moduleName === 'p0neSettings') {
            $('#p0ne-menu').css({
              bottom: 54 + 21
            });
          }
        });
        if (app != null && (typeof playlists != 'undefined' && playlists !== null)) {
          $yourNextMedia = $('#your-next-media');
          this.checkUnplayed = function(dj){
            var i, ref$;
            $yourNextMedia.removeClass('p0ne-fimstats-unplayed');
            i = +(((ref$ = dj || API.getDJ()) != null ? ref$.id : void 8) === userID);
            if (fimstats._settings.highlightUnplayed && playlists.activeMedia.length >= i) {
              console.log("[fimstats] checking next song", playlists.activeMedia[i]);
              fimstats(playlists.activeMedia[i]).then(function(d){
                if (d.unplayed) {
                  $yourNextMedia.addClass('p0ne-fimstats-unplayed');
                }
              });
            }
          };
          replace(app.footer.playlist, 'updateMeta', function(uM_){
            return function(){
              if (playlists.activeMedia.length > 0) {
                uM_.apply(this, arguments);
                fimstats.checkUnplayed();
              } else {
                clearTimeout(this.updateMetaBind);
              }
            };
          });
          replace(app.footer.playlist, 'updateMetaBind', function(){
            return bind$(app.footer.playlist, 'updateMeta');
          });
          this.checkUnplayed();
        } else {
          console.warn("[fimstats] failed to load requirements for checking next song. next song check disabled.");
        }
        this.updateStats({
          media: API.getMedia()
        });
      },
      checkUnplayed: function(){},
      cache: {},
      module: function(media){
        var id, def, this$ = this;
        media == null && (media = API.getMedia());
        $('#p0ne-menu').css({
          bottom: 54
        });
        if (media.attributes && media.toJSON) {
          media = media.toJSON();
        }
        if (this.cache[id = media.format + ":" + media.cid]) {
          clearTimeout(this.cache[id].timeoutID);
          this.cache[id].timeoutID = sleep(this.CACHE_DURATION, function(){
            var ref$, ref1$;
            return ref1$ = (ref$ = this$.cache)[id], delete ref$[id], ref1$;
          });
          return this.cache[id];
        } else {
          def = $.Deferred();
          this.cache[id] = def.promise();
          this.cache[id].timeoutID = sleep(this.CACHE_DURATION, function(){
            var ref$, ref1$;
            return ref1$ = (ref$ = this$.cache)[id], delete ref$[id], ref1$;
          });
        }
        $.getJSON("https://fimstats.anjanms.com/_/media/" + media.format + "/" + media.cid).then(function(d){
          var k, v, k2, v2;
          d = d.data[0];
          for (k in d) {
            v = d[k];
            if (typeof v === 'string') {
              d[k] = sanitize(v);
            } else {
              for (k2 in v) {
                v2 = v[k2];
                if (typeof v2 === 'string') {
                  v[k2] = sanitize(v2);
                }
              }
            }
          }
          if (d.firstPlay.time !== d.lastPlay.time) {
            d.text = "last played by " + d.lastPlay.user.username + " \xa0 - (" + d.plays + "x) - \xa0 first played by " + d.firstPlay.user.username;
            d.html = "<span class='p0ne-fimstats-field p0ne-fimstats-last p0ne-name' data-uid=" + d.lastPlay.id + ">" + d.lastPlay.user.username + "<span class=p0ne-fimstats-last-time>" + ago(d.lastPlay.time * 1000) + "</span></span><span class='p0ne-fimstats-field p0ne-fimstats-plays'>" + d.plays + "</span><span class='p0ne-fimstats-field p0ne-fimstats-first p0ne-name' data-uid=" + d.firstPlay.id + ">" + d.firstPlay.user.username + "<span class=p0ne-fimstats-first-time>" + ago(d.firstPlay.time * 1000) + "</span></span>";
          } else {
            d.text = "once played by " + d.firstPlay.user.username;
            d.html = "<span class='p0ne-fimstats-field p0ne-fimstats-once'>" + d.firstPlay.user.username + "<span class=p0ne-fimstats-once-time>" + ago(d.firstPlay.time * 1000) + "</span></span>";
          }
          def.resolve(d);
        }).fail(function(d, arg$, status){
          if (status === "Not Found") {
            d.text = "first played just now!";
            d.html = "<span class='p0ne-fimstats-field p0ne-fimstats-first-notyet'></span>";
            d.unplayed = true;
            def.resolve(d);
          } else {
            d.text = d.html = "error loading fimstats";
            def.reject(d);
          }
        });
        return this.cache[id];
        function sanitize(str){
          return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        }
      },
      settingsExtra: function($el){
        var fimstats, noReqMissing;
        fimstats = this;
        noReqMissing = app != null || (typeof playlists == 'undefined' || playlists === null);
        $("<form><label><input type=checkbox class=p0ne-fimstats-unplayed-setting " + (this._settings.highlightUnplayed && noReqMissing ? 'checked' : '') + " " + (noReqMissing ? '' : 'disabled') + "> highlight next song if unplayed</label></form>").appendTo($el.css({
          paddingLeft: 15
        }));
        if (noReqMissing) {
          $el.on('click', '.p0ne-fimstats-unplayed-setting', function(){
            console.log(getTime() + " [fimstats] updated highlightUnplayed to " + this.checked);
            fimstats._settings.highlightUnplayed = this.checked;
            if (this.checked) {
              fimstats.checkUnplayed();
            } else {
              $('#your-next-media').removeClass('p0ne-fimstats-unplayed');
            }
          });
        }
      },
      disable: function(){
        $('#your-next-media').removeClass('p0ne-fimstats-unplayed');
      }
    });
    /*@source p0ne.bpm.ls */
    /**
     * BetterPonymotes - a script add ponymotes to the chat on plug.dj
     * based on BetterPonymotes https://ponymotes.net/bpm/
     * for a ponymote tutorial see:
     * http://www.reddit.com/r/mylittlepony/comments/177z8f/how_to_use_default_emotes_like_a_pro_works_for/
     *
     * @author jtbrinkmann aka. Brinkie Pie
     * @license MIT License
     * @copyright (c) 2015 J.-T. Brinkmann
     */
    console.log("~~~~~~~ p0ne.bpm ~~~~~~~");
    /*####################################
    #          BETTER PONYMOTES          #
    ####################################*/
    module('bpm', {
      require: ['chatPlugin'],
      disabled: true,
      displayName: 'Better Ponymotes',
      settings: 'pony',
      _settings: {
        showNSFW: false
      },
      module: function(str){
        return this.bpm(str);
      },
      setup: function(arg$, arg1$){
        var addListener, $create, addCommand, _settings, host, ref$, _FLAG_NSFW, _FLAG_REDIRECT, EMOTE_REGEXP, sanitize_map, this$ = this;
        addListener = arg$.addListener, $create = arg$.$create, addCommand = arg$.addCommand;
        _settings = arg1$._settings;
        host = ((ref$ = window.p0ne) != null ? ref$.host : void 8) || "https://cdn.p0ne.com";
        /*== external sources ==*/
        if (!window.emote_map) {
          window.emote_map = {};
          $.getScript(host + "/scripts/bpm-resources.js").then(function(){
            API.trigger('p0ne_emotes_map');
          }).fail(function(){
            API.chatLog("Better Ponymotes failed to load ponimote data");
            this$.disable();
          });
        } else {
          requestAnimationFrame(function(){
            return API.trigger('p0ne_emotes_map');
          });
        }
        $create("<div id='bpm-resources'><link rel='stylesheet' href='" + host + "/css/bpmotes.css' type='text/css'><link rel='stylesheet' href='" + host + "/css/emote-classes.css' type='text/css'><link rel='stylesheet' href='" + host + "/css/combiners-nsfw.css' type='text/css'><link rel='stylesheet' href='" + host + "/css/gif-animotes.css' type='text/css'>" + ('webkitAnimation' in document.body.style
          ? "<link rel='stylesheet' href='" + host + "/css/extracss-webkit.css' type='text/css'>"
          : "<link rel='stylesheet' href='" + host + "/css/extracss-pure.css' type='text/css'>") + "</div>").appendTo($body);
        /*
                <style>
                \#chat-suggestion-items .bpm-emote {
                    max-width: 27px;
                    max-height: 27px
                }
                </style>
        */
        /*== constants ==*/
        _FLAG_NSFW = 1;
        _FLAG_REDIRECT = 2;
        /*
         * As a note, this regexp is a little forgiving in some respects and strict in
         * others. It will not permit text in the [] portion, but alt-text quotes don't
         * have to match each other.
         */
        /*                 [](/  <   emote   >   <     alt-text    >  )*/
        EMOTE_REGEXP = /\[\]\(\/([\w:!#\/\-]+)\s*(?:&#3[49];([^"]*)&#3[49];)?\)/g;
        /*== auxiliaries ==*/
        /*
         * Escapes an emote name (or similar) to match the CSS classes.
         *
         * Must be kept in sync with other copies, and the Python code.
         */
        sanitize_map = {
          '!': '_excl_',
          ':': '_colon_',
          '#': '_hash_',
          '/': '_slash_'
        };
        function sanitize_emote(s){
          return s.toLowerCase().replace(/[!:#\/]/g, function(c){
            return sanitize_map[c];
          });
        }
        function lookup_core_emote(name, altText){
          var data, nameWithSlash, parts, flag_data, tag_data, flags, source_id, is_nsfw, is_redirect;
          data = emote_map["/" + name];
          if (!data) {
            return null;
          }
          nameWithSlash = name;
          parts = data.split(',');
          flag_data = parts[0];
          tag_data = parts[1];
          flags = parseInt(flag_data.slice(0, 1), 16);
          source_id = parseInt(flag_data.slice(1, 3), 16);
          is_nsfw = flags & _FLAG_NSFW;
          is_redirect = flags & _FLAG_REDIRECT;
          /*tags = []
          start = 0
          while (str = tag_data.slice(start, start+2)) != ""
              tags.push(parseInt(str, 16)) # Hexadecimal
              start += 2
          
          if is_redirect
              base = parts.2
          else
              base = name*/
          return {
            name: nameWithSlash,
            is_nsfw: !!is_nsfw,
            source_id: source_id,
            source_name: sr_id2name[source_id],
            css_class: "bpmote-" + sanitize_emote(name),
            altText: altText
          };
        }
        function convert_emote_element(info, parts, _){
          var title, flags, i$, len$, i, flag;
          title = (info.name + " from " + info.source_name).replace(/"/g, '');
          flags = "";
          for (i$ = 0, len$ = parts.length; i$ < len$; ++i$) {
            i = i$;
            flag = parts[i$];
            if (i > 0) {
              /* Normalize case, and forbid things that don't look exactly as we expect */
              flag = sanitize_emote(flag.toLowerCase());
              if (!/\W/.test(flag)) {
                flags += " bpflag-" + flag;
              }
            }
          }
          if (info.is_nsfw) {
            if (_settings.showNSFW) {
              title = "[NSFW] " + title;
              flags += " bpm-nsfw";
            } else {
              console.warn("[bpm] nsfw emote (disabled)", name);
              return "<span class='bpm-nsfw' title='NSFW emote'>" + _ + "</span>";
            }
          }
          return "<span class='bpflag-in bpm-emote " + info.css_class + " " + flags + "' title='" + title + "'>" + (info.altText || '') + "</span>";
        }
        this.bpm = function(str){
          return str.replace(EMOTE_REGEXP, function(all, parts, altText){
            var name, info;
            parts = parts.split('-');
            name = parts[0];
            info = lookup_core_emote(name, altText);
            if (!info) {
              return all;
            } else {
              return convert_emote_element(info, parts, all);
            }
          });
        };
        addListener(window._$context || API, 'p0ne:chat:plugin', function(msg){
          msg.message = bpm(msg.message);
        });
        addListener('once', API, 'p0ne_emotes_map', function(){
          var cb;
          console.info("[bpm] loaded");
          get$cms().find('.text').html(function(){
            return bpm(this.innerHTML);
          });
          /* add autocomplete if/when plug_p0ne and plug_p0ne.autocomplete are loaded */
          cb = function(){
            var AUTOCOMPLETE_REGEX;
            AUTOCOMPLETE_REGEX = /^\[\]\(\/([\w#\\!\:\/]+)(\s*["'][^"']*["'])?(\))?/;
            if (typeof addAutocompletion == 'function') {
              addAutocompletion({
                name: "Ponymotes",
                data: Object.keys(emote_map),
                pre: "[]",
                check: function(str, pos){
                  var temp;
                  if (!str[pos + 2] || str[pos + 2] === "(" && (!str[pos + 3] || str[pos + 3] === "(/")) {
                    temp = AUTOCOMPLETE_REGEX.exec(str.substr(pos));
                    if (temp) {
                      this.data = temp[2] || '';
                      return true;
                    }
                  }
                  return false;
                },
                display: function(items){
                  var emote;
                  return (function(){
                    var i$, ref$, len$, results$ = [];
                    for (i$ = 0, len$ = (ref$ = items).length; i$ < len$; ++i$) {
                      emote = ref$[i$];
                      results$.push({
                        value: "[](/" + emote + ")",
                        image: bpm("[](/" + emote + ")")
                      });
                    }
                    return results$;
                  }());
                },
                insert: function(suggestion){
                  return suggestion.substr(0, suggestion.length - 1) + "" + this.data + ")";
                }
              });
            }
          };
          if (window.addAutocompletion) {
            cb();
          } else {
            addListener('once', API, 'p0ne:autocomplete', cb);
          }
        });
        addCommand('bpm', {
          aliases: ['ponymote'],
          parameters: " emotename or [](/emotename)",
          description: "checks if the emote exists and sends it if so",
          callback: function(str){
            var emote;
            if (str = /^\/bpm (?:^\/\[\]\(\/(.*?)(-.*?)?\)|(.*)(-.*?)?)/i.exec(str)) {
              if (str[1]) {
                emote = str[1];
                str = emote + "" + str[2];
              } else {
                emote = str[3];
                str = emote + "" + str[4];
              }
              if (emote in emote_map) {
                API.sendChat(bpm("[](/" + str + ")"));
              }
            }
          }
        });
        addCommand('reloadBPM', {
          description: "reloads the BPM database.",
          callback: function(str){
            var emote;
            if (str = /^\/bpm (?:^\/\[\]\(\/(.*?)(-.*?)?\)|(.*)(-.*?)?)/i.exec(str)) {
              if (str[1]) {
                emote = str[1];
                str = emote + "" + str[2];
              } else {
                emote = str[3];
                str = emote + "" + str[4];
              }
              if (emote in emote_map) {
                API.sendChat(bpm("[](/" + str + ")"));
              }
            }
          }
        });
      },
      disable: function(revertPonimotes){
        if (revertPonimotes) {
          get$cms().find('.bpm-emote').replaceWith(function(){
            var flags, i$, ref$, len$, class_, emote;
            flags = "";
            for (i$ = 0, len$ = (ref$ = this.classList || this.className.split(/s+/)).length; i$ < len$; ++i$) {
              class_ = ref$[i$];
              if (class_.startsWith('bpmote-')) {
                emote = class_.substr(7);
              } else if (class_.startsWith('bpflag-') && class_ !== 'bpflag-in') {
                flags += class_.substr(6);
              }
            }
            if (emote) {
              return document.createTextNode("[](/" + emote + flags + ")");
            } else {
              console.warn("[bpm] cannot convert back", this);
            }
          });
        }
      }
    });
    /*@source p0ne.end.ls */
    return _.defer(function(){
      var remaining, name, ref$, m;
      remaining = 1;
      for (name in ref$ = p0ne.modules) {
        m = ref$[name];
        if (m.loading) {
          remaining++;
          m.loading.always(moduleLoaded);
        }
      }
      moduleLoaded();
      if (remaining) {
        console.info(getTime() + " [p0ne] " + plural(remaining, 'module') + " still loading");
      }
      function moduleLoaded(m){
        var noCollapsedGroup, name, ref$;
        if (--remaining === 0) {
          console.error = error_;
          console.warn = warn_;
          console.groupEnd();
          console.info("[p0ne] initialized!");
          if (errors) {
            console.error("[p0ne] There have been " + errors + " errors");
          }
          if (warnings) {
            console.warn("[p0ne] There have been " + warnings + " warnings");
          }
          noCollapsedGroup = true;
          for (name in ref$ = p0ne.modules) {
            m = ref$[name];
            if (m.disabled && !m.settings && !(m.moderator && user.isStaff)) {
              if (noCollapsedGroup) {
                console.groupCollapsed("[p0ne] there are disabled modules which are hidden from the settings");
                noCollapsedGroup = false;
              }
              console.warn("\t" + name, m);
            }
          }
          if (!noCollapsedGroup) {
            console.groupEnd();
          }
          if (typeof appendChat == 'function') {
            appendChat("<div class='cm p0ne-notif p0ne-notif-loaded'>plug_p0ne v" + p0ne.version + " loaded " + (typeof getTimestamp == 'function' ? getTimestamp() : void 8) + "</div>");
          }
          console.timeEnd("[p0ne] completly loaded");
          if (typeof _$context != 'undefined' && _$context !== null) {
            _$context.trigger('p0ne:loaded', p0ne);
          }
          return API.trigger('p0ne:loaded', p0ne);
        }
      }
    });
    function fn$(type, callback, context){
      var ref$;
      ((ref$ = this._events)[type] || (ref$[type] = [])).unshift({
        callback: callback,
        context: context,
        ctx: context || this
      });
      return this;
    }
  });
  function fn$(needle){
    return -1 !== this.indexOf(needle);
  }
  function fn1$(needles){
    var i$, len$, needle;
    for (i$ = 0, len$ = needles.length; i$ < len$; ++i$) {
      needle = needles[i$];
      if (-1 !== this.indexOf(needle)) {
        return true;
      }
    }
    return false;
  }
});
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function clone$(it){
  function fun(){} fun.prototype = it;
  return new fun;
}
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function deepEq$(x, y, type){
  var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
      has = function (obj, key) { return hasOwnProperty.call(obj, key); };
  var first = true;
  return eq(x, y, []);
  function eq(a, b, stack) {
    var className, length, size, result, alength, blength, r, key, ref, sizeB;
    if (a == null || b == null) { return a === b; }
    if (a.__placeholder__ || b.__placeholder__) { return true; }
    if (a === b) { return a !== 0 || 1 / a == 1 / b; }
    className = toString.call(a);
    if (toString.call(b) != className) { return false; }
    switch (className) {
      case '[object String]': return a == String(b);
      case '[object Number]':
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        return +a == +b;
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') { return false; }
    length = stack.length;
    while (length--) { if (stack[length] == a) { return true; } }
    stack.push(a);
    size = 0;
    result = true;
    if (className == '[object Array]') {
      alength = a.length;
      blength = b.length;
      if (first) {
        switch (type) {
        case '===': result = alength === blength; break;
        case '<==': result = alength <= blength; break;
        case '<<=': result = alength < blength; break;
        }
        size = alength;
        first = false;
      } else {
        result = alength === blength;
        size = alength;
      }
      if (result) {
        while (size--) {
          if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
        }
      }
    } else {
      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
        return false;
      }
      for (key in a) {
        if (has(a, key)) {
          size++;
          if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
        }
      }
      if (result) {
        sizeB = 0;
        for (key in b) {
          if (has(b, key)) { ++sizeB; }
        }
        if (first) {
          if (type === '<<=') {
            result = size < sizeB;
          } else if (type === '<==') {
            result = size <= sizeB
          } else {
            result = size === sizeB;
          }
        } else {
          first = false;
          result = size === sizeB;
        }
      }
    }
    stack.pop();
    return result;
  }
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
